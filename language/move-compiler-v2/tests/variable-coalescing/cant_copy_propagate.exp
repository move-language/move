============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := move($t0)
  1: if ($t1) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 12
  5: label L1
  6: $t3 := 99
  7: $t0 := infer($t3)
  8: $t4 := infer($t2)
  9: $t6 := 1
 10: $t5 := +($t4, $t6)
 11: $t4 := infer($t5)
 12: label L2
 13: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t2 := move($t0)
  1: if ($t1) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 9
  5: label L1
  6: $t4 := move($t2)
  7: $t6 := 1
  8: $t5 := +($t4, $t6)
  9: label L2
 10: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t0, b:$t2
  0: $t2 := move($t0)
     # live vars: $t1, $t2
     # events: e:$t1
  1: if ($t1) goto 2 else goto 5
     # live vars: $t2
  2: label L0
     # live vars: $t2
  3: m::consume($t2)
     # live vars:
  4: goto 9
     # live vars: $t2
  5: label L1
     # live vars: $t2
     # events: e:$t2, b:$t4
  6: $t4 := move($t2)
     # live vars: $t4
     # events: b:$t6
  7: $t6 := 1
     # live vars: $t4, $t6
     # events: e:$t4, e:$t5, e:$t6, b:$t5
  8: $t5 := +($t4, $t6)
     # live vars:
  9: label L2
     # live vars:
 10: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
  0: $t0 := move($t0)
  1: if ($t1) goto 2 else goto 5
  2: label L0
  3: m::consume($t0)
  4: goto 9
  5: label L1
  6: $t0 := move($t0)
  7: $t6 := 1
  8: $t0 := +($t0, $t6)
  9: label L2
 10: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64
  0: if ($t1) goto 1 else goto 4
  1: label L0
  2: m::consume($t0)
  3: goto 7
  4: label L1
  5: $t6 := 1
  6: $t0 := +($t0, $t6)
  7: label L2
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
test(Arg0: u64, Arg1: bool) /* def_idx: 1 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[1](Arg1: bool)
	1: BrFalse(5)
B1:
	2: MoveLoc[0](Arg0: u64)
	3: Call consume(u64)
	4: Branch(11)
B2:
	5: LdU64(1)
	6: StLoc[2](loc0: u64)
	7: MoveLoc[0](Arg0: u64)
	8: MoveLoc[2](loc0: u64)
	9: Add
	10: Pop
B3:
	11: Ret
}
}
============ bytecode verification succeeded ========
