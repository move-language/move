// ---- Model Dump
module 0x42::pack_unpack {
    struct S {
        f1: u8,
        f2: u8,
        f3: u8,
    }
    private fun pack1(x: u8,y: u8,z: u8): pack_unpack::S {
        pack pack_unpack::S(x, y, z)
    }
    private fun pack2(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f1: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S($f1, z, $f3)
          }
        }
    }
    private fun pack3(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f2: u8 = x;
          pack pack_unpack::S(y, $f2, z)
        }
    }
    private fun pack4(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f2: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
    private fun pack5(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f3: u8 = x;
          pack pack_unpack::S(y, z, $f3)
        }
    }
    private fun pack6(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f3: u8 = x;
          {
            let $f2: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
    spec fun $pack1(x: u8,y: u8,z: u8): pack_unpack::S {
        pack pack_unpack::S(x, y, z)
    }
    spec fun $pack2(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f1: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S($f1, z, $f3)
          }
        }
    }
    spec fun $pack3(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f2: u8 = x;
          pack pack_unpack::S(y, $f2, z)
        }
    }
    spec fun $pack4(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f2: u8 = x;
          {
            let $f3: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
    spec fun $pack5(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f3: u8 = x;
          pack pack_unpack::S(y, z, $f3)
        }
    }
    spec fun $pack6(x: u8,y: u8,z: u8): pack_unpack::S {
        {
          let $f3: u8 = x;
          {
            let $f2: u8 = y;
            pack pack_unpack::S(z, $f2, $f3)
          }
        }
    }
} // end 0x42::pack_unpack

============ initial bytecode ================

[variant baseline]
fun pack_unpack::pack1($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
  0: $t3 := pack pack_unpack::S($t0, $t1, $t2)
  1: return $t3
}


[variant baseline]
fun pack_unpack::pack2($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     var $t4: u8
     var $t5: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t3 := pack pack_unpack::S($t4, $t2, $t5)
  3: return $t3
}


[variant baseline]
fun pack_unpack::pack3($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     var $t4: u8
  0: $t4 := infer($t0)
  1: $t3 := pack pack_unpack::S($t1, $t4, $t2)
  2: return $t3
}


[variant baseline]
fun pack_unpack::pack4($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     var $t4: u8
     var $t5: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t3 := pack pack_unpack::S($t2, $t4, $t5)
  3: return $t3
}


[variant baseline]
fun pack_unpack::pack5($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     var $t4: u8
  0: $t4 := infer($t0)
  1: $t3 := pack pack_unpack::S($t1, $t2, $t4)
  2: return $t3
}


[variant baseline]
fun pack_unpack::pack6($t0: u8, $t1: u8, $t2: u8): pack_unpack::S {
     var $t3: pack_unpack::S
     var $t4: u8
     var $t5: u8
  0: $t4 := infer($t0)
  1: $t5 := infer($t1)
  2: $t3 := pack pack_unpack::S($t2, $t5, $t4)
  3: return $t3
}
