/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x1156c8f2
                {
                    // test_failure_1()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_test_failure_1()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x17163f6d
                {
                    // test_failure_2()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_test_failure_2()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x72a4ea1b
                {
                    // test_failure_3()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_test_failure_3()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_failure_1() {
                // M::failure_1()
                A2_M_failure_1()
                // return ()
            }

            function A2_M_test_failure_2() {
                let $t0, $t1
                // $t0 := 1
                $t0 := 1
                // $t1 := 0
                $t1 := 0
                // M::failure_2($t0, $t1)
                A2_M_failure_2($t0, $t1)
                // return ()
            }

            function A2_M_test_failure_3() {
                let addr, $t1, $t2
                // $t1 := 0x3
                $t1 := 0x3
                // $t2 := 0
                $t2 := 0
                // M::failure_3($t1, $t2)
                A2_M_failure_3($t1, $t2)
                // return ()
            }

            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Move-To-Yul Diagnostics:
 error: solidity signature is not compatible with the move signature
   ┌─ tests/test-dispatcher/ExternalCallFailure.move:11:5
   │
11 │     public native fun failure_3(add: address, i:u8);
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: solidity signature is not compatible with the move signature
  ┌─ tests/test-dispatcher/ExternalCallFailure.move:8:5
  │
8 │     public native fun failure_2(add: u128, i:u8);
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: external function must have at least one argument
  ┌─ tests/test-dispatcher/ExternalCallFailure.move:5:5
  │
5 │     public native fun failure_1();
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: error happens when parsing the signature
  ┌─ tests/test-dispatcher/ExternalCallFailure.move:5:5
  │
5 │     public native fun failure_1();
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
