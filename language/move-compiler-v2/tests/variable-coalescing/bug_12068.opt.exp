============ initial bytecode ================

[variant baseline]
fun m::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t0 := 0
  1: label L0
  2: $t1 := true
  3: if ($t1) goto 4 else goto 10
  4: label L2
  5: $t3 := 1
  6: $t2 := +($t0, $t3)
  7: $t0 := infer($t2)
  8: goto 14
  9: goto 12
 10: label L3
 11: goto 14
 12: label L4
 13: goto 1
 14: label L1
 15: $t5 := 1
 16: $t4 := ==($t0, $t5)
 17: if ($t4) goto 18 else goto 20
 18: label L5
 19: goto 23
 20: label L6
 21: $t6 := 42
 22: abort($t6)
 23: label L7
 24: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     # live vars:
     # events: b:$t0
  0: $t0 := 0
     # live vars: $t0
  1: label L0
     # live vars: $t0
     # events: b:$t1
  2: $t1 := true
     # live vars: $t0, $t1
     # events: e:$t1
  3: if ($t1) goto 4 else goto 9
     # live vars: $t0
  4: label L2
     # live vars: $t0
     # events: b:$t3
  5: $t3 := 1
     # live vars: $t0, $t3
     # events: e:$t3, b:$t2
  6: $t2 := +($t0, $t3)
     # live vars: $t2
     # events: e:$t2
  7: $t0 := move($t2)
     # live vars: $t0
  8: goto 11
     # live vars: $t0
  9: label L3
     # live vars: $t0
 10: goto 11
     # live vars: $t0
 11: label L1
     # live vars: $t0
     # events: b:$t5
 12: $t5 := 1
     # live vars: $t0, $t5
     # events: e:$t0, e:$t5, b:$t4
 13: $t4 := ==($t0, $t5)
     # live vars: $t4
     # events: e:$t4
 14: if ($t4) goto 15 else goto 17
     # live vars:
 15: label L5
     # live vars:
 16: goto 20
     # live vars:
 17: label L6
     # live vars:
     # events: b:$t6
 18: $t6 := 42
     # live vars: $t6
     # events: e:$t6
 19: abort($t6)
     # live vars:
 20: label L7
     # live vars:
 21: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::main() {
     var $t0: u64
     var $t1: bool
     var $t2: u64 [unused]
     var $t3: u64
     var $t4: bool [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
  0: $t0 := 0
  1: label L0
  2: $t1 := true
  3: if ($t1) goto 4 else goto 9
  4: label L2
  5: $t3 := 1
  6: $t3 := +($t0, $t3)
  7: $t0 := move($t3)
  8: goto 11
  9: label L3
 10: goto 11
 11: label L1
 12: $t3 := 1
 13: $t1 := ==($t0, $t3)
 14: if ($t1) goto 15 else goto 17
 15: label L5
 16: goto 20
 17: label L6
 18: $t0 := 42
 19: abort($t0)
 20: label L7
 21: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 32.m {


main() /* def_idx: 0 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: LdTrue
	3: BrFalse(11)
B1:
	4: LdU64(1)
	5: StLoc[1](loc1: u64)
	6: MoveLoc[0](loc0: u64)
	7: CopyLoc[1](loc1: u64)
	8: Add
	9: StLoc[0](loc0: u64)
	10: Branch(12)
B2:
	11: Branch(12)
B3:
	12: LdU64(1)
	13: StLoc[1](loc1: u64)
	14: MoveLoc[0](loc0: u64)
	15: MoveLoc[1](loc1: u64)
	16: Eq
	17: BrFalse(19)
B4:
	18: Branch(21)
B5:
	19: LdU64(42)
	20: Abort
B6:
	21: Ret
}
}
============ bytecode verification succeeded ========
