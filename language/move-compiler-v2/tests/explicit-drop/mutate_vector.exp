============ initial bytecode ================

[variant baseline]
public fun m::new_scalar_from_u8($t0: u8): m::Scalar {
     var $t1: m::Scalar
     var $t2: m::Scalar
     var $t3: m::Scalar
     var $t4: &mut u8
     var $t5: &mut u8
     var $t6: &mut vector<u8>
     var $t7: &mut m::Scalar
     var $t8: u64
  0: $t3 := m::scalar_zero()
  1: $t2 := infer($t3)
  2: $t7 := borrow_local($t2)
  3: $t6 := borrow_field<m::Scalar>.data($t7)
  4: $t8 := 0
  5: $t5 := vector::borrow_mut<u8>($t6, $t8)
  6: $t4 := infer($t5)
  7: write_ref($t4, $t0)
  8: $t1 := infer($t2)
  9: return $t1
}


[variant baseline]
public fun m::scalar_zero(): m::Scalar {
     var $t0: m::Scalar
     var $t1: vector<u8>
  0: $t1 := [0]
  1: $t0 := pack m::Scalar($t1)
  2: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::new_scalar_from_u8($t0: u8): m::Scalar {
     var $t1: m::Scalar
     var $t2: m::Scalar
     var $t3: m::Scalar
     var $t4: &mut u8
     var $t5: &mut u8
     var $t6: &mut vector<u8>
     var $t7: &mut m::Scalar
     var $t8: u64
     # live vars: $t0
  0: $t3 := m::scalar_zero()
     # live vars: $t0, $t3
  1: $t2 := copy($t3)
     # live vars: $t0, $t2
  2: $t7 := borrow_local($t2)
     # live vars: $t0, $t2, $t7
  3: $t6 := borrow_field<m::Scalar>.data($t7)
     # live vars: $t0, $t2, $t6
  4: $t8 := 0
     # live vars: $t0, $t2, $t6, $t8
  5: $t5 := vector::borrow_mut<u8>($t6, $t8)
     # live vars: $t0, $t2, $t5
  6: $t4 := move($t5)
     # live vars: $t0, $t2, $t4
  7: write_ref($t4, $t0)
     # live vars: $t2
  8: $t1 := copy($t2)
     # live vars: $t1
  9: return $t1
}


[variant baseline]
public fun m::scalar_zero(): m::Scalar {
     var $t0: m::Scalar
     var $t1: vector<u8>
     var $t2: vector<u8>
     # live vars:
  0: $t1 := [0]
     # live vars: $t1
  1: $t2 := copy($t1)
     # live vars: $t2
  2: $t0 := pack m::Scalar($t2)
     # live vars: $t0
  3: return $t0
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
public fun m::new_scalar_from_u8($t0: u8): m::Scalar {
     var $t1: m::Scalar
     var $t2: m::Scalar
     var $t3: m::Scalar
     var $t4: &mut u8
     var $t5: &mut u8
     var $t6: &mut vector<u8>
     var $t7: &mut m::Scalar
     var $t8: u64
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  0: $t3 := m::scalar_zero()
     # live vars: $t0, $t3
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  1: $t2 := copy($t3)
     # live vars: $t0, $t2
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  2: $t7 := borrow_local($t2)
     # live vars: $t0, $t2, $t7
     # graph: {@200=local($t2)[borrow(true) -> @201],@201=derived[]}
     # locals: {$t2=@200,$t7=@201}
     # globals: {}
     # moved: {}
     #
  3: $t6 := borrow_field<m::Scalar>.data($t7)
     # live vars: $t0, $t2, $t6
     # graph: {@200=local($t2)[borrow(true) -> @201],@201=derived[borrow_field(true) -> @301],@301=derived[]}
     # locals: {$t2=@200,$t6=@301}
     # globals: {}
     # moved: {}
     #
  4: $t8 := 0
     # live vars: $t0, $t2, $t6, $t8
     # graph: {@200=local($t2)[borrow(true) -> @201],@201=derived[borrow_field(true) -> @301],@301=derived[]}
     # locals: {$t2=@200,$t6=@301}
     # globals: {}
     # moved: {}
     #
  5: $t5 := vector::borrow_mut<u8>($t6, $t8)
     # live vars: $t0, $t2, $t5
     # graph: {@200=local($t2)[borrow(true) -> @201],@201=derived[borrow_field(true) -> @301],@301=derived[call(true) -> @500],@500=derived[]}
     # locals: {$t2=@200,$t5=@500}
     # globals: {}
     # moved: {$t6,$t8}
     #
  6: $t4 := move($t5)
     # live vars: $t0, $t2, $t4
     # graph: {@200=local($t2)[borrow(true) -> @201],@201=derived[borrow_field(true) -> @301],@301=derived[call(true) -> @500],@500=derived[]}
     # locals: {$t2=@200,$t4=@500}
     # globals: {}
     # moved: {$t5,$t6,$t8}
     #
  7: write_ref($t4, $t0)
     # live vars: $t2
     # graph: {@200=local($t2)[]}
     # locals: {$t2=@200}
     # globals: {}
     # moved: {$t5,$t6,$t8}
     #
  8: $t1 := copy($t2)
     # live vars: $t1
     # graph: {@200=local($t2)[]}
     # locals: {$t2=@200}
     # globals: {}
     # moved: {$t5,$t6,$t8}
     #
  9: return $t1
}


[variant baseline]
public fun m::scalar_zero(): m::Scalar {
     var $t0: m::Scalar
     var $t1: vector<u8>
     var $t2: vector<u8>
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  0: $t1 := [0]
     # live vars: $t1
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  1: $t2 := copy($t1)
     # live vars: $t2
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {}
     #
  2: $t0 := pack m::Scalar($t2)
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     # moved: {$t2}
     #
  3: return $t0
}

============ after ExplicitDrop: ================

[variant baseline]
public fun m::new_scalar_from_u8($t0: u8): m::Scalar {
     var $t1: m::Scalar
     var $t2: m::Scalar
     var $t3: m::Scalar
     var $t4: &mut u8
     var $t5: &mut u8
     var $t6: &mut vector<u8>
     var $t7: &mut m::Scalar
     var $t8: u64
  0: $t3 := m::scalar_zero()
  1: $t2 := copy($t3)
  2: drop($t3)
  3: $t7 := borrow_local($t2)
  4: $t6 := borrow_field<m::Scalar>.data($t7)
  5: drop($t7)
  6: $t8 := 0
  7: $t5 := vector::borrow_mut<u8>($t6, $t8)
  8: $t4 := move($t5)
  9: write_ref($t4, $t0)
 10: drop($t4)
 11: $t1 := copy($t2)
 12: return $t1
}


[variant baseline]
public fun m::scalar_zero(): m::Scalar {
     var $t0: m::Scalar
     var $t1: vector<u8>
     var $t2: vector<u8>
  0: $t1 := [0]
  1: $t2 := copy($t1)
  2: drop($t1)
  3: $t0 := pack m::Scalar($t2)
  4: return $t0
}
