// ---- Model Dump
module 0x2::Container {
    struct T {
        f: #0,
    }
    public fun get<V>(_self: &Container::T<V>) {
        Abort(0)
    }
    public fun new<V>() {
        Abort(0)
    }
    public fun put<V>(_self: &mut Container::T<V>,_item: V) {
        Abort(0)
    }
} // end 0x2::Container
module 0x2::M {
    struct Box {
        f1: #0,
        f2: #0,
    }
    private fun new<T>() {
        Abort(0)
    }
    private fun t0() {
        {
          let v: Container::T<M::Box<u64>> = Container::new<M::Box<u64>>();
          {
            let M::Box<?6>{ f1: f1: u64, f2: f2: u64 } = Container::get<M::Box<u64>>(Borrow(Immutable)(v));
            f2;
            Container::put<M::Box<u64>>(Borrow(Mutable)(v), pack M::Box<u64>(0, 0));
            f1
          }
        }
    }
    private fun t1() {
        {
          let v: Container::T<M::Box<M::Box<M::Box<u64>>>> = Container::new<M::Box<M::Box<M::Box<u64>>>>();
          {
            let M::Box<?6>{ f1: f1: M::Box<M::Box<u64>>, f2: f2: M::Box<M::Box<u64>> } = Container::get<M::Box<M::Box<M::Box<u64>>>>(Borrow(Immutable)(v));
            Container::put<M::Box<M::Box<M::Box<u64>>>>(Borrow(Mutable)(v), pack M::Box<M::Box<M::Box<u64>>>(Deref(Borrow(Immutable)(f1)), f2));
            f1
          }
        }
    }
} // end 0x2::M
