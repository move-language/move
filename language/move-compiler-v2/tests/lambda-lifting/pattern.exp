// -- Model dump before env processor pipeline:
module 0xcafe::m {
    struct S {
        x: #0,
    }
    private fun consume<T>(s: m::S<#0>,x: #0,f: |(m::S<#0>, #0)|#0): #0 {
        (f)(s, x)
    }
    private fun pattern(s: m::S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, |(m::S<u64>{ x: x: u64 }, _y: u64): (m::S<u64>, u64)| {
          let y: u64 = x;
          Add<u64>(x, y)
        })
    }
} // end 0xcafe::m


// -- Model dump after env processor lambda-lifting:
module 0xcafe::m {
    struct S {
        x: #0,
    }
    private fun consume<T>(s: m::S<#0>,x: #0,f: |(m::S<#0>, #0)|#0): #0 {
        (f)(s, x)
    }
    private fun pattern(s: m::S<u64>,x: u64): u64 {
        m::consume<u64>(s, x, closure m::pattern$lambda$1())
    }
    private fun pattern$lambda$1(param$0: m::S<u64>,_y: u64): u64 {
        {
          let m::S<u64>{ x: x: u64 }: m::S<u64> = param$0;
          {
            let y: u64 = x;
            Add<u64>(x, y)
          }
        }
    }
} // end 0xcafe::m
