============ initial bytecode ================

[variant baseline]
fun m::main() {
     var $t0: u64
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
  0: $t1 := 0
  1: $t0 := infer($t1)
  2: label L0
  3: $t2 := true
  4: if ($t2) goto 5 else goto 11
  5: label L2
  6: $t4 := 1
  7: $t3 := +($t0, $t4)
  8: $t0 := infer($t3)
  9: goto 15
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 2
 15: label L1
 16: $t6 := 1
 17: $t5 := ==($t0, $t6)
 18: if ($t5) goto 19 else goto 21
 19: label L5
 20: goto 24
 21: label L6
 22: $t7 := 42
 23: abort($t7)
 24: label L7
 25: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::main() {
     var $t0: u64
     var $t1: u64
     var $t2: bool
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     # live vars:
     # events: b:$t1
  0: $t1 := 0
     # live vars: $t1
     # events: e:$t1, b:$t0
  1: $t0 := move($t1)
     # live vars: $t0
  2: label L0
     # live vars: $t0
     # events: b:$t2
  3: $t2 := true
     # live vars: $t0, $t2
     # events: e:$t2
  4: if ($t2) goto 5 else goto 10
     # live vars: $t0
  5: label L2
     # live vars: $t0
     # events: b:$t4
  6: $t4 := 1
     # live vars: $t0, $t4
     # events: e:$t4, b:$t3
  7: $t3 := +($t0, $t4)
     # live vars: $t3
     # events: e:$t3
  8: $t0 := move($t3)
     # live vars: $t0
  9: goto 12
     # live vars: $t0
 10: label L3
     # live vars: $t0
 11: goto 12
     # live vars: $t0
 12: label L1
     # live vars: $t0
     # events: b:$t6
 13: $t6 := 1
     # live vars: $t0, $t6
     # events: e:$t0, e:$t6, b:$t5
 14: $t5 := ==($t0, $t6)
     # live vars: $t5
     # events: e:$t5
 15: if ($t5) goto 16 else goto 18
     # live vars:
 16: label L5
     # live vars:
 17: goto 21
     # live vars:
 18: label L6
     # live vars:
     # events: b:$t7
 19: $t7 := 42
     # live vars: $t7
     # events: e:$t7
 20: abort($t7)
     # live vars:
 21: label L7
     # live vars:
 22: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::main() {
     var $t0: u64 [unused]
     var $t1: u64
     var $t2: bool
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: bool [unused]
     var $t6: u64 [unused]
     var $t7: u64 [unused]
  0: $t1 := 0
  1: $t1 := move($t1)
  2: label L0
  3: $t2 := true
  4: if ($t2) goto 5 else goto 10
  5: label L2
  6: $t4 := 1
  7: $t4 := +($t1, $t4)
  8: $t1 := move($t4)
  9: goto 12
 10: label L3
 11: goto 12
 12: label L1
 13: $t4 := 1
 14: $t2 := ==($t1, $t4)
 15: if ($t2) goto 16 else goto 18
 16: label L5
 17: goto 21
 18: label L6
 19: $t1 := 42
 20: abort($t1)
 21: label L7
 22: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 32.m {


main() /* def_idx: 0 */ {
L0:	loc0: u64
L1:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[0](loc0: u64)
	2: LdTrue
	3: BrFalse(11)
B1:
	4: LdU64(1)
	5: StLoc[1](loc1: u64)
	6: MoveLoc[0](loc0: u64)
	7: CopyLoc[1](loc1: u64)
	8: Add
	9: StLoc[0](loc0: u64)
	10: Branch(12)
B2:
	11: Branch(12)
B3:
	12: LdU64(1)
	13: StLoc[1](loc1: u64)
	14: MoveLoc[0](loc0: u64)
	15: MoveLoc[1](loc1: u64)
	16: Eq
	17: BrFalse(19)
B4:
	18: Branch(21)
B5:
	19: LdU64(42)
	20: Abort
B6:
	21: Ret
}
}
============ bytecode verification succeeded ========
