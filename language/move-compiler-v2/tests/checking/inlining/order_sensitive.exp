// -- Model dump before bytecode pipeline
module 0x42::OrderSensitiveTest1 {
} // end 0x42::OrderSensitiveTest1
module 0x42::OrderSensitiveTest2 {
    use 0x42::OrderSensitiveTest1; // resolved as: 0x42::OrderSensitiveTest1
} // end 0x42::OrderSensitiveTest2
module 0x42::OrderSensitiveTest3 {
    use 0x42::OrderSensitiveTest2; // resolved as: 0x42::OrderSensitiveTest2
    public fun fun2(a: u64,b: u64): u64 {
        Add<u64>({
          let (a: u64, b: u64): (u64, u64) = Tuple(Mul<u64>(7, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 5)
          }), b);
          Add<u64>(Add<u64>({
            let (a: u64, b: u64): (u64, u64) = Tuple({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 3)
            }, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 4)
            });
            Add<u64>({
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Mul<u64>(a, b)
            }, Mul<u64>(2, {
              let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
              Add<u64>(Mul<u64>(a, b), 2)
            }))
          }, Mul<u64>(3, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 3)
          })), Mul<u64>(5, {
            let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
            Add<u64>(Mul<u64>(a, b), 4)
          }))
        }, Mul<u64>(9, {
          let (a: u64, b: u64): (u64, u64) = Tuple(a, b);
          Add<u64>(Mul<u64>(a, b), 6)
        }))
    }
} // end 0x42::OrderSensitiveTest3
