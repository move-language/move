============ initial bytecode ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
  0: $t3 := false
  1: $t2 := pack test::T($t3)
  2: $t1 := pack test::S<test::T>($t2)
  3: $t0 := pack test::U<test::S<test::T>>($t1)
  4: return $t0
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
     # live vars:
  0: $t3 := false
     # live vars: $t3
  1: $t2 := pack test::T($t3)
     # live vars: $t2
  2: $t1 := pack test::S<test::T>($t2)
     # live vars: $t1
  3: $t0 := pack test::U<test::S<test::T>>($t1)
     # live vars: $t0
  4: return $t0
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t3 := false
     # live vars: $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t2 := pack test::T($t3)
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t3}
     #
  2: $t1 := pack test::S<test::T>($t2)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  3: $t0 := pack test::U<test::S<test::T>>($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2,$t3}
     #
  4: return $t0
}

============ after ExplicitDrop: ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
  0: $t3 := false
  1: $t2 := pack test::T($t3)
  2: $t1 := pack test::S<test::T>($t2)
  3: $t0 := pack test::U<test::S<test::T>>($t1)
  4: return $t0
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t3 := false
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t2 := pack test::T($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t1 := pack test::S<test::T>($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t0 := pack test::U<test::S<test::T>>($t1)
     # abort state before: {returns}
     # abort state after : {}
  4: return $t0
}


Diagnostics:
error: Invalid instantiation
   ┌─ tests/ability-checker/bad_inst.move:13:16
   │
13 │         U<S<T>> { x: S { x: T { } } }
   │                      ^^^^^^^^^^^^^^

error: Invalid instantiation
   ┌─ tests/ability-checker/bad_inst.move:13:3
   │
13 │         U<S<T>> { x: S { x: T { } } }
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============ after AbilityChecker: ================

[variant baseline]
fun test::test(): test::U<test::S<test::T>> {
     var $t0: test::U<test::S<test::T>>
     var $t1: test::S<test::T>
     var $t2: test::T
     var $t3: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t3 := false
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t2 := pack test::T($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t1 := pack test::S<test::T>($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t0 := pack test::U<test::S<test::T>>($t1)
     # abort state before: {returns}
     # abort state after : {}
  4: return $t0
}
