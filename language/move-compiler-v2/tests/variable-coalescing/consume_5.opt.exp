============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: u32
     var $t4: bool
  0: $t3 := copy($t1)
  1: $t2 := infer($t3)
  2: if ($t0) goto 3 else goto 6
  3: label L0
  4: m::consume($t2)
  5: goto 8
  6: label L1
  7: m::consume($t1)
  8: label L2
  9: $t4 := !($t0)
 10: if ($t4) goto 11 else goto 14
 11: label L3
 12: m::consume($t1)
 13: goto 16
 14: label L4
 15: m::consume($t2)
 16: label L5
 17: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W
     var $t3: m::W
     var $t4: bool
  0: $t3 := copy($t1)
  1: $t2 := infer($t3)
  2: if ($t0) goto 3 else goto 6
  3: label L0
  4: m::consume_($t2)
  5: goto 8
  6: label L1
  7: m::consume_($t1)
  8: label L2
  9: $t4 := !($t0)
 10: if ($t4) goto 11 else goto 14
 11: label L3
 12: m::consume_($t1)
 13: goto 16
 14: label L4
 15: m::consume_($t2)
 16: label L5
 17: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u32) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: u32
     var $t4: bool
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t3
  0: $t3 := copy($t1)
     # live vars: $t0, $t1, $t3
     # events: e:$t3, b:$t2
  1: $t2 := move($t3)
     # live vars: $t0, $t1, $t2
  2: if ($t0) goto 3 else goto 6
     # live vars: $t0, $t1, $t2
  3: label L0
     # live vars: $t0, $t1, $t2
  4: m::consume($t2)
     # live vars: $t0, $t1, $t2
  5: goto 8
     # live vars: $t0, $t1, $t2
  6: label L1
     # live vars: $t0, $t1, $t2
  7: m::consume($t1)
     # live vars: $t0, $t1, $t2
  8: label L2
     # live vars: $t0, $t1, $t2
     # events: e:$t0, b:$t4
  9: $t4 := !($t0)
     # live vars: $t1, $t2, $t4
     # events: e:$t4
 10: if ($t4) goto 11 else goto 14
     # live vars: $t1, $t2
 11: label L3
     # live vars: $t1
 12: m::consume($t1)
     # live vars:
 13: goto 16
     # live vars: $t1, $t2
     # events: e:$t1
 14: label L4
     # live vars: $t2
     # events: e:$t2
 15: m::consume($t2)
     # live vars:
 16: label L5
     # live vars:
 17: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W
     var $t3: m::W
     var $t4: bool
     var $t5: m::W
     var $t6: m::W
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t3
  0: $t3 := copy($t1)
     # live vars: $t0, $t1, $t3
     # events: e:$t3, b:$t2
  1: $t2 := move($t3)
     # live vars: $t0, $t1, $t2
  2: if ($t0) goto 3 else goto 7
     # live vars: $t0, $t1, $t2
  3: label L0
     # live vars: $t0, $t1, $t2
     # events: b:$t5
  4: $t5 := copy($t2)
     # live vars: $t0, $t1, $t2, $t5
     # events: e:$t5
  5: m::consume_($t5)
     # live vars: $t0, $t1, $t2
  6: goto 10
     # live vars: $t0, $t1, $t2
  7: label L1
     # live vars: $t0, $t1, $t2
     # events: b:$t6
  8: $t6 := copy($t1)
     # live vars: $t0, $t1, $t2, $t6
     # events: e:$t6
  9: m::consume_($t6)
     # live vars: $t0, $t1, $t2
 10: label L2
     # live vars: $t0, $t1, $t2
     # events: e:$t0, b:$t4
 11: $t4 := !($t0)
     # live vars: $t1, $t2, $t4
     # events: e:$t4
 12: if ($t4) goto 13 else goto 16
     # live vars: $t1, $t2
 13: label L3
     # live vars: $t1
 14: m::consume_($t1)
     # live vars:
 15: goto 18
     # live vars: $t1, $t2
     # events: e:$t1
 16: label L4
     # live vars: $t2
     # events: e:$t2
 17: m::consume_($t2)
     # live vars:
 18: label L5
     # live vars:
 19: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32 [unused]
     var $t3: u32
     var $t4: bool [unused]
  0: $t3 := copy($t1)
  1: $t3 := move($t3)
  2: if ($t0) goto 3 else goto 6
  3: label L0
  4: m::consume($t3)
  5: goto 8
  6: label L1
  7: m::consume($t1)
  8: label L2
  9: $t0 := !($t0)
 10: if ($t0) goto 11 else goto 14
 11: label L3
 12: m::consume($t1)
 13: goto 16
 14: label L4
 15: m::consume($t3)
 16: label L5
 17: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W [unused]
     var $t3: m::W
     var $t4: bool [unused]
     var $t5: m::W
     var $t6: m::W [unused]
  0: $t3 := copy($t1)
  1: $t3 := move($t3)
  2: if ($t0) goto 3 else goto 7
  3: label L0
  4: $t5 := copy($t3)
  5: m::consume_($t5)
  6: goto 10
  7: label L1
  8: $t5 := copy($t1)
  9: m::consume_($t5)
 10: label L2
 11: $t0 := !($t0)
 12: if ($t0) goto 13 else goto 16
 13: label L3
 14: m::consume_($t1)
 15: goto 18
 16: label L4
 17: m::consume_($t3)
 18: label L5
 19: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct W has copy, drop {
	x: u32
}

consume(Arg0: u32) /* def_idx: 0 */ {
B0:
	0: Ret
}
consume_(Arg0: W) /* def_idx: 1 */ {
B0:
	0: Ret
}
public test(Arg0: bool, Arg1: u32) /* def_idx: 2 */ {
L2:	loc0: u32
B0:
	0: CopyLoc[1](Arg1: u32)
	1: StLoc[2](loc0: u32)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(7)
B1:
	4: CopyLoc[2](loc0: u32)
	5: Call consume(u32)
	6: Branch(9)
B2:
	7: CopyLoc[1](Arg1: u32)
	8: Call consume(u32)
B3:
	9: CopyLoc[0](Arg0: bool)
	10: Not
	11: BrFalse(15)
B4:
	12: MoveLoc[1](Arg1: u32)
	13: Call consume(u32)
	14: Branch(17)
B5:
	15: MoveLoc[2](loc0: u32)
	16: Call consume(u32)
B6:
	17: Ret
}
public test_struct(Arg0: bool, Arg1: W) /* def_idx: 3 */ {
L2:	loc0: W
L3:	loc1: W
B0:
	0: CopyLoc[1](Arg1: W)
	1: StLoc[2](loc0: W)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(9)
B1:
	4: CopyLoc[2](loc0: W)
	5: StLoc[3](loc1: W)
	6: MoveLoc[3](loc1: W)
	7: Call consume_(W)
	8: Branch(13)
B2:
	9: CopyLoc[1](Arg1: W)
	10: StLoc[3](loc1: W)
	11: MoveLoc[3](loc1: W)
	12: Call consume_(W)
B3:
	13: CopyLoc[0](Arg0: bool)
	14: Not
	15: BrFalse(19)
B4:
	16: MoveLoc[1](Arg1: W)
	17: Call consume_(W)
	18: Branch(21)
B5:
	19: MoveLoc[2](loc0: W)
	20: Call consume_(W)
B6:
	21: Ret
}
}
============ bytecode verification succeeded ========
