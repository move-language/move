============ initial bytecode ================

[variant baseline]
fun vector::create(): vector<u64> {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t1 := 1
  1: $t2 := 2
  2: $t3 := 3
  3: $t0 := vector($t1, $t2, $t3)
  4: return $t0
}


[variant baseline]
fun vector::test_fold() {
     var $t0: vector<u64>
     var $t1: vector<u64>
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: vector<u64>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: vector<u64>
     var $t10: &mut vector<u64>
     var $t11: bool
     var $t12: bool
     var $t13: &vector<u64>
     var $t14: u64
     var $t15: u64
     var $t16: &mut vector<u64>
     var $t17: u64
     var $t18: u64
     var $t19: bool
     var $t20: u64
     var $t21: u64
  0: $t2 := 1
  1: $t1 := vector($t2)
  2: $t0 := infer($t1)
  3: $t5 := infer($t0)
  4: $t7 := 0
  5: $t6 := infer($t7)
  6: $t8 := infer($t6)
  7: $t9 := infer($t5)
  8: $t10 := borrow_local($t9)
  9: vector::reverse<u64>($t10)
 10: label L0
 11: $t13 := borrow_local($t9)
 12: $t12 := vector::is_empty<u64>($t13)
 13: $t11 := !($t12)
 14: if ($t11) goto 15 else goto 23
 15: label L2
 16: $t16 := borrow_local($t9)
 17: $t15 := vector::pop_back<u64>($t16)
 18: $t14 := infer($t15)
 19: $t17 := infer($t14)
 20: $t18 := 0
 21: $t8 := infer($t18)
 22: goto 25
 23: label L3
 24: goto 27
 25: label L4
 26: goto 10
 27: label L1
 28: $t4 := infer($t8)
 29: $t3 := infer($t4)
 30: $t20 := 0
 31: $t19 := ==($t3, $t20)
 32: if ($t19) goto 33 else goto 35
 33: label L5
 34: goto 38
 35: label L6
 36: $t21 := 0
 37: abort($t21)
 38: label L7
 39: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun vector::create(): vector<u64> {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: u64
     # live vars:
  0: $t1 := 1
     # live vars: $t1
  1: $t2 := 2
     # live vars: $t1, $t2
  2: $t3 := 3
     # live vars: $t1, $t2, $t3
  3: $t0 := vector($t1, $t2, $t3)
     # live vars: $t0
  4: return $t0
}


[variant baseline]
fun vector::test_fold() {
     var $t0: vector<u64>
     var $t1: vector<u64>
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: vector<u64>
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: vector<u64>
     var $t10: &mut vector<u64>
     var $t11: bool
     var $t12: bool
     var $t13: &vector<u64>
     var $t14: u64
     var $t15: u64
     var $t16: &mut vector<u64>
     var $t17: u64
     var $t18: u64
     var $t19: bool
     var $t20: u64
     var $t21: u64
     # live vars:
  0: $t2 := 1
     # live vars: $t2
  1: $t1 := vector($t2)
     # live vars: $t1
  2: $t0 := move($t1)
     # live vars: $t0
  3: $t5 := move($t0)
     # live vars: $t5
  4: $t7 := 0
     # live vars: $t5, $t7
  5: $t6 := move($t7)
     # live vars: $t5, $t6
  6: $t8 := move($t6)
     # live vars: $t5, $t8
  7: $t9 := move($t5)
     # live vars: $t8, $t9
  8: $t10 := borrow_local($t9)
     # live vars: $t8, $t9, $t10
  9: vector::reverse<u64>($t10)
     # live vars: $t8, $t9
 10: label L0
     # live vars: $t8, $t9
 11: $t13 := borrow_local($t9)
     # live vars: $t8, $t9, $t13
 12: $t12 := vector::is_empty<u64>($t13)
     # live vars: $t8, $t9, $t12
 13: $t11 := !($t12)
     # live vars: $t8, $t9, $t11
 14: if ($t11) goto 15 else goto 23
     # live vars: $t9
 15: label L2
     # live vars: $t9
 16: $t16 := borrow_local($t9)
     # live vars: $t9, $t16
 17: $t15 := vector::pop_back<u64>($t16)
     # live vars: $t9
 18: $t14 := move($t15)
     # live vars: $t9
 19: $t17 := move($t14)
     # live vars: $t9
 20: $t18 := 0
     # live vars: $t9, $t18
 21: $t8 := move($t18)
     # live vars: $t8, $t9
 22: goto 25
     # live vars: $t8
 23: label L3
     # live vars: $t8
 24: goto 27
     # live vars: $t8, $t9
 25: label L4
     # live vars: $t8, $t9
 26: goto 10
     # live vars: $t8
 27: label L1
     # live vars: $t8
 28: $t4 := move($t8)
     # live vars: $t4
 29: $t3 := move($t4)
     # live vars: $t3
 30: $t20 := 0
     # live vars: $t3, $t20
 31: $t19 := ==($t3, $t20)
     # live vars: $t19
 32: if ($t19) goto 33 else goto 35
     # live vars:
 33: label L5
     # live vars:
 34: goto 38
     # live vars:
 35: label L6
     # live vars:
 36: $t21 := 0
     # live vars: $t21
 37: abort($t21)
     # live vars:
 38: label L7
     # live vars:
 39: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.vector {
use 0000000000000000000000000000000000000000000000000000000000000001::vector as 1vector;




create(): vector<u64> {
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: LdU64(3)
	3: VecPack(2, 3)
	4: Ret
}
test_fold() {
L0:	loc0: vector<u64>
L1:	loc1: vector<u64>
L2:	loc2: u64
L3:	loc3: u64
L4:	loc4: vector<u64>
L5:	loc5: u64
L6:	loc6: u64
L7:	loc7: u64
L8:	loc8: u64
L9:	loc9: u64
B0:
	0: LdU64(1)
	1: VecPack(2, 1)
	2: StLoc[0](loc0: vector<u64>)
	3: MoveLoc[0](loc0: vector<u64>)
	4: StLoc[1](loc1: vector<u64>)
	5: LdU64(0)
	6: StLoc[2](loc2: u64)
	7: MoveLoc[2](loc2: u64)
	8: StLoc[3](loc3: u64)
	9: MoveLoc[1](loc1: vector<u64>)
	10: StLoc[4](loc4: vector<u64>)
	11: MutBorrowLoc[4](loc4: vector<u64>)
	12: Call 1vector::reverse<u64>(&mut vector<u64>)
B1:
	13: ImmBorrowLoc[4](loc4: vector<u64>)
	14: Call 1vector::is_empty<u64>(&vector<u64>): bool
	15: Not
	16: BrFalse(25)
B2:
	17: MutBorrowLoc[4](loc4: vector<u64>)
	18: VecPopBack(2)
	19: StLoc[5](loc5: u64)
	20: MoveLoc[5](loc5: u64)
	21: StLoc[6](loc6: u64)
	22: LdU64(0)
	23: StLoc[3](loc3: u64)
	24: Branch(26)
B3:
	25: Branch(27)
B4:
	26: Branch(13)
B5:
	27: MoveLoc[3](loc3: u64)
	28: StLoc[7](loc7: u64)
	29: MoveLoc[7](loc7: u64)
	30: StLoc[8](loc8: u64)
	31: LdU64(0)
	32: StLoc[9](loc9: u64)
	33: MoveLoc[8](loc8: u64)
	34: MoveLoc[9](loc9: u64)
	35: Eq
	36: BrFalse(38)
B6:
	37: Branch(40)
B7:
	38: LdU64(0)
	39: Abort
B8:
	40: Ret
}
}
