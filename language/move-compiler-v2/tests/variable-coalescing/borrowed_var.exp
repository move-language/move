============ initial bytecode ================

[variant baseline]
fun m::test() {
     var $t0: &u64
     var $t1: &u64
     var $t2: u64
     var $t3: &u64
     var $t4: &u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
  0: $t2 := 5
  1: $t1 := borrow_local($t2)
  2: $t0 := infer($t1)
  3: $t3 := infer($t0)
  4: $t5 := 5
  5: $t4 := borrow_local($t5)
  6: $t0 := infer($t4)
  7: $t7 := read_ref($t0)
  8: $t8 := 5
  9: $t6 := ==($t7, $t8)
 10: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::test() {
     var $t0: &u64
     var $t1: &u64
     var $t2: u64
     var $t3: &u64
     var $t4: &u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     # live vars:
  0: $t2 := 5
     # live vars: $t2
  1: $t1 := borrow_local($t2)
     # live vars: $t1
  2: $t0 := infer($t1)
     # live vars: $t0
  3: $t3 := infer($t0)
     # live vars:
  4: $t5 := 5
     # live vars: $t5
  5: $t4 := borrow_local($t5)
     # live vars: $t4
  6: $t0 := infer($t4)
     # live vars: $t0
  7: $t7 := read_ref($t0)
     # live vars: $t7
  8: $t8 := 5
     # live vars: $t7, $t8
  9: $t6 := ==($t7, $t8)
     # live vars:
 10: return ()
}

============ after VariableCoalescing: ================

[variant baseline]
fun m::test() {
     var $t0: &u64 [unused]
     var $t1: &u64
     var $t2: u64
     var $t3: &u64
     var $t4: &u64
     var $t5: u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
  0: $t2 := 5
  1: $t1 := borrow_local($t2)
  2: $t1 := infer($t1)
  3: $t3 := infer($t1)
  4: $t5 := 5
  5: $t4 := borrow_local($t5)
  6: $t1 := infer($t4)
  7: $t7 := read_ref($t1)
  8: $t8 := 5
  9: $t6 := ==($t7, $t8)
 10: return ()
}
