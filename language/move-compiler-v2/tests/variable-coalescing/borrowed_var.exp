============ initial bytecode ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: &u64
     var $t5: &u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
  0: $t1 := 5
  1: $t0 := infer($t1)
  2: $t3 := borrow_local($t0)
  3: $t2 := infer($t3)
  4: $t4 := infer($t2)
  5: $t5 := borrow_local($t0)
  6: $t2 := infer($t5)
  7: $t7 := read_ref($t2)
  8: $t8 := 5
  9: $t6 := ==($t7, $t8)
 10: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: &u64
     var $t5: &u64
     var $t6: bool
     var $t7: u64
     var $t8: u64
     # live vars:
     # events: b:$t1
  0: $t1 := 5
     # live vars: $t1
     # events: e:$t1
  1: $t0 := move($t1)
     # live vars: $t0
     # events: b:$t3
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t3
     # events: e:$t3, b:$t2
  3: $t2 := move($t3)
     # live vars: $t0, $t2
     # events: b:$t4
  4: $t4 := move($t2)
     # live vars: $t0, $t4
     # events: e:$t4
  5: drop($t4)
     # live vars: $t0
     # events: b:$t5
  6: $t5 := borrow_local($t0)
     # live vars: $t5
     # events: e:$t5
  7: $t2 := move($t5)
     # live vars: $t2
     # events: e:$t2, b:$t7
  8: $t7 := read_ref($t2)
     # live vars: $t7
     # events: b:$t8
  9: $t8 := 5
     # live vars: $t7, $t8
     # events: e:$t7, e:$t8
 10: $t6 := ==($t7, $t8)
     # live vars:
 11: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64 [unused]
     var $t3: &u64
     var $t4: &u64
     var $t5: &u64 [unused]
     var $t6: bool
     var $t7: u64 [unused]
     var $t8: u64
  0: $t1 := 5
  1: $t0 := move($t1)
  2: $t3 := borrow_local($t0)
  3: $t3 := move($t3)
  4: $t4 := move($t3)
  5: drop($t4)
  6: $t4 := borrow_local($t0)
  7: $t3 := move($t4)
  8: $t1 := read_ref($t3)
  9: $t8 := 5
 10: $t6 := ==($t1, $t8)
 11: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64 [unused]
     var $t3: &u64
     var $t4: &u64
     var $t5: &u64 [unused]
     var $t6: bool
     var $t7: u64 [unused]
     var $t8: u64
  0: $t1 := 5
  1: $t0 := move($t1)
  2: $t3 := borrow_local($t0)
  3: $t4 := move($t3)
  4: drop($t4)
  5: $t4 := borrow_local($t0)
  6: $t3 := move($t4)
  7: $t1 := read_ref($t3)
  8: $t8 := 5
  9: $t6 := ==($t1, $t8)
 10: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test() /* def_idx: 0 */ {
L0:	loc0: u64
L1:	loc1: &u64
L2:	loc2: &u64
B0:
	0: LdU64(5)
	1: StLoc[0](loc0: u64)
	2: ImmBorrowLoc[0](loc0: u64)
	3: StLoc[1](loc1: &u64)
	4: MoveLoc[1](loc1: &u64)
	5: Pop
	6: ImmBorrowLoc[0](loc0: u64)
	7: StLoc[1](loc1: &u64)
	8: MoveLoc[1](loc1: &u64)
	9: StLoc[2](loc2: &u64)
	10: MoveLoc[2](loc2: &u64)
	11: ReadRef
	12: LdU64(5)
	13: Eq
	14: Pop
	15: Ret
}
}
