// -- Model dump before bytecode pipeline
module 0x8675::M {
    struct S {
        f: u64,
    }
    public fun test(): u64 {
        Add<u64>(M::test1(7), M::test1(2))
    }
    private fun test1(r: u64): u64 {
        {
          let tref: &mut u64 = Borrow(Mutable)(if Lt<u64>(r, 4) {
            r
          } else {
            3
          });
          tref = 10;
          {
            let y: u64 = r;
            {
              let tref2: &mut u64 = Borrow(Mutable)(y);
              tref2 = Add<u64>(Deref(tref2), 1);
              {
                let z: u64 = y;
                {
                  let tref3: &mut u64 = Borrow(Mutable)(Add<u64>(z, 0));
                  tref3 = Add<u64>(Deref(tref3), 2);
                  {
                    let a: u64 = z;
                    {
                      let tref4: &mut u64 = Borrow(Mutable)(a);
                      tref4 = Add<u64>(Deref(tref4), 4);
                      {
                        let tref5: &mut u64 = Borrow(Mutable)(a);
                        tref5 = Add<u64>(Deref(tref5), 8);
                        {
                          let tref6: &mut u64 = Borrow(Mutable)(3;
                          a);
                          tref6 = Add<u64>(Deref(tref6), 16);
                          a
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun test1b(r: M::S): u64 {
        {
          let x: M::S = pack M::S(3);
          {
            let tref: &mut M::S = Borrow(Mutable)(if Lt<u64>(select M::S.f<M::S>(r), 4) {
              r
            } else {
              x
            });
            select M::S.f<M::S>(Deref(tref)) = 10;
            {
              let y: M::S = r;
              {
                let tref2: &mut M::S = Borrow(Mutable)(y);
                select M::S.f<M::S>(Deref(tref2)) = Add<u64>(select M::S.f<M::S>(Deref(tref2)), 1);
                {
                  let z: M::S = y;
                  {
                    let tref3: &mut u64 = Borrow(Mutable)(select M::S.f<M::S>(z));
                    tref3 = Add<u64>(Deref(tref3), 1);
                    {
                      let a: M::S = z;
                      {
                        let tref4: &mut u64 = Borrow(Mutable)(select M::S.f<M::S>(a));
                        tref4 = Add<u64>(Deref(tref4), 1);
                        {
                          let tref5: &mut u64 = Borrow(Mutable)(select M::S.f<M::S>(a));
                          tref5 = Add<u64>(Deref(tref5), 8);
                          {
                            let tref6: &mut u64 = Borrow(Mutable)(3;
                            select M::S.f<M::S>(a));
                            tref6 = Add<u64>(Deref(tref6), 16);
                            select M::S.f<M::S>(a)
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    public fun testb(): u64 {
        Add<u64>(M::test1b(pack M::S(7)), M::test1b(pack M::S(2)))
    }
} // end 0x8675::M

============ initial bytecode ================

[variant baseline]
public fun M::test(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t2 := 7
  1: $t1 := M::test1($t2)
  2: $t4 := 2
  3: $t3 := M::test1($t4)
  4: $t0 := +($t1, $t3)
  5: return $t0
}


[variant baseline]
fun M::test1($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: &mut u64
     var $t10: &mut u64
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: u64
     var $t15: &mut u64
     var $t16: &mut u64
     var $t17: u64
     var $t18: u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: &mut u64
     var $t24: &mut u64
     var $t25: u64
     var $t26: u64
     var $t27: u64
     var $t28: u64
     var $t29: &mut u64
     var $t30: &mut u64
     var $t31: u64
     var $t32: u64
     var $t33: u64
     var $t34: u64
     var $t35: &mut u64
     var $t36: &mut u64
     var $t37: u64
     var $t38: u64
     var $t39: u64
     var $t40: u64
     var $t41: u64
  0: $t6 := 4
  1: $t5 := <($t0, $t6)
  2: if ($t5) goto 3 else goto 6
  3: label L0
  4: $t4 := infer($t0)
  5: goto 8
  6: label L1
  7: $t4 := 3
  8: label L2
  9: $t3 := borrow_local($t4)
 10: $t2 := infer($t3)
 11: $t7 := 10
 12: write_ref($t2, $t7)
 13: $t8 := infer($t0)
 14: $t10 := borrow_local($t8)
 15: $t9 := infer($t10)
 16: $t12 := read_ref($t9)
 17: $t13 := 1
 18: $t11 := +($t12, $t13)
 19: write_ref($t9, $t11)
 20: $t14 := infer($t8)
 21: $t18 := 0
 22: $t17 := +($t14, $t18)
 23: $t16 := borrow_local($t17)
 24: $t15 := infer($t16)
 25: $t20 := read_ref($t15)
 26: $t21 := 2
 27: $t19 := +($t20, $t21)
 28: write_ref($t15, $t19)
 29: $t22 := infer($t14)
 30: $t25 := infer($t22)
 31: $t24 := borrow_local($t25)
 32: $t23 := infer($t24)
 33: $t27 := read_ref($t23)
 34: $t28 := 4
 35: $t26 := +($t27, $t28)
 36: write_ref($t23, $t26)
 37: $t31 := infer($t22)
 38: $t30 := borrow_local($t31)
 39: $t29 := infer($t30)
 40: $t33 := read_ref($t29)
 41: $t34 := 8
 42: $t32 := +($t33, $t34)
 43: write_ref($t29, $t32)
 44: $t38 := 3
 45: $t37 := infer($t22)
 46: $t36 := borrow_local($t37)
 47: $t35 := infer($t36)
 48: $t40 := read_ref($t35)
 49: $t41 := 16
 50: $t39 := +($t40, $t41)
 51: write_ref($t35, $t39)
 52: $t1 := infer($t22)
 53: return $t1
}


[variant baseline]
fun M::test1b($t0: M::S): u64 {
     var $t1: u64
     var $t2: M::S
     var $t3: M::S
     var $t4: u64
     var $t5: &mut M::S
     var $t6: &mut M::S
     var $t7: M::S
     var $t8: bool
     var $t9: u64
     var $t10: &M::S
     var $t11: &u64
     var $t12: u64
     var $t13: u64
     var $t14: &mut u64
     var $t15: M::S
     var $t16: &mut M::S
     var $t17: M::S
     var $t18: &mut M::S
     var $t19: &mut M::S
     var $t20: u64
     var $t21: u64
     var $t22: M::S
     var $t23: &M::S
     var $t24: &u64
     var $t25: u64
     var $t26: &mut u64
     var $t27: M::S
     var $t28: &mut M::S
     var $t29: M::S
     var $t30: &mut u64
     var $t31: &mut u64
     var $t32: &mut M::S
     var $t33: u64
     var $t34: u64
     var $t35: u64
     var $t36: M::S
     var $t37: &mut u64
     var $t38: &mut u64
     var $t39: u64
     var $t40: &M::S
     var $t41: &u64
     var $t42: u64
     var $t43: u64
     var $t44: u64
     var $t45: &mut u64
     var $t46: &mut u64
     var $t47: u64
     var $t48: &M::S
     var $t49: &u64
     var $t50: u64
     var $t51: u64
     var $t52: u64
     var $t53: &mut u64
     var $t54: &mut u64
     var $t55: u64
     var $t56: u64
     var $t57: &M::S
     var $t58: &u64
     var $t59: u64
     var $t60: u64
     var $t61: u64
     var $t62: &M::S
     var $t63: &u64
  0: $t4 := 3
  1: $t3 := pack M::S($t4)
  2: $t2 := infer($t3)
  3: $t10 := borrow_local($t0)
  4: $t11 := borrow_field<M::S>.f($t10)
  5: $t9 := read_ref($t11)
  6: $t12 := 4
  7: $t8 := <($t9, $t12)
  8: if ($t8) goto 9 else goto 12
  9: label L0
 10: $t7 := infer($t0)
 11: goto 14
 12: label L1
 13: $t7 := infer($t2)
 14: label L2
 15: $t6 := borrow_local($t7)
 16: $t5 := infer($t6)
 17: $t13 := 10
 18: $t15 := read_ref($t5)
 19: $t16 := borrow_local($t15)
 20: $t14 := borrow_field<M::S>.f($t16)
 21: write_ref($t14, $t13)
 22: $t17 := infer($t0)
 23: $t19 := borrow_local($t17)
 24: $t18 := infer($t19)
 25: $t22 := read_ref($t18)
 26: $t23 := borrow_local($t22)
 27: $t24 := borrow_field<M::S>.f($t23)
 28: $t21 := read_ref($t24)
 29: $t25 := 1
 30: $t20 := +($t21, $t25)
 31: $t27 := read_ref($t18)
 32: $t28 := borrow_local($t27)
 33: $t26 := borrow_field<M::S>.f($t28)
 34: write_ref($t26, $t20)
 35: $t29 := infer($t17)
 36: $t32 := borrow_local($t29)
 37: $t31 := borrow_field<M::S>.f($t32)
 38: $t30 := infer($t31)
 39: $t34 := read_ref($t30)
 40: $t35 := 1
 41: $t33 := +($t34, $t35)
 42: write_ref($t30, $t33)
 43: $t36 := infer($t29)
 44: $t40 := borrow_local($t36)
 45: $t41 := borrow_field<M::S>.f($t40)
 46: $t39 := read_ref($t41)
 47: $t38 := borrow_local($t39)
 48: $t37 := infer($t38)
 49: $t43 := read_ref($t37)
 50: $t44 := 1
 51: $t42 := +($t43, $t44)
 52: write_ref($t37, $t42)
 53: $t48 := borrow_local($t36)
 54: $t49 := borrow_field<M::S>.f($t48)
 55: $t47 := read_ref($t49)
 56: $t46 := borrow_local($t47)
 57: $t45 := infer($t46)
 58: $t51 := read_ref($t45)
 59: $t52 := 8
 60: $t50 := +($t51, $t52)
 61: write_ref($t45, $t50)
 62: $t56 := 3
 63: $t57 := borrow_local($t36)
 64: $t58 := borrow_field<M::S>.f($t57)
 65: $t55 := read_ref($t58)
 66: $t54 := borrow_local($t55)
 67: $t53 := infer($t54)
 68: $t60 := read_ref($t53)
 69: $t61 := 16
 70: $t59 := +($t60, $t61)
 71: write_ref($t53, $t59)
 72: $t62 := borrow_local($t36)
 73: $t63 := borrow_field<M::S>.f($t62)
 74: $t1 := read_ref($t63)
 75: return $t1
}


[variant baseline]
public fun M::testb(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: M::S
     var $t3: u64
     var $t4: u64
     var $t5: M::S
     var $t6: u64
  0: $t3 := 7
  1: $t2 := pack M::S($t3)
  2: $t1 := M::test1b($t2)
  3: $t6 := 2
  4: $t5 := pack M::S($t6)
  5: $t4 := M::test1b($t5)
  6: $t0 := +($t1, $t4)
  7: return $t0
}
