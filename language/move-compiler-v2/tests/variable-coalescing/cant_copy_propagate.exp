============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64
  0: $t1 := infer($t0)
  1: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t3 := move($t0)
  1: $t2 := infer($t3)
  2: if ($t1) goto 3 else goto 6
  3: label L0
  4: m::consume($t2)
  5: goto 13
  6: label L1
  7: $t4 := 99
  8: $t0 := infer($t4)
  9: $t5 := infer($t2)
 10: $t7 := 1
 11: $t6 := +($t5, $t7)
 12: $t5 := infer($t6)
 13: label L2
 14: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t3 := move($t0)
  1: $t2 := move($t3)
  2: if ($t1) goto 3 else goto 6
  3: label L0
  4: m::consume($t2)
  5: goto 10
  6: label L1
  7: $t5 := move($t2)
  8: $t7 := 1
  9: $t6 := +($t5, $t7)
 10: label L2
 11: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t0, b:$t3
  0: $t3 := move($t0)
     # live vars: $t1, $t3
     # events: e:$t3, b:$t2
  1: $t2 := move($t3)
     # live vars: $t1, $t2
     # events: e:$t1
  2: if ($t1) goto 3 else goto 6
     # live vars: $t2
  3: label L0
     # live vars: $t2
  4: m::consume($t2)
     # live vars:
  5: goto 10
     # live vars: $t2
  6: label L1
     # live vars: $t2
     # events: e:$t2, b:$t5
  7: $t5 := move($t2)
     # live vars: $t5
     # events: b:$t7
  8: $t7 := 1
     # live vars: $t5, $t7
     # events: e:$t5, e:$t6, e:$t7, b:$t6
  9: $t6 := +($t5, $t7)
     # live vars:
 10: label L2
     # live vars:
 11: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: $t0 := move($t0)
  1: $t0 := move($t0)
  2: if ($t1) goto 3 else goto 6
  3: label L0
  4: m::consume($t0)
  5: goto 10
  6: label L1
  7: $t0 := move($t0)
  8: $t7 := 1
  9: $t0 := +($t0, $t7)
 10: label L2
 11: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::consume($t0: u64) {
     var $t1: u64 [unused]
  0: return ()
}


[variant baseline]
fun m::test($t0: u64, $t1: bool) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: u64 [unused]
     var $t5: u64 [unused]
     var $t6: u64 [unused]
     var $t7: u64
  0: if ($t1) goto 1 else goto 4
  1: label L0
  2: m::consume($t0)
  3: goto 7
  4: label L1
  5: $t7 := 1
  6: $t0 := +($t0, $t7)
  7: label L2
  8: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


consume(Arg0: u64) /* def_idx: 0 */ {
B0:
	0: Ret
}
test(Arg0: u64, Arg1: bool) /* def_idx: 1 */ {
L2:	loc0: u64
B0:
	0: MoveLoc[1](Arg1: bool)
	1: BrFalse(5)
B1:
	2: MoveLoc[0](Arg0: u64)
	3: Call consume(u64)
	4: Branch(11)
B2:
	5: LdU64(1)
	6: StLoc[2](loc0: u64)
	7: MoveLoc[0](Arg0: u64)
	8: MoveLoc[2](loc0: u64)
	9: Add
	10: Pop
B3:
	11: Ret
}
}
============ bytecode verification succeeded ========
