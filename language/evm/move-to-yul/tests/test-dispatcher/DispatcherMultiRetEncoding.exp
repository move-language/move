/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x5cfc83ac
                {
                    // test_bytes_string(bytes,uint8[2],string,uint8[2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2, param_3 := abi_decode_tuple_$bytes_uint8_2__string_uint8_2_$_$vec$u8$_vec$u8$_vec$u8$_vec$u8$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_bytes_string(param_0, param_1, param_2, param_3)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_2__bytes$_$vec$u8$_vec$u8$$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x60489524
                {
                    // test_two_strings(string,string)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_string_length_sum(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$string_string$_$vec$u8$_vec$u8$$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1f5db62a
                {
                    // test_string_uint8(string)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$string$_$vec$u8$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_string_uint8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$string_uint8$_$vec$u8$_u8$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xfd03176e
                {
                    // test_u8_array_2_uint64(uint8[2],uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint8_2__uint64$_$vec$u8$_u64$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_u8_array_2_uint_64(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_uint8_2_$_$u8_vec$u8$$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1483ff3b
                {
                    // test_uint64_u8_array_3_uint64(uint64,uint8[3],uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$uint64_uint8_3__uint64$_$u64_vec$u8$_u64$(4, calldatasize())
                    let ret_0, ret_1, ret_2 := A2_M_test_u8_uint_64_array_2(param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_uint8_3__uint8$_$u8_vec$u8$_u8$(memPos, ret_0, ret_1, ret_2)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_bytes_string(str_1, _array_1, _str_2, array_2) -> $result0, $result1 {
                // return ($t3, $t0)
                $result0 := array_2
                $result1 := str_1
            }

            function A2_M_test_string_length_sum(str_1, str_2) -> $result0, $result1 {
                // return ($t1, $t0)
                $result0 := str_2
                $result1 := str_1
            }

            function A2_M_test_string_uint8(v) -> $result0, $result1 {
                let len_str, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::length<u8>($t2)
                $t3 := A1_vector_length$u8$($t2)
                // $t4 := copy($t0)
                $t4 := mload($locals)
                // $t5 := borrow_local($t0)
                $t5 := $MakePtr(false, $locals)
                // $t6 := 1
                $t6 := 1
                // $t7 := -($t3, $t6)
                $t7 := $Sub($t3, $t6)
                // $t8 := vector::borrow<u8>($t5, $t7)
                $t8 := A1_vector_borrow$u8$($t5, $t7)
                // $t9 := read_ref($t8)
                $t9 := $LoadU8($t8)
                // return ($t4, $t9)
                $result0 := $t4
                $result1 := $t9
                $Free($locals, 32)
            }

            function A2_M_test_u8_array_2_uint_64(v, idx) -> $result0, $result1 {
                let $t2, $t3, $t4, $t5
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::borrow<u8>($t2, $t1)
                $t3 := A1_vector_borrow$u8$($t2, idx)
                // $t4 := read_ref($t3)
                $t4 := $LoadU8($t3)
                // $t5 := move($t0)
                $t5 := mload($locals)
                // return ($t4, $t5)
                $result0 := $t4
                $result1 := $t5
                $Free($locals, 32)
            }

            function A2_M_test_u8_uint_64_array_2(idx_1, v, idx_2) -> $result0, $result1, $result2 {
                let $t3, $t4, $t5, $t6, $t7, $t8, $t9
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t3 := borrow_local($t1)
                $t3 := $MakePtr(false, $locals)
                // $t4 := vector::borrow<u8>($t3, $t0)
                $t4 := A1_vector_borrow$u8$($t3, idx_1)
                // $t5 := read_ref($t4)
                $t5 := $LoadU8($t4)
                // $t6 := copy($t1)
                $t6 := mload($locals)
                // $t7 := borrow_local($t1)
                $t7 := $MakePtr(false, $locals)
                // $t8 := vector::borrow<u8>($t7, $t2)
                $t8 := A1_vector_borrow$u8$($t7, idx_2)
                // $t9 := read_ref($t8)
                $t9 := $LoadU8($t8)
                // return ($t5, $t6, $t9)
                $result0 := $t5
                $result1 := $t6
                $result2 := $t9
                $Free($locals, 32)
            }

            function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
            }
            function A1_vector_length$u8$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function abi_encode_tuple_$uint8_uint8_3__uint8$_$u8_vec$u8$_u8$(headStart ,value_0, value_1, value_2) -> tail {
                tail := add(headStart, 160)
                abi_encode_uint8(value_0, add(headStart, 0))
                abi_encode_uint8_3__vec$u8$(value_1, add(headStart, 32))
                abi_encode_uint8(value_2, add(headStart, 128))
            }
            function abi_encode_uint8(value, pos) {
                mstore(pos, cleanup_uint8(value))
            }
            function cleanup_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_encode_uint8_3__vec$u8$(value, pos)  {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 3)) { $Abort(92) }
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 1))
                for { let src := start } lt(src, srcEnd) { src := add(src, 1) }
                {
                    let v := $MemoryLoadU8(src)
                    pos := abi_encode_uint8_with_updated_pos(v, pos)
                }
            }
            function abi_encode_uint8_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint8(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_decode_tuple_$uint64_uint8_3__uint64$_$u64_vec$u8$_u64$(headStart, dataEnd) -> value_0, value_1, value_2 {
                if slt(sub(dataEnd, headStart), 160) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint8_3__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value_2 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_uint8_3__vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 3
                let size := 35
                array := abi_decode_available_length__uint8_3__vec$u8$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_3__vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_decode_uint8(offset, end) -> value {
                value := calldataload(offset)
                validator_uint8(value)
            }
            function validator_uint8(value) {
                if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8_uint8_2_$_$u8_vec$u8$$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 96)
                abi_encode_uint8(value_0, add(headStart, 0))
                abi_encode_uint8_2__vec$u8$(value_1, add(headStart, 32))
            }
            function abi_encode_uint8_2__vec$u8$(value, pos)  {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 1))
                for { let src := start } lt(src, srcEnd) { src := add(src, 1) }
                {
                    let v := $MemoryLoadU8(src)
                    pos := abi_encode_uint8_with_updated_pos(v, pos)
                }
            }
            function abi_decode_tuple_$uint8_2__uint64$_$vec$u8$_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_1 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8_2__vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 34
                array := abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_encode_tuple_$string_uint8$_$vec$u8$_u8$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_string(value_0,  tail)
                abi_encode_uint8(value_1, add(headStart, 32))
            }
            function abi_encode_string(value, pos) -> end{
                let size := $MemoryLoadU64(value)
                mstore(pos, size)
                pos := add(pos, 0x20)
                $CopyMemory(add(value, 0x20), pos, size)
                size := $RoundUp(size)
                end := add(pos, size)
            }
            function abi_decode_tuple_$string$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_string_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__string(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__string(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_encode_tuple_$string_string$_$vec$u8$_vec$u8$$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_string(value_0,  tail)
                mstore(add(headStart, 32), sub(tail, headStart))
                tail := abi_encode_string(value_1,  tail)
            }
            function abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_1 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint8_2__bytes$_$vec$u8$_vec$u8$$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 96)
                abi_encode_uint8_2__vec$u8$(value_0, add(headStart, 0))
                mstore(add(headStart, 64), sub(tail, headStart))
                tail := abi_encode_bytes(value_1,  tail)
            }
            function abi_encode_bytes(value, pos) -> end{
                let size := $MemoryLoadU64(value)
                mstore(pos, size)
                pos := add(pos, 0x20)
                $CopyMemory(add(value, 0x20), pos, size)
                size := $RoundUp(size)
                end := add(pos, size)
            }
            function abi_decode_tuple_$bytes_uint8_2__string_uint8_2_$_$vec$u8$_vec$u8$_vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1, value_2, value_3 {
                if slt(sub(dataEnd, headStart), 192) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_bytes_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 96))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_2 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value_3 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__bytes(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__bytes(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $LoadU8(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU8(offs)
              }
              default {
                val := $StorageLoadU8(offs)
              }
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $StorageLoadU8(offs) -> val {
              val := $StorageLoadBytes(offs, 1)
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $CopyFromCallDataToMemory(src, dst, length) {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
            function $RoundUp(value) -> result {
                result := and(add(value, 31), not(31))
            }
        }
    }
}


!! Succeeded compiling Yul
