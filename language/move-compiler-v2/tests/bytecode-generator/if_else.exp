// ---- Model Dump
module 0x42::if_else {
    private fun if_else(cond: bool,x: u64): u64 {
        if cond {
          Add<u64>(x, 1)
        } else {
          Sub<u64>(x, 1)
        }
    }
    private fun if_else_nested(cond: bool,x: u64): u64 {
        if Gt<u64>(if cond {
          Add<u64>(x, 1)
        } else {
          Sub<u64>(x, 1)
        }, 10) {
          Mul<u64>(x, 2)
        } else {
          Div<u64>(x, 2)
        }
    }
    spec fun $if_else(cond: bool,x: u64): u64 {
        if cond {
          Add(x, 1)
        } else {
          Sub(x, 1)
        }
    }
    spec fun $if_else_nested(cond: bool,x: u64): u64 {
        if Gt(if cond {
          Add(x, 1)
        } else {
          Sub(x, 1)
        }, 10) {
          Mul(x, 2)
        } else {
          Div(x, 2)
        }
    }
} // end 0x42::if_else

============ initial bytecode ================

[variant baseline]
fun if_else::if_else($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: if ($t0) goto 1 else goto 5
  1: label L0
  2: $t3 := 1
  3: $t2 := +($t1, $t3)
  4: goto 8
  5: label L1
  6: $t4 := 1
  7: $t2 := -($t1, $t4)
  8: label L2
  9: return $t2
}


[variant baseline]
fun if_else::if_else_nested($t0: bool, $t1: u64): u64 {
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
  0: if ($t0) goto 1 else goto 5
  1: label L0
  2: $t5 := 1
  3: $t4 := +($t1, $t5)
  4: goto 8
  5: label L1
  6: $t6 := 1
  7: $t4 := -($t1, $t6)
  8: label L2
  9: $t7 := 10
 10: $t3 := >($t4, $t7)
 11: if ($t3) goto 12 else goto 16
 12: label L3
 13: $t8 := 2
 14: $t2 := *($t1, $t8)
 15: goto 19
 16: label L4
 17: $t9 := 2
 18: $t2 := /($t1, $t9)
 19: label L5
 20: return $t2
}
