//# publish
module 0x42.M {
    import 0x1.signer;

    struct R1 has key { f: bool }
    struct R2<T> has key { f: T }

    public store(sender: &signer, f: bool) {
    label b0:
        move_to<R1>(copy(sender), R1 { f: move(f) });
        return;
    }

    public store_gen<T: store>(sender: &signer, t: T) {
    label b0:
        move_to<R2<T>>(copy(sender), R2<T> { f: move(t) });
        return;
    }

    public read(s: &signer): bool acquires R1 {
    label b0:
        return *&(borrow_global<R1>(signer.address_of(move(s)))).R1::f;
    }

    public read_gen<T: copy + drop + store>(s: &signer): T acquires R2 {
    label b0:
        return *&(borrow_global<R2<T>>(signer.address_of(move(s)))).R2<T>::f; // problem is here
    }
}

//# run --signers 0x42
import 0x42.M;
main(sender: signer) {
label b0:
    M.store(&sender, false);
    assert((M.read(&sender) == false), 42);

    M.store_gen<bool>(&sender, true);
    assert((M.read_gen<bool>(&sender) == true), 42);

    M.store_gen<u64>(&sender, 112);
    assert((M.read_gen<u64>(&sender) == 112), 42);

    return;
}

//# run --signers 0xA
import 0x42.M;
main(sender: signer) {
label b0:
    M.store(&sender, false);
    M.store_gen<bool>(&sender, true);
    M.store_gen<u64>(&sender, 112);
    return;
}

//# run --signers 0xA
import 0x42.M;
main(sender: signer) {
label b0:
    assert((M.read(&sender) == false), 42);
    assert((M.read_gen<bool>(&sender) == true), 42);
    assert((M.read_gen<u64>(&sender) == 112), 42);
    return;
}
