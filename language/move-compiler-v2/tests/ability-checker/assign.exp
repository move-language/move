============ initial bytecode ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
  0: $t2 := borrow_field<assign::S>.f($t0)
  1: write_ref($t2, $t1)
  2: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 42
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
  0: ($t1, $t4) := unpack assign::S($t0)
  1: $t2 := unpack assign::T($t4)
  2: $t3 := +($t1, $t2)
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
  0: $t2 := 42
  1: $t4 := 42
  2: $t3 := pack assign::T($t4)
  3: $t1 := pack assign::S($t2, $t3)
  4: write_ref($t0, $t1)
  5: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
  0: $t2 := borrow_field<assign::S>.f($t0)
     # live vars: $t1, $t2
  1: write_ref($t2, $t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
     # live vars: $t0
  0: $t1 := 42
     # live vars: $t0, $t1
  1: write_ref($t0, $t1)
     # live vars:
  2: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
     # live vars: $t0
  0: ($t1, $t4) := unpack assign::S($t0)
     # live vars: $t1, $t4
  1: $t2 := unpack assign::T($t4)
     # live vars: $t1, $t2
  2: $t3 := +($t1, $t2)
     # live vars: $t3
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
     # live vars: $t0
  0: $t2 := 42
     # live vars: $t0, $t2
  1: $t4 := 42
     # live vars: $t0, $t2, $t4
  2: $t3 := pack assign::T($t4)
     # live vars: $t0, $t2, $t3
  3: $t1 := pack assign::S($t2, $t3)
     # live vars: $t0, $t1
  4: write_ref($t0, $t1)
     # live vars:
  5: return ()
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
     # live vars: $t0, $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t2 := borrow_field<assign::S>.f($t0)
     # live vars: $t1, $t2
     # graph: {L0=local($t0)[borrow_field(true) -> L1],L1=local($t2)[]}
     # local_to_label: {$t0=L0,$t2=L1}
     # global_to_label: {}
     # moved: {}
     #
  1: write_ref($t2, $t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t1 := 42
     # live vars: $t0, $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: write_ref($t0, $t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: ($t1, $t4) := unpack assign::S($t0)
     # live vars: $t1, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0}
     #
  1: $t2 := unpack assign::T($t4)
     # live vars: $t1, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0,$t4}
     #
  2: $t3 := +($t1, $t2)
     # live vars: $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0,$t1,$t2,$t4}
     #
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t2 := 42
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t4 := 42
     # live vars: $t0, $t2, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  2: $t3 := pack assign::T($t4)
     # live vars: $t0, $t2, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t4}
     #
  3: $t1 := pack assign::S($t2, $t3)
     # live vars: $t0, $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3,$t4}
     #
  4: write_ref($t0, $t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3,$t4}
     #
  5: return ()
}

============ after ExplicitDrop: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
  0: $t2 := borrow_field<assign::S>.f($t0)
  1: drop($t0)
  2: write_ref($t2, $t1)
  3: drop($t2)
  4: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 42
  1: write_ref($t0, $t1)
  2: drop($t0)
  3: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
  0: ($t1, $t4) := unpack assign::S($t0)
  1: $t2 := unpack assign::T($t4)
  2: $t3 := +($t1, $t2)
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
  0: $t2 := 42
  1: $t4 := 42
  2: $t3 := pack assign::T($t4)
  3: $t1 := pack assign::S($t2, $t3)
  4: write_ref($t0, $t1)
  5: drop($t0)
  6: drop($t1)
  7: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := borrow_field<assign::S>.f($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  2: write_ref($t2, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t2)
     # abort state before: {returns}
     # abort state after : {}
  4: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t1 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  1: write_ref($t0, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  2: drop($t0)
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: ($t1, $t4) := unpack assign::S($t0)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t2 := unpack assign::T($t4)
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  2: $t3 := +($t1, $t2)
     # abort state before: {returns}
     # abort state after : {}
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t4 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t3 := pack assign::T($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t1 := pack assign::S($t2, $t3)
     # abort state before: {returns}
     # abort state after : {returns}
  4: write_ref($t0, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  5: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  6: drop($t1)
     # abort state before: {returns}
     # abort state after : {}
  7: return ()
}


Diagnostics:
error: cannot drop
   ┌─ tests/ability-checker/assign.move:17:9
   │
17 │         *s = S { f: 42, g: T { h: 42 } };
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: write_ref: cannot drop
   ┌─ tests/ability-checker/assign.move:17:9
   │
17 │         *s = S { f: 42, g: T { h: 42 } };
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

============ after AbilityChecker: ================

[variant baseline]
fun assign::assign_field($t0: &mut assign::S, $t1: u64) {
     var $t2: &mut u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := borrow_field<assign::S>.f($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  2: write_ref($t2, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t2)
     # abort state before: {returns}
     # abort state after : {}
  4: return ()
}


[variant baseline]
fun assign::assign_int($t0: &mut u64) {
     var $t1: u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t1 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  1: write_ref($t0, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  2: drop($t0)
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun assign::assign_pattern($t0: assign::S, $t1: u64, $t2: u64): u64 {
     var $t3: u64
     var $t4: assign::T
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: ($t1, $t4) := unpack assign::S($t0)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t2 := unpack assign::T($t4)
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  2: $t3 := +($t1, $t2)
     # abort state before: {returns}
     # abort state after : {}
  3: return $t3
}


[variant baseline]
fun assign::assign_struct($t0: &mut assign::S) {
     var $t1: assign::S
     var $t2: u64
     var $t3: assign::T
     var $t4: u64
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t4 := 42
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t3 := pack assign::T($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t1 := pack assign::S($t2, $t3)
     # abort state before: {returns}
     # abort state after : {returns}
  4: write_ref($t0, $t1)
     # abort state before: {returns}
     # abort state after : {returns}
  5: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  6: drop($t1)
     # abort state before: {returns}
     # abort state after : {}
  7: return ()
}
