// ---- Model Dump
module 0x42::assign {
    public fun main(): (u64, u64) {
        {
          let (a: u64, b: u64) = {
            let (x: u64) = Tuple(3);
            Tuple(1, x)
          };
          Tuple(a, b)
        }
    }
    spec fun $expose(x: u64): (u64, u64) {
        Tuple(1, x)
    }
    spec fun $main(): (u64, u64) {
        {
          let (a: u64, b: u64) = assign::$expose(3);
          Tuple(a, b)
        }
    }
} // end 0x42::assign

============ initial bytecode ================

[variant baseline]
public fun assign::main(): (u64, u64) {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t5 := 3
  1: $t4 := infer($t5)
  2: $t2 := 1
  3: $t3 := infer($t4)
  4: $t0 := infer($t2)
  5: $t1 := infer($t3)
  6: return ($t0, $t1)
}
