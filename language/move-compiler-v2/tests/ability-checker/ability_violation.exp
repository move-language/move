============ initial bytecode ================

[variant baseline]
fun ability::invalid_copy() {
     var $t0: ability::Impotent
     var $t1: ability::Impotent
     var $t2: bool
     var $t3: ability::Impotent
     var $t4: ability::Impotent
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: $t0 := infer($t1)
  3: $t3 := infer($t0)
  4: $t4 := infer($t0)
  5: return ()
}


[variant baseline]
fun ability::invalid_move_to($t0: &signer) {
     var $t1: ability::Impotent
     var $t2: bool
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: move_to<ability::Impotent>($t0, $t1)
  3: return ()
}


[variant baseline]
fun ability::no_key($t0: address) {
     var $t1: ability::Impotent
     var $t2: ability::S<ability::Impotent>
     var $t3: &mut ability::Impotent
     var $t4: &ability::Impotent
     var $t5: bool
  0: $t1 := move_from<ability::Impotent>($t0)
  1: $t2 := move_from<ability::S<ability::Impotent>>($t0)
  2: $t3 := borrow_global<ability::Impotent>($t0)
  3: $t4 := borrow_global<ability::Impotent>($t0)
  4: $t5 := exists<ability::Impotent>($t0)
  5: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun ability::invalid_copy() {
     var $t0: ability::Impotent
     var $t1: ability::Impotent
     var $t2: bool
     var $t3: ability::Impotent
     var $t4: ability::Impotent
     # live vars:
  0: $t2 := false
     # live vars: $t2
  1: $t1 := pack ability::Impotent($t2)
     # live vars: $t1
  2: $t0 := copy($t1)
     # live vars: $t0
  3: $t3 := copy($t0)
     # live vars: $t0
  4: $t4 := copy($t0)
     # live vars:
  5: return ()
}


[variant baseline]
fun ability::invalid_move_to($t0: &signer) {
     var $t1: ability::Impotent
     var $t2: bool
     # live vars: $t0
  0: $t2 := false
     # live vars: $t0, $t2
  1: $t1 := pack ability::Impotent($t2)
     # live vars: $t0, $t1
  2: move_to<ability::Impotent>($t0, $t1)
     # live vars:
  3: return ()
}


[variant baseline]
fun ability::no_key($t0: address) {
     var $t1: ability::Impotent
     var $t2: ability::S<ability::Impotent>
     var $t3: &mut ability::Impotent
     var $t4: &ability::Impotent
     var $t5: bool
     # live vars: $t0
  0: $t1 := move_from<ability::Impotent>($t0)
     # live vars: $t0
  1: $t2 := move_from<ability::S<ability::Impotent>>($t0)
     # live vars: $t0
  2: $t3 := borrow_global<ability::Impotent>($t0)
     # live vars: $t0
  3: $t4 := borrow_global<ability::Impotent>($t0)
     # live vars: $t0
  4: $t5 := exists<ability::Impotent>($t0)
     # live vars:
  5: return ()
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun ability::invalid_copy() {
     var $t0: ability::Impotent
     var $t1: ability::Impotent
     var $t2: bool
     var $t3: ability::Impotent
     var $t4: ability::Impotent
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := false
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t1 := pack ability::Impotent($t2)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t0 := copy($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t3 := copy($t0)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t4 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: return ()
}


[variant baseline]
fun ability::invalid_move_to($t0: &signer) {
     var $t1: ability::Impotent
     var $t2: bool
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := false
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t1 := pack ability::Impotent($t2)
     # live vars: $t0, $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: move_to<ability::Impotent>($t0, $t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: return ()
}


[variant baseline]
fun ability::no_key($t0: address) {
     var $t1: ability::Impotent
     var $t2: ability::S<ability::Impotent>
     var $t3: &mut ability::Impotent
     var $t4: &ability::Impotent
     var $t5: bool
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t1 := move_from<ability::Impotent>($t0)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t2 := move_from<ability::S<ability::Impotent>>($t0)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t3 := borrow_global<ability::Impotent>($t0)
     # live vars: $t0
     # graph: {L512=global<ability::Impotent>[borrow_global(true) -> L513],L513=local($t3)[]}
     # local_to_label: {$t3=L513}
     # global_to_label: {ability::Impotent=L512}
     #
  3: $t4 := borrow_global<ability::Impotent>($t0)
     # live vars: $t0
     # graph: {L768=global<ability::Impotent>[borrow_global(false) -> L769],L769=local($t4)[]}
     # local_to_label: {$t4=L769}
     # global_to_label: {ability::Impotent=L768}
     #
  4: $t5 := exists<ability::Impotent>($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: return ()
}

============ after ExplicitDrop: ================

[variant baseline]
fun ability::invalid_copy() {
     var $t0: ability::Impotent
     var $t1: ability::Impotent
     var $t2: bool
     var $t3: ability::Impotent
     var $t4: ability::Impotent
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: $t0 := copy($t1)
  3: destroy($t1)
  4: $t3 := copy($t0)
  5: destroy($t3)
  6: $t4 := copy($t0)
  7: destroy($t0)
  8: destroy($t4)
  9: return ()
}


[variant baseline]
fun ability::invalid_move_to($t0: &signer) {
     var $t1: ability::Impotent
     var $t2: bool
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: move_to<ability::Impotent>($t0, $t1)
  3: return ()
}


[variant baseline]
fun ability::no_key($t0: address) {
     var $t1: ability::Impotent
     var $t2: ability::S<ability::Impotent>
     var $t3: &mut ability::Impotent
     var $t4: &ability::Impotent
     var $t5: bool
  0: $t1 := move_from<ability::Impotent>($t0)
  1: destroy($t1)
  2: $t2 := move_from<ability::S<ability::Impotent>>($t0)
  3: destroy($t2)
  4: $t3 := borrow_global<ability::Impotent>($t0)
  5: $t4 := borrow_global<ability::Impotent>($t0)
  6: destroy($t3)
  7: $t5 := exists<ability::Impotent>($t0)
  8: destroy($t4)
  9: return ()
}


Diagnostics:
error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:14:3
   │
14 │         move_from<Impotent>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot drop
   ┌─ tests/ability-checker/ability_violation.move:14:3
   │
14 │         move_from<Impotent>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:15:3
   │
15 │         move_from<S<Impotent>>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot drop
   ┌─ tests/ability-checker/ability_violation.move:15:3
   │
15 │         move_from<S<Impotent>>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:16:3
   │
16 │         borrow_global_mut<Impotent>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:17:3
   │
17 │         borrow_global<Impotent>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:18:3
   │
18 │         exists<Impotent>(addr);
   │         ^^^^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/ability_violation.move:22:3
   │
22 │         move_to(signer, Impotent {})
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: cannot copy
   ┌─ tests/ability-checker/ability_violation.move:26:7
   │
26 │         let x = Impotent {};
   │             ^

error: cannot drop
   ┌─ tests/ability-checker/ability_violation.move:26:7
   │
26 │         let x = Impotent {};
   │             ^

error: cannot copy
   ┌─ tests/ability-checker/ability_violation.move:27:4
   │
27 │         (x, x);
   │          ^

error: cannot drop
   ┌─ tests/ability-checker/ability_violation.move:27:4
   │
27 │         (x, x);
   │          ^

error: cannot copy
   ┌─ tests/ability-checker/ability_violation.move:27:7
   │
27 │         (x, x);
   │             ^

error: cannot drop
   ┌─ tests/ability-checker/ability_violation.move:27:7
   │
27 │         (x, x);
   │             ^

============ after AbilityChecker: ================

[variant baseline]
fun ability::invalid_copy() {
     var $t0: ability::Impotent
     var $t1: ability::Impotent
     var $t2: bool
     var $t3: ability::Impotent
     var $t4: ability::Impotent
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: $t0 := copy($t1)
  3: destroy($t1)
  4: $t3 := copy($t0)
  5: destroy($t3)
  6: $t4 := copy($t0)
  7: destroy($t0)
  8: destroy($t4)
  9: return ()
}


[variant baseline]
fun ability::invalid_move_to($t0: &signer) {
     var $t1: ability::Impotent
     var $t2: bool
  0: $t2 := false
  1: $t1 := pack ability::Impotent($t2)
  2: move_to<ability::Impotent>($t0, $t1)
  3: return ()
}


[variant baseline]
fun ability::no_key($t0: address) {
     var $t1: ability::Impotent
     var $t2: ability::S<ability::Impotent>
     var $t3: &mut ability::Impotent
     var $t4: &ability::Impotent
     var $t5: bool
  0: $t1 := move_from<ability::Impotent>($t0)
  1: destroy($t1)
  2: $t2 := move_from<ability::S<ability::Impotent>>($t0)
  3: destroy($t2)
  4: $t3 := borrow_global<ability::Impotent>($t0)
  5: $t4 := borrow_global<ability::Impotent>($t0)
  6: destroy($t3)
  7: $t5 := exists<ability::Impotent>($t0)
  8: destroy($t4)
  9: return ()
}
