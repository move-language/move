============ initial bytecode ================

[variant baseline]
fun m::test_for_each_mut() {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: &mut vector<u64>
     var $t5: bool
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: vector<u64>
     var $t12: u64
  0: $t0 := ["1", "2", "3"]
  1: $t1 := 0
  2: $t3 := borrow_local($t0)
  3: $t2 := vector::length<u64>($t3)
  4: $t4 := borrow_local($t0)
  5: label L0
  6: $t5 := <($t1, $t2)
  7: if ($t5) goto 8 else goto 16
  8: label L2
  9: $t6 := vector::borrow_mut<u64>($t4, $t1)
 10: $t7 := 2
 11: write_ref($t6, $t7)
 12: $t9 := 1
 13: $t8 := +($t1, $t9)
 14: $t1 := infer($t8)
 15: goto 18
 16: label L3
 17: goto 20
 18: label L4
 19: goto 5
 20: label L1
 21: $t11 := ["2", "3", "4"]
 22: $t10 := ==($t0, $t11)
 23: if ($t10) goto 24 else goto 26
 24: label L5
 25: goto 29
 26: label L6
 27: $t12 := 0
 28: abort($t12)
 29: label L7
 30: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::test_for_each_mut() {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: &mut vector<u64>
     var $t5: bool
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: vector<u64>
     var $t12: u64
     # live vars:
  0: $t0 := ["1", "2", "3"]
     # live vars: $t0
  1: $t1 := 0
     # live vars: $t0, $t1
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t1, $t3
  3: $t2 := vector::length<u64>($t3)
     # live vars: $t0, $t1, $t2
  4: $t4 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t4
  5: label L0
     # live vars: $t0, $t1, $t2, $t4
  6: $t5 := <($t1, $t2)
     # live vars: $t0, $t1, $t2, $t4, $t5
  7: if ($t5) goto 8 else goto 16
     # live vars: $t0, $t1, $t2, $t4
  8: label L2
     # live vars: $t0, $t1, $t2, $t4
  9: $t6 := vector::borrow_mut<u64>($t4, $t1)
     # live vars: $t0, $t1, $t2, $t4, $t6
 10: $t7 := 2
     # live vars: $t0, $t1, $t2, $t4, $t6, $t7
 11: write_ref($t6, $t7)
     # live vars: $t0, $t1, $t2, $t4
 12: $t9 := 1
     # live vars: $t0, $t1, $t2, $t4, $t9
 13: $t8 := +($t1, $t9)
     # live vars: $t0, $t2, $t4, $t8
 14: $t1 := infer($t8)
     # live vars: $t0, $t1, $t2, $t4
 15: goto 18
     # live vars: $t0, $t1, $t2, $t4
 16: label L3
     # live vars: $t0
 17: goto 20
     # live vars: $t0, $t1, $t2, $t4
 18: label L4
     # live vars: $t0, $t1, $t2, $t4
 19: goto 5
     # live vars: $t0
 20: label L1
     # live vars: $t0
 21: $t11 := ["2", "3", "4"]
     # live vars: $t0, $t11
 22: $t10 := ==($t0, $t11)
     # live vars: $t10
 23: if ($t10) goto 24 else goto 26
     # live vars:
 24: label L5
     # live vars:
 25: goto 29
     # live vars:
 26: label L6
     # live vars:
 27: $t12 := 0
     # live vars: $t12
 28: abort($t12)
     # live vars:
 29: label L7
     # live vars:
 30: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::test_for_each_mut() {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: &mut vector<u64>
     var $t5: bool
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: vector<u64>
     var $t12: u64
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := ["1", "2", "3"]
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := 0
     # live vars: $t0, $t1
     # graph: {}
     # locals: {}
     # globals: {}
     #
  2: $t3 := borrow_local($t0)
     # live vars: $t0, $t1, $t3
     # graph: {@200=local($t0)[borrow(false) -> @201],@201=derived[]}
     # locals: {$t0=@200,$t3=@201}
     # globals: {}
     #
  3: $t2 := vector::length<u64>($t3)
     # live vars: $t0, $t1, $t2
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
  4: $t4 := borrow_local($t0)
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  5: label L0
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  6: $t5 := <($t1, $t2)
     # live vars: $t0, $t1, $t2, $t4, $t5
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  7: if ($t5) goto 8 else goto 16
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  8: label L2
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  9: $t6 := vector::borrow_mut<u64>($t4, $t1)
     # live vars: $t0, $t1, $t2, $t4, $t6
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[call(true, 9) -> @900],@900=derived[]}
     # locals: {$t0=@200,$t4=@401,$t6=@900}
     # globals: {}
     # derived-from: @900=$t4
     #
 10: $t7 := 2
     # live vars: $t0, $t1, $t2, $t4, $t6, $t7
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[call(true, 9) -> @900],@900=derived[]}
     # locals: {$t0=@200,$t4=@401,$t6=@900}
     # globals: {}
     # derived-from: @900=$t4
     #
 11: write_ref($t6, $t7)
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 12: $t9 := 1
     # live vars: $t0, $t1, $t2, $t4, $t9
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 13: $t8 := +($t1, $t9)
     # live vars: $t0, $t2, $t4, $t8
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 14: $t1 := infer($t8)
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 15: goto 18
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 16: label L3
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 17: goto 20
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 18: label L4
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 19: goto 5
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 20: label L1
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 21: $t11 := ["2", "3", "4"]
     # live vars: $t0, $t11
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 22: $t10 := ==($t0, $t11)
     # live vars: $t10
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 23: if ($t10) goto 24 else goto 26
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 24: label L5
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 25: goto 29
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 26: label L6
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 27: $t12 := 0
     # live vars: $t12
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 28: abort($t12)
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 29: label L7
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 30: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::test_for_each_mut() {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: &mut vector<u64>
     var $t5: bool
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: vector<u64>
     var $t12: u64
     # abort state: {returns,aborts}
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := ["1", "2", "3"]
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := 0
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {}
     # locals: {}
     # globals: {}
     #
  2: $t3 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t3
     # graph: {@200=local($t0)[borrow(false) -> @201],@201=derived[]}
     # locals: {$t0=@200,$t3=@201}
     # globals: {}
     #
  3: $t2 := vector::length<u64>($t3)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
  4: $t4 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  5: label L0
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  6: $t5 := <($t1, $t2)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4, $t5
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  7: if ($t5) goto 8 else goto 16
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  8: label L2
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
  9: $t6 := vector::borrow_mut<u64>($t4, $t1)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4, $t6
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[call(true, 9) -> @900],@900=derived[]}
     # locals: {$t0=@200,$t4=@401,$t6=@900}
     # globals: {}
     # derived-from: @900=$t4
     #
 10: $t7 := 2
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4, $t6, $t7
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[call(true, 9) -> @900],@900=derived[]}
     # locals: {$t0=@200,$t4=@401,$t6=@900}
     # globals: {}
     # derived-from: @900=$t4
     #
 11: write_ref($t6, $t7)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 12: $t9 := 1
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4, $t9
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 13: $t8 := +($t1, $t9)
     # abort state: {returns,aborts}
     # live vars: $t0, $t2, $t4, $t8
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 14: $t1 := infer($t8)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 15: goto 18
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 16: label L3
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 17: goto 20
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 18: label L4
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2, $t4
     # graph: {@200=local($t0)[borrow(true) -> @401],@401=derived[]}
     # locals: {$t0=@200,$t4=@401}
     # globals: {}
     #
 19: goto 5
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 20: label L1
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 21: $t11 := ["2", "3", "4"]
     # abort state: {returns,aborts}
     # live vars: $t0, $t11
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 22: $t10 := ==($t0, $t11)
     # abort state: {returns,aborts}
     # live vars: $t10
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 23: if ($t10) goto 24 else goto 26
     # abort state: {returns}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 24: label L5
     # abort state: {returns}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 25: goto 29
     # abort state: {aborts}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 26: label L6
     # abort state: {aborts}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 27: $t12 := 0
     # abort state: {aborts}
     # live vars: $t12
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 28: abort($t12)
     # abort state: {returns}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 29: label L7
     # abort state: {returns}
     # live vars:
     # graph: {@200=local($t0)[]}
     # locals: {$t0=@200}
     # globals: {}
     #
 30: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::test_for_each_mut() {
     var $t0: vector<u64>
     var $t1: u64
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: &mut vector<u64>
     var $t5: bool
     var $t6: &mut u64
     var $t7: u64
     var $t8: u64
     var $t9: u64
     var $t10: bool
     var $t11: vector<u64>
     var $t12: u64
     var $t13: &mut vector<u64>
  0: $t0 := ["1", "2", "3"]
  1: $t1 := 0
  2: $t3 := borrow_local($t0)
  3: $t2 := vector::length<u64>($t3)
  4: $t4 := borrow_local($t0)
  5: label L0
  6: $t5 := <($t1, $t2)
  7: if ($t5) goto 8 else goto 17
  8: label L2
  9: $t13 := copy($t4)
 10: $t6 := vector::borrow_mut<u64>($t13, $t1)
 11: $t7 := 2
 12: write_ref($t6, $t7)
 13: $t9 := 1
 14: $t8 := +($t1, $t9)
 15: $t1 := move($t8)
 16: goto 20
 17: label L3
 18: drop($t4)
 19: goto 22
 20: label L4
 21: goto 5
 22: label L1
 23: $t11 := ["2", "3", "4"]
 24: $t10 := ==($t0, $t11)
 25: if ($t10) goto 26 else goto 28
 26: label L5
 27: goto 31
 28: label L6
 29: $t12 := 0
 30: abort($t12)
 31: label L7
 32: return ()
}
