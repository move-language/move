processed 5 tasks

task 0 'publish'. lines 1-91:



>>> V1 Compiler {
== BEGIN Bytecode ==
// Move bytecode v6
module cafe.vectors {


entry public guess_flips(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: ImmBorrowLoc[0](Arg0: vector<u8>)
	1: StLoc[1](loc0: &vector<u8>)
	2: LdU64(0)
	3: StLoc[2](loc1: u64)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(4)
	7: Lt
	8: BrFalse(30)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(4)
	13: ReadRef
	14: LdU8(0)
	15: Neq
	16: BrFalse(20)
B4:
	17: MoveLoc[1](loc0: &vector<u8>)
	18: Pop
	19: Branch(25)
B5:
	20: MoveLoc[2](loc1: u64)
	21: LdU64(1)
	22: Add
	23: StLoc[2](loc1: u64)
	24: Branch(4)
B6:
	25: CopyLoc[0](Arg0: vector<u8>)
	26: Pop
	27: MoveLoc[0](Arg0: vector<u8>)
	28: Pop
	29: Ret
B7:
	30: MoveLoc[1](loc0: &vector<u8>)
	31: Pop
	32: Branch(25)
}
entry public guess_flips_directly(Arg0: vector<u8>) {
B0:
	0: LdU64(0)
	1: StLoc[1](loc0: u64)
B1:
	2: CopyLoc[1](loc0: u64)
	3: ImmBorrowLoc[0](Arg0: vector<u8>)
	4: VecLen(4)
	5: Lt
	6: BrFalse(26)
B2:
	7: Branch(8)
B3:
	8: ImmBorrowLoc[0](Arg0: vector<u8>)
	9: CopyLoc[1](loc0: u64)
	10: VecImmBorrow(4)
	11: ReadRef
	12: LdU8(0)
	13: Neq
	14: BrFalse(16)
B4:
	15: Branch(21)
B5:
	16: MoveLoc[1](loc0: u64)
	17: LdU64(1)
	18: Add
	19: StLoc[1](loc0: u64)
	20: Branch(2)
B6:
	21: CopyLoc[0](Arg0: vector<u8>)
	22: Pop
	23: MoveLoc[0](Arg0: vector<u8>)
	24: Pop
	25: Ret
B7:
	26: Branch(21)
}
entry public guess_with_break_without_inline(Arg0: vector<u8>) {
B0:
	0: ImmBorrowLoc[0](Arg0: vector<u8>)
	1: Call loops_with_break_no_inline(&vector<u8>)
	2: CopyLoc[0](Arg0: vector<u8>)
	3: Pop
	4: MoveLoc[0](Arg0: vector<u8>)
	5: Pop
	6: Ret
}
entry public guess_without_break_with_inline(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: ImmBorrowLoc[0](Arg0: vector<u8>)
	1: StLoc[1](loc0: &vector<u8>)
	2: LdU64(0)
	3: StLoc[2](loc1: u64)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(4)
	7: Lt
	8: BrFalse(27)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(4)
	13: ReadRef
	14: LdU8(0)
	15: Eq
	16: BrFalse(18)
B4:
	17: Branch(22)
B5:
	18: MoveLoc[1](loc0: &vector<u8>)
	19: Pop
	20: LdU64(3)
	21: Abort
B6:
	22: MoveLoc[2](loc1: u64)
	23: LdU64(1)
	24: Add
	25: StLoc[2](loc1: u64)
	26: Branch(4)
B7:
	27: MoveLoc[1](loc0: &vector<u8>)
	28: Pop
	29: CopyLoc[0](Arg0: vector<u8>)
	30: Pop
	31: CopyLoc[0](Arg0: vector<u8>)
	32: Pop
	33: Ret
}
loops_with_break_no_inline(Arg0: &vector<u8>) {
B0:
	0: LdU64(0)
	1: StLoc[1](loc0: u64)
B1:
	2: CopyLoc[1](loc0: u64)
	3: CopyLoc[0](Arg0: &vector<u8>)
	4: VecLen(4)
	5: Lt
	6: BrFalse(24)
B2:
	7: Branch(8)
B3:
	8: CopyLoc[0](Arg0: &vector<u8>)
	9: CopyLoc[1](loc0: u64)
	10: VecImmBorrow(4)
	11: ReadRef
	12: LdU8(0)
	13: Neq
	14: BrFalse(18)
B4:
	15: MoveLoc[0](Arg0: &vector<u8>)
	16: Pop
	17: Branch(23)
B5:
	18: MoveLoc[1](loc0: u64)
	19: LdU64(1)
	20: Add
	21: StLoc[1](loc0: u64)
	22: Branch(2)
B6:
	23: Ret
B7:
	24: MoveLoc[0](Arg0: &vector<u8>)
	25: Pop
	26: Branch(23)
}
test_guess_directly() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_directly(vector<u8>)
	2: Ret
}
test_guess_with_break_no_inline() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_with_break_without_inline(vector<u8>)
	2: Ret
}
test_guess_with_inline_break() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips(vector<u8>)
	2: Ret
}
test_guess_without_break() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_without_break_with_inline(vector<u8>)
	2: Ret
}
}
== END Bytecode ==
}
