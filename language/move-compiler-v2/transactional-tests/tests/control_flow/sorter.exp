processed 2 tasks

task 0 'publish'. lines 1-65:



==> Compiler v2 delivered same results!

>>> V1 Compiler {
== BEGIN Bytecode ==
// Move bytecode v6
module 42.heap {


array_equals(Arg0: &vector<u64>, Arg1: &vector<u64>): bool {
L0:	loc2: u64
B0:
	0: CopyLoc[0](Arg0: &vector<u64>)
	1: VecLen(7)
	2: StLoc[3](loc1: u64)
	3: CopyLoc[1](Arg1: &vector<u64>)
	4: VecLen(7)
	5: StLoc[4](loc2: u64)
	6: CopyLoc[3](loc1: u64)
	7: MoveLoc[4](loc2: u64)
	8: Neq
	9: BrFalse(16)
B1:
	10: MoveLoc[1](Arg1: &vector<u64>)
	11: Pop
	12: MoveLoc[0](Arg0: &vector<u64>)
	13: Pop
	14: LdFalse
	15: Ret
B2:
	16: LdU64(0)
	17: StLoc[2](loc0: u64)
B3:
	18: CopyLoc[2](loc0: u64)
	19: CopyLoc[3](loc1: u64)
	20: Lt
	21: BrFalse(44)
B4:
	22: Branch(23)
B5:
	23: CopyLoc[0](Arg0: &vector<u64>)
	24: CopyLoc[2](loc0: u64)
	25: VecImmBorrow(7)
	26: ReadRef
	27: CopyLoc[1](Arg1: &vector<u64>)
	28: CopyLoc[2](loc0: u64)
	29: VecImmBorrow(7)
	30: ReadRef
	31: Neq
	32: BrFalse(39)
B6:
	33: MoveLoc[1](Arg1: &vector<u64>)
	34: Pop
	35: MoveLoc[0](Arg0: &vector<u64>)
	36: Pop
	37: LdFalse
	38: Ret
B7:
	39: MoveLoc[2](loc0: u64)
	40: LdU64(1)
	41: Add
	42: StLoc[2](loc0: u64)
	43: Branch(18)
B8:
	44: MoveLoc[1](Arg1: &vector<u64>)
	45: Pop
	46: MoveLoc[0](Arg0: &vector<u64>)
	47: Pop
	48: LdTrue
	49: Ret
}
create1(): vector<u64> {
B0:
	0: LdConst[0](Vector(U64): [6, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0])
	1: Ret
}
create2(): vector<u64> {
B0:
	0: LdConst[1](Vector(U64): [6, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0])
	1: Ret
}
public main() {
L0:	loc0: vector<u64>
L1:	loc1: vector<u64>
L2:	loc2: vector<u64>
B0:
	0: Call create1(): vector<u64>
	1: StLoc[0](loc0: vector<u64>)
	2: Call create2(): vector<u64>
	3: StLoc[1](loc1: vector<u64>)
	4: ImmBorrowLoc[0](loc0: vector<u64>)
	5: Call vcopy(&vector<u64>): vector<u64>
	6: StLoc[2](loc2: vector<u64>)
	7: ImmBorrowLoc[0](loc0: vector<u64>)
	8: ImmBorrowLoc[2](loc2: vector<u64>)
	9: Call array_equals(&vector<u64>, &vector<u64>): bool
	10: BrFalse(12)
B1:
	11: Branch(14)
B2:
	12: LdU64(23)
	13: Abort
B3:
	14: ImmBorrowLoc[1](loc1: vector<u64>)
	15: ImmBorrowLoc[1](loc1: vector<u64>)
	16: Call array_equals(&vector<u64>, &vector<u64>): bool
	17: BrFalse(19)
B4:
	18: Branch(21)
B5:
	19: LdU64(29)
	20: Abort
B6:
	21: MutBorrowLoc[0](loc0: vector<u64>)
	22: Call sort(&mut vector<u64>)
	23: ImmBorrowLoc[1](loc1: vector<u64>)
	24: ImmBorrowLoc[0](loc0: vector<u64>)
	25: Call array_equals(&vector<u64>, &vector<u64>): bool
	26: BrFalse(28)
B7:
	27: Branch(30)
B8:
	28: LdU64(31)
	29: Abort
B9:
	30: ImmBorrowLoc[0](loc0: vector<u64>)
	31: ImmBorrowLoc[1](loc1: vector<u64>)
	32: Call array_equals(&vector<u64>, &vector<u64>): bool
	33: BrFalse(35)
B10:
	34: Branch(37)
B11:
	35: LdU64(29)
	36: Abort
B12:
	37: ImmBorrowLoc[0](loc0: vector<u64>)
	38: ImmBorrowLoc[2](loc2: vector<u64>)
	39: Call array_equals(&vector<u64>, &vector<u64>): bool
	40: Not
	41: BrFalse(43)
B13:
	42: Branch(45)
B14:
	43: LdU64(31)
	44: Abort
B15:
	45: Ret
}
sort(Arg0: &mut vector<u64>) {
L0:	loc1: u64
L1:	loc2: &mut vector<u64>
L2:	loc3: u64
L3:	loc4: u64
L4:	loc5: u64
B0:
	0: LdU64(0)
	1: StLoc[5](loc4: u64)
B1:
	2: CopyLoc[5](loc4: u64)
	3: CopyLoc[0](Arg0: &mut vector<u64>)
	4: FreezeRef
	5: VecLen(7)
	6: Lt
	7: BrFalse(54)
B2:
	8: Branch(9)
B3:
	9: CopyLoc[5](loc4: u64)
	10: LdU64(1)
	11: Add
	12: StLoc[6](loc5: u64)
B4:
	13: CopyLoc[6](loc5: u64)
	14: CopyLoc[0](Arg0: &mut vector<u64>)
	15: FreezeRef
	16: VecLen(7)
	17: Lt
	18: BrFalse(49)
B5:
	19: Branch(20)
B6:
	20: CopyLoc[0](Arg0: &mut vector<u64>)
	21: CopyLoc[5](loc4: u64)
	22: StLoc[2](loc1: u64)
	23: StLoc[1](loc0: &mut vector<u64>)
	24: CopyLoc[0](Arg0: &mut vector<u64>)
	25: CopyLoc[6](loc5: u64)
	26: StLoc[4](loc3: u64)
	27: StLoc[3](loc2: &mut vector<u64>)
	28: MoveLoc[1](loc0: &mut vector<u64>)
	29: FreezeRef
	30: MoveLoc[2](loc1: u64)
	31: VecImmBorrow(7)
	32: ReadRef
	33: MoveLoc[3](loc2: &mut vector<u64>)
	34: FreezeRef
	35: MoveLoc[4](loc3: u64)
	36: VecImmBorrow(7)
	37: ReadRef
	38: Gt
	39: BrFalse(44)
B7:
	40: CopyLoc[0](Arg0: &mut vector<u64>)
	41: CopyLoc[5](loc4: u64)
	42: CopyLoc[6](loc5: u64)
	43: VecSwap(7)
B8:
	44: MoveLoc[6](loc5: u64)
	45: LdU64(1)
	46: Add
	47: StLoc[6](loc5: u64)
	48: Branch(13)
B9:
	49: MoveLoc[5](loc4: u64)
	50: LdU64(1)
	51: Add
	52: StLoc[5](loc4: u64)
	53: Branch(2)
B10:
	54: MoveLoc[0](Arg0: &mut vector<u64>)
	55: Pop
	56: Ret
}
vcopy(Arg0: &vector<u64>): vector<u64> {
L0:	loc1: u64
L1:	loc2: vector<u64>
B0:
	0: VecPack(7, 0)
	1: StLoc[3](loc2: vector<u64>)
	2: LdU64(0)
	3: StLoc[1](loc0: u64)
	4: CopyLoc[0](Arg0: &vector<u64>)
	5: VecLen(7)
	6: StLoc[2](loc1: u64)
B1:
	7: CopyLoc[1](loc0: u64)
	8: CopyLoc[2](loc1: u64)
	9: Lt
	10: BrFalse(23)
B2:
	11: Branch(12)
B3:
	12: MutBorrowLoc[3](loc2: vector<u64>)
	13: CopyLoc[0](Arg0: &vector<u64>)
	14: CopyLoc[1](loc0: u64)
	15: VecImmBorrow(7)
	16: ReadRef
	17: VecPushBack(7)
	18: MoveLoc[1](loc0: u64)
	19: LdU64(1)
	20: Add
	21: StLoc[1](loc0: u64)
	22: Branch(7)
B4:
	23: MoveLoc[0](Arg0: &vector<u64>)
	24: Pop
	25: MoveLoc[3](loc2: vector<u64>)
	26: Ret
}
}
== END Bytecode ==

task 1 'run'. lines 67-73:

== BEGIN Bytecode ==
// Move bytecode v6
script {
use 0000000000000000000000000000000000000000000000000000000000000042::heap;




main() {
B0:
	0: Call heap::main()
	1: Ret
}
}
== END Bytecode ==
}

>>> V2 Compiler {
== BEGIN Bytecode ==
// Move bytecode v7
module 42.heap {


array_equals(Arg0: &vector<u64>, Arg1: &vector<u64>): bool {
L0:	loc2: &vector<u64>
L1:	loc3: u64
L2:	loc4: u64
L3:	loc5: &vector<u64>
L4:	loc6: &vector<u64>
L5:	loc7: u64
B0:
	0: CopyLoc[0](Arg0: &vector<u64>)
	1: StLoc[2](loc0: &vector<u64>)
	2: MoveLoc[2](loc0: &vector<u64>)
	3: VecLen(2)
	4: StLoc[3](loc1: u64)
	5: CopyLoc[1](Arg1: &vector<u64>)
	6: StLoc[4](loc2: &vector<u64>)
	7: MoveLoc[4](loc2: &vector<u64>)
	8: VecLen(2)
	9: StLoc[5](loc3: u64)
	10: CopyLoc[3](loc1: u64)
	11: MoveLoc[5](loc3: u64)
	12: Neq
	13: BrFalse(17)
B1:
	14: LdFalse
	15: Ret
B2:
	16: Branch(17)
B3:
	17: LdU64(0)
	18: StLoc[6](loc4: u64)
B4:
	19: CopyLoc[6](loc4: u64)
	20: CopyLoc[3](loc1: u64)
	21: Lt
	22: BrFalse(47)
B5:
	23: CopyLoc[0](Arg0: &vector<u64>)
	24: StLoc[7](loc5: &vector<u64>)
	25: MoveLoc[7](loc5: &vector<u64>)
	26: CopyLoc[6](loc4: u64)
	27: VecImmBorrow(2)
	28: ReadRef
	29: CopyLoc[1](Arg1: &vector<u64>)
	30: StLoc[8](loc6: &vector<u64>)
	31: MoveLoc[8](loc6: &vector<u64>)
	32: CopyLoc[6](loc4: u64)
	33: VecImmBorrow(2)
	34: ReadRef
	35: Neq
	36: BrFalse(40)
B6:
	37: LdFalse
	38: Ret
B7:
	39: Branch(40)
B8:
	40: LdU64(1)
	41: StLoc[9](loc7: u64)
	42: MoveLoc[6](loc4: u64)
	43: MoveLoc[9](loc7: u64)
	44: Add
	45: StLoc[6](loc4: u64)
	46: Branch(48)
B9:
	47: Branch(49)
B10:
	48: Branch(19)
B11:
	49: LdTrue
	50: Ret
}
create1(): vector<u64> {
B0:
	0: LdU64(3)
	1: LdU64(2)
	2: LdU64(1)
	3: LdU64(5)
	4: LdU64(8)
	5: LdU64(4)
	6: VecPack(2, 6)
	7: Ret
}
create2(): vector<u64> {
B0:
	0: LdU64(1)
	1: LdU64(2)
	2: LdU64(3)
	3: LdU64(4)
	4: LdU64(5)
	5: LdU64(8)
	6: VecPack(2, 6)
	7: Ret
}
public main() {
L0:	loc0: vector<u64>
L1:	loc1: vector<u64>
L2:	loc2: vector<u64>
B0:
	0: Call create1(): vector<u64>
	1: StLoc[0](loc0: vector<u64>)
	2: Call create2(): vector<u64>
	3: StLoc[1](loc1: vector<u64>)
	4: ImmBorrowLoc[0](loc0: vector<u64>)
	5: Call vcopy(&vector<u64>): vector<u64>
	6: StLoc[2](loc2: vector<u64>)
	7: ImmBorrowLoc[0](loc0: vector<u64>)
	8: ImmBorrowLoc[2](loc2: vector<u64>)
	9: Call array_equals(&vector<u64>, &vector<u64>): bool
	10: BrFalse(12)
B1:
	11: Branch(14)
B2:
	12: LdU64(23)
	13: Abort
B3:
	14: ImmBorrowLoc[1](loc1: vector<u64>)
	15: ImmBorrowLoc[1](loc1: vector<u64>)
	16: Call array_equals(&vector<u64>, &vector<u64>): bool
	17: BrFalse(19)
B4:
	18: Branch(21)
B5:
	19: LdU64(29)
	20: Abort
B6:
	21: MutBorrowLoc[0](loc0: vector<u64>)
	22: Call sort(&mut vector<u64>)
	23: ImmBorrowLoc[1](loc1: vector<u64>)
	24: ImmBorrowLoc[0](loc0: vector<u64>)
	25: Call array_equals(&vector<u64>, &vector<u64>): bool
	26: BrFalse(28)
B7:
	27: Branch(30)
B8:
	28: LdU64(31)
	29: Abort
B9:
	30: ImmBorrowLoc[0](loc0: vector<u64>)
	31: ImmBorrowLoc[1](loc1: vector<u64>)
	32: Call array_equals(&vector<u64>, &vector<u64>): bool
	33: BrFalse(35)
B10:
	34: Branch(37)
B11:
	35: LdU64(29)
	36: Abort
B12:
	37: ImmBorrowLoc[0](loc0: vector<u64>)
	38: ImmBorrowLoc[2](loc2: vector<u64>)
	39: Call array_equals(&vector<u64>, &vector<u64>): bool
	40: Not
	41: BrFalse(43)
B13:
	42: Branch(45)
B14:
	43: LdU64(31)
	44: Abort
B15:
	45: Ret
}
sort(Arg0: &mut vector<u64>) {
L0:	loc1: &mut vector<u64>
L1:	loc2: u64
L2:	loc3: u64
L3:	loc4: u64
L4:	loc5: &mut vector<u64>
L5:	loc6: u64
L6:	loc7: &mut vector<u64>
L7:	loc8: &mut vector<u64>
L8:	loc9: &mut vector<u64>
L9:	loc10: u64
L10:	loc11: u64
B0:
	0: LdU64(0)
	1: StLoc[1](loc0: u64)
B1:
	2: CopyLoc[0](Arg0: &mut vector<u64>)
	3: StLoc[2](loc1: &mut vector<u64>)
	4: MoveLoc[2](loc1: &mut vector<u64>)
	5: FreezeRef
	6: VecLen(2)
	7: StLoc[3](loc2: u64)
	8: CopyLoc[1](loc0: u64)
	9: MoveLoc[3](loc2: u64)
	10: Lt
	11: BrFalse(67)
B2:
	12: LdU64(1)
	13: StLoc[4](loc3: u64)
	14: CopyLoc[1](loc0: u64)
	15: MoveLoc[4](loc3: u64)
	16: Add
	17: StLoc[5](loc4: u64)
B3:
	18: CopyLoc[0](Arg0: &mut vector<u64>)
	19: StLoc[6](loc5: &mut vector<u64>)
	20: MoveLoc[6](loc5: &mut vector<u64>)
	21: FreezeRef
	22: VecLen(2)
	23: StLoc[7](loc6: u64)
	24: CopyLoc[5](loc4: u64)
	25: MoveLoc[7](loc6: u64)
	26: Lt
	27: BrFalse(58)
B4:
	28: CopyLoc[0](Arg0: &mut vector<u64>)
	29: StLoc[8](loc7: &mut vector<u64>)
	30: MoveLoc[8](loc7: &mut vector<u64>)
	31: FreezeRef
	32: CopyLoc[1](loc0: u64)
	33: VecImmBorrow(2)
	34: ReadRef
	35: CopyLoc[0](Arg0: &mut vector<u64>)
	36: StLoc[9](loc8: &mut vector<u64>)
	37: MoveLoc[9](loc8: &mut vector<u64>)
	38: FreezeRef
	39: CopyLoc[5](loc4: u64)
	40: VecImmBorrow(2)
	41: ReadRef
	42: Gt
	43: BrFalse(51)
B5:
	44: CopyLoc[0](Arg0: &mut vector<u64>)
	45: StLoc[10](loc9: &mut vector<u64>)
	46: MoveLoc[10](loc9: &mut vector<u64>)
	47: CopyLoc[1](loc0: u64)
	48: CopyLoc[5](loc4: u64)
	49: VecSwap(2)
	50: Branch(51)
B6:
	51: LdU64(1)
	52: StLoc[11](loc10: u64)
	53: MoveLoc[5](loc4: u64)
	54: MoveLoc[11](loc10: u64)
	55: Add
	56: StLoc[5](loc4: u64)
	57: Branch(59)
B7:
	58: Branch(60)
B8:
	59: Branch(18)
B9:
	60: LdU64(1)
	61: StLoc[12](loc11: u64)
	62: MoveLoc[1](loc0: u64)
	63: MoveLoc[12](loc11: u64)
	64: Add
	65: StLoc[1](loc0: u64)
	66: Branch(68)
B10:
	67: Branch(69)
B11:
	68: Branch(2)
B12:
	69: Ret
}
vcopy(Arg0: &vector<u64>): vector<u64> {
L0:	loc1: u64
L1:	loc2: &vector<u64>
L2:	loc3: u64
L3:	loc4: &vector<u64>
L4:	loc5: u64
L5:	loc6: vector<u64>
B0:
	0: VecPack(2, 0)
	1: StLoc[1](loc0: vector<u64>)
	2: LdU64(0)
	3: StLoc[2](loc1: u64)
	4: CopyLoc[0](Arg0: &vector<u64>)
	5: StLoc[3](loc2: &vector<u64>)
	6: MoveLoc[3](loc2: &vector<u64>)
	7: VecLen(2)
	8: StLoc[4](loc3: u64)
B1:
	9: CopyLoc[2](loc1: u64)
	10: CopyLoc[4](loc3: u64)
	11: Lt
	12: BrFalse(28)
B2:
	13: MutBorrowLoc[1](loc0: vector<u64>)
	14: CopyLoc[0](Arg0: &vector<u64>)
	15: StLoc[5](loc4: &vector<u64>)
	16: MoveLoc[5](loc4: &vector<u64>)
	17: CopyLoc[2](loc1: u64)
	18: VecImmBorrow(2)
	19: ReadRef
	20: VecPushBack(2)
	21: LdU64(1)
	22: StLoc[6](loc5: u64)
	23: MoveLoc[2](loc1: u64)
	24: MoveLoc[6](loc5: u64)
	25: Add
	26: StLoc[2](loc1: u64)
	27: Branch(29)
B3:
	28: Branch(30)
B4:
	29: Branch(9)
B5:
	30: CopyLoc[1](loc0: vector<u64>)
	31: StLoc[7](loc6: vector<u64>)
	32: MoveLoc[7](loc6: vector<u64>)
	33: Ret
}
}
== END Bytecode ==

task 1 'run'. lines 67-73:

== BEGIN Bytecode ==
// Move bytecode v7
script {
use 0000000000000000000000000000000000000000000000000000000000000042::heap;




main() {
B0:
	0: Call heap::main()
	1: Ret
}
}
== END Bytecode ==
}
