============ initial bytecode ================

[variant baseline]
fun m::test(): u64 {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t1 := false
  1: if ($t1) goto 2 else goto 11
  2: label L0
  3: $t3 := 0
  4: $t2 := infer($t3)
  5: $t5 := 1
  6: $t4 := +($t2, $t5)
  7: $t2 := infer($t4)
  8: $t0 := infer($t2)
  9: return $t0
 10: goto 12
 11: label L1
 12: label L2
 13: $t0 := 0
 14: return $t0
}

============ after UnreachableCodeProcessor: ================

[variant baseline]
fun m::test(): u64 {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     # maybe
  0: $t1 := false
     # maybe
  1: if ($t1) goto 2 else goto 11
     # maybe
  2: label L0
     # maybe
  3: $t3 := 0
     # maybe
  4: $t2 := infer($t3)
     # maybe
  5: $t5 := 1
     # maybe
  6: $t4 := +($t2, $t5)
     # maybe
  7: $t2 := infer($t4)
     # maybe
  8: $t0 := infer($t2)
     # maybe
  9: return $t0
     # no
 10: goto 12
     # maybe
 11: label L1
     # maybe
 12: label L2
     # maybe
 13: $t0 := 0
     # maybe
 14: return $t0
}

============ after UnreachableCodeRemover: ================

[variant baseline]
fun m::test(): u64 {
     var $t0: u64
     var $t1: bool
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t1 := false
  1: if ($t1) goto 2 else goto 10
  2: label L0
  3: $t3 := 0
  4: $t2 := infer($t3)
  5: $t5 := 1
  6: $t4 := +($t2, $t5)
  7: $t2 := infer($t4)
  8: $t0 := infer($t2)
  9: return $t0
 10: label L1
 11: label L2
 12: $t0 := 0
 13: return $t0
}
