============ initial bytecode ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 7
  5: label L1
  6: m::consume($t1)
  7: label L2
  8: $t3 := !($t0)
  9: if ($t3) goto 10 else goto 13
 10: label L3
 11: m::consume($t1)
 12: goto 15
 13: label L4
 14: m::consume($t2)
 15: label L5
 16: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W
     var $t3: bool
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: m::consume_($t2)
  4: goto 7
  5: label L1
  6: m::consume_($t1)
  7: label L2
  8: $t3 := !($t0)
  9: if ($t3) goto 10 else goto 13
 10: label L3
 11: m::consume_($t1)
 12: goto 15
 13: label L4
 14: m::consume_($t2)
 15: label L5
 16: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::consume($t0: u32) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
     # live vars: $t0
     # events: b:$t0, e:$t0
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t2
  0: $t2 := copy($t1)
     # live vars: $t0, $t1, $t2
  1: if ($t0) goto 2 else goto 5
     # live vars: $t0, $t1, $t2
  2: label L0
     # live vars: $t0, $t1, $t2
  3: m::consume($t2)
     # live vars: $t0, $t1, $t2
  4: goto 7
     # live vars: $t0, $t1, $t2
  5: label L1
     # live vars: $t0, $t1, $t2
  6: m::consume($t1)
     # live vars: $t0, $t1, $t2
  7: label L2
     # live vars: $t0, $t1, $t2
     # events: e:$t0, b:$t3
  8: $t3 := !($t0)
     # live vars: $t1, $t2, $t3
     # events: e:$t3
  9: if ($t3) goto 10 else goto 13
     # live vars: $t1, $t2
 10: label L3
     # live vars: $t1
 11: m::consume($t1)
     # live vars:
 12: goto 15
     # live vars: $t1, $t2
     # events: e:$t1
 13: label L4
     # live vars: $t2
     # events: e:$t2
 14: m::consume($t2)
     # live vars:
 15: label L5
     # live vars:
 16: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W
     var $t3: bool
     var $t4: m::W
     var $t5: m::W
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, b:$t2
  0: $t2 := copy($t1)
     # live vars: $t0, $t1, $t2
  1: if ($t0) goto 2 else goto 6
     # live vars: $t0, $t1, $t2
  2: label L0
     # live vars: $t0, $t1, $t2
     # events: b:$t4
  3: $t4 := copy($t2)
     # live vars: $t0, $t1, $t2, $t4
     # events: e:$t4
  4: m::consume_($t4)
     # live vars: $t0, $t1, $t2
  5: goto 9
     # live vars: $t0, $t1, $t2
  6: label L1
     # live vars: $t0, $t1, $t2
     # events: b:$t5
  7: $t5 := copy($t1)
     # live vars: $t0, $t1, $t2, $t5
     # events: e:$t5
  8: m::consume_($t5)
     # live vars: $t0, $t1, $t2
  9: label L2
     # live vars: $t0, $t1, $t2
     # events: e:$t0, b:$t3
 10: $t3 := !($t0)
     # live vars: $t1, $t2, $t3
     # events: e:$t3
 11: if ($t3) goto 12 else goto 15
     # live vars: $t1, $t2
 12: label L3
     # live vars: $t1
 13: m::consume_($t1)
     # live vars:
 14: goto 17
     # live vars: $t1, $t2
     # events: e:$t1
 15: label L4
     # live vars: $t2
     # events: e:$t2
 16: m::consume_($t2)
     # live vars:
 17: label L5
     # live vars:
 18: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::consume($t0: u32) {
  0: return ()
}


[variant baseline]
fun m::consume_($t0: m::W) {
  0: return ()
}


[variant baseline]
public fun m::test($t0: bool, $t1: u32) {
     var $t2: u32
     var $t3: bool [unused]
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: m::consume($t2)
  4: goto 7
  5: label L1
  6: m::consume($t1)
  7: label L2
  8: $t0 := !($t0)
  9: if ($t0) goto 10 else goto 13
 10: label L3
 11: m::consume($t1)
 12: goto 15
 13: label L4
 14: m::consume($t2)
 15: label L5
 16: return ()
}


[variant baseline]
public fun m::test_struct($t0: bool, $t1: m::W) {
     var $t2: m::W
     var $t3: bool [unused]
     var $t4: m::W
     var $t5: m::W [unused]
  0: $t2 := copy($t1)
  1: if ($t0) goto 2 else goto 6
  2: label L0
  3: $t4 := copy($t2)
  4: m::consume_($t4)
  5: goto 9
  6: label L1
  7: $t4 := copy($t1)
  8: m::consume_($t4)
  9: label L2
 10: $t0 := !($t0)
 11: if ($t0) goto 12 else goto 15
 12: label L3
 13: m::consume_($t1)
 14: goto 17
 15: label L4
 16: m::consume_($t2)
 17: label L5
 18: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {
struct W has copy, drop {
	x: u32
}

consume(Arg0: u32) /* def_idx: 0 */ {
B0:
	0: Ret
}
consume_(Arg0: W) /* def_idx: 1 */ {
B0:
	0: Ret
}
public test(Arg0: bool, Arg1: u32) /* def_idx: 2 */ {
L2:	loc0: u32
B0:
	0: CopyLoc[1](Arg1: u32)
	1: StLoc[2](loc0: u32)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(7)
B1:
	4: CopyLoc[2](loc0: u32)
	5: Call consume(u32)
	6: Branch(9)
B2:
	7: CopyLoc[1](Arg1: u32)
	8: Call consume(u32)
B3:
	9: CopyLoc[0](Arg0: bool)
	10: Not
	11: BrFalse(15)
B4:
	12: MoveLoc[1](Arg1: u32)
	13: Call consume(u32)
	14: Branch(17)
B5:
	15: MoveLoc[2](loc0: u32)
	16: Call consume(u32)
B6:
	17: Ret
}
public test_struct(Arg0: bool, Arg1: W) /* def_idx: 3 */ {
L2:	loc0: W
L3:	loc1: W
B0:
	0: CopyLoc[1](Arg1: W)
	1: StLoc[2](loc0: W)
	2: CopyLoc[0](Arg0: bool)
	3: BrFalse(9)
B1:
	4: CopyLoc[2](loc0: W)
	5: StLoc[3](loc1: W)
	6: MoveLoc[3](loc1: W)
	7: Call consume_(W)
	8: Branch(13)
B2:
	9: CopyLoc[1](Arg1: W)
	10: StLoc[3](loc1: W)
	11: MoveLoc[3](loc1: W)
	12: Call consume_(W)
B3:
	13: CopyLoc[0](Arg0: bool)
	14: Not
	15: BrFalse(19)
B4:
	16: MoveLoc[1](Arg1: W)
	17: Call consume_(W)
	18: Branch(21)
B5:
	19: MoveLoc[2](loc0: W)
	20: Call consume_(W)
B6:
	21: Ret
}
}
============ bytecode verification succeeded ========
