/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x75747573
                {
                    // test_bytes5_2_dynamic_size_sum(bytes5[2][])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$bytes5_2___$_$vec$vec$vec$u8$$$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_bytes5_2_dynamic_size_sum(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64_uint8$_$u64_u8$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xcaf983d4
                {
                    // test_dynamic_bytes_last_elem(bytes)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$bytes$_$vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_dynamic_bytes_last_elem(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u8$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb8da1d50
                {
                    // test_dynamic_bytes_len(bytes)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$bytes$_$vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_dynamic_bytes_length(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb8a04d00
                {
                    // test_static_bytes_last_elem(bytes32)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$bytes32$_$vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_static_bytes_last_element(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u8$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x272c5904
                {
                    // test_static_bytes_len(bytes4)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$bytes4$_$vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_static_bytes_length(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x16e560f4
                {
                    // test_string(string)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$string$_$vec$u8$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_string(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64_uint8$_$u64_u8$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_bytes5_2_dynamic_size_sum(v) -> $result0, $result1 {
                let i, j, len_v, len_vec, len_vec_bytes, sum, sum_len, v_1, vec, vec_bytes, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29
                let $locals := $Malloc(32)
                mstore($locals, v)
                let $block := 3
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L7
                        // $t16 := <($t1, $t12)
                        $t16 := $Lt(i, $t12)
                        // if ($t16) goto L1 else goto L0
                        switch $t16
                        case 0  { $block := 5 }
                        default { $block := 4 }
                    }
                    case 3 {
                        // $t11 := borrow_local($t0)
                        $t11 := $MakePtr(false, $locals)
                        // $t12 := vector::length<vector<vector<u8>>>($t11)
                        $t12 := A1_vector_length$vec$vec$u8$$$($t11)
                        // $t13 := 0
                        $t13 := 0
                        // $t6 := $t13
                        sum := $t13
                        // $t14 := 0
                        $t14 := 0
                        // $t7 := $t14
                        sum_len := $t14
                        // $t15 := 0
                        $t15 := 0
                        // $t1 := $t15
                        i := $t15
                        // goto L7
                        $block := 2
                    }
                    case 4 {
                        // label L1
                        // goto L2
                        $block := 6
                    }
                    case 5 {
                        // label L0
                        // return ($t7, $t6)
                        $result0 := sum_len
                        $result1 := sum
                        $Free($locals, 32)
                        leave
                    }
                    case 6 {
                        // label L2
                        // $t17 := borrow_local($t0)
                        $t17 := $MakePtr(false, $locals)
                        // $t18 := vector::borrow<vector<vector<u8>>>($t17, $t1)
                        $t18 := A1_vector_borrow$vec$vec$u8$$$($t17, i)
                        // $t19 := vector::length<vector<u8>>($t18)
                        $t19 := A1_vector_length$vec$u8$$($t18)
                        // $t20 := 0
                        $t20 := 0
                        // $t2 := $t20
                        j := $t20
                        // goto L6
                        $block := 7
                    }
                    case 7 {
                        // label L6
                        // $t21 := <($t2, $t19)
                        $t21 := $Lt(j, $t19)
                        // if ($t21) goto L4 else goto L3
                        switch $t21
                        case 0  { $block := 9 }
                        default { $block := 8 }
                    }
                    case 8 {
                        // label L4
                        // goto L5
                        $block := 10
                    }
                    case 9 {
                        // label L3
                        // destroy($t18)
                        // $t29 := 1
                        $t29 := 1
                        // $t1 := +($t1, $t29)
                        i := $AddU64(i, $t29)
                        // goto L7
                        $block := 2
                    }
                    case 10 {
                        // label L5
                        // $t22 := vector::borrow<vector<u8>>($t18, $t2)
                        $t22 := A1_vector_borrow$vec$u8$$($t18, j)
                        // $t23 := vector::length<u8>($t22)
                        $t23 := A1_vector_length$u8$($t22)
                        // $t24 := 1
                        $t24 := 1
                        // $t25 := -($t23, $t24)
                        $t25 := $Sub($t23, $t24)
                        // $t26 := vector::borrow<u8>($t22, $t25)
                        $t26 := A1_vector_borrow$u8$($t22, $t25)
                        // $t27 := read_ref($t26)
                        $t27 := $LoadU8($t26)
                        // $t7 := +($t7, $t23)
                        sum_len := $AddU64(sum_len, $t23)
                        // $t6 := +($t6, $t27)
                        sum := $AddU8(sum, $t27)
                        // $t28 := 1
                        $t28 := 1
                        // $t2 := +($t2, $t28)
                        j := $AddU64(j, $t28)
                        // goto L6
                        $block := 7
                    }
                }
            }

            function A2_M_test_dynamic_bytes_last_elem(v) -> $result {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::length<u8>($t2)
                $t3 := A1_vector_length$u8$($t2)
                // $t4 := 1
                $t4 := 1
                // $t5 := -($t3, $t4)
                $t5 := $Sub($t3, $t4)
                // $t6 := vector::borrow<u8>($t1, $t5)
                $t6 := A1_vector_borrow$u8$($t1, $t5)
                // $t7 := read_ref($t6)
                $t7 := $LoadU8($t6)
                // return $t7
                $result := $t7
                $Free($locals, 32)
            }

            function A2_M_test_dynamic_bytes_length(v) -> $result {
                let $t1, $t2
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := vector::length<u8>($t1)
                $t2 := A1_vector_length$u8$($t1)
                // return $t2
                $result := $t2
                $Free($locals, 32)
            }

            function A2_M_test_static_bytes_last_element(v) -> $result {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::length<u8>($t2)
                $t3 := A1_vector_length$u8$($t2)
                // $t4 := 1
                $t4 := 1
                // $t5 := -($t3, $t4)
                $t5 := $Sub($t3, $t4)
                // $t6 := vector::borrow<u8>($t1, $t5)
                $t6 := A1_vector_borrow$u8$($t1, $t5)
                // $t7 := read_ref($t6)
                $t7 := $LoadU8($t6)
                // return $t7
                $result := $t7
                $Free($locals, 32)
            }

            function A2_M_test_static_bytes_length(v) -> $result {
                let $t1, $t2
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := vector::length<u8>($t1)
                $t2 := A1_vector_length$u8$($t1)
                // return $t2
                $result := $t2
                $Free($locals, 32)
            }

            function A2_M_test_string(v) -> $result0, $result1 {
                let len_str, $t2, $t3, $t4, $t5, $t6, $t7, $t8
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::length<u8>($t2)
                $t3 := A1_vector_length$u8$($t2)
                // $t4 := borrow_local($t0)
                $t4 := $MakePtr(false, $locals)
                // $t5 := 1
                $t5 := 1
                // $t6 := -($t3, $t5)
                $t6 := $Sub($t3, $t5)
                // $t7 := vector::borrow<u8>($t4, $t6)
                $t7 := A1_vector_borrow$u8$($t4, $t6)
                // $t8 := read_ref($t7)
                $t8 := $LoadU8($t7)
                // return ($t3, $t8)
                $result0 := $t3
                $result1 := $t8
                $Free($locals, 32)
            }

            function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
            }
            function A1_vector_length$u8$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function A1_vector_borrow$vec$u8$$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            }
            function A1_vector_length$vec$u8$$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function A1_vector_borrow$vec$vec$u8$$$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            }
            function A1_vector_length$vec$vec$u8$$$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function abi_encode_tuple_$uint64_uint8$_$u64_u8$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint64(value_0, add(headStart, 0))
                abi_encode_uint8(value_1, add(headStart, 32))
            }
            function abi_encode_uint8(value, pos) {
                mstore(pos, cleanup_uint8(value))
            }
            function cleanup_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$string$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_string_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__string(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__string(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_encode_tuple_$uint8$_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint8(value_0, add(headStart, 0))
            }
            function abi_decode_tuple_$bytes4$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_bytes4_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes4_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 4
                let size := 36
                array := abi_decode_available_length__bytes4(offset, length, size, end)
            }
            function abi_decode_available_length__bytes4(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_encode_tuple_$uint8$_$u8$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint8(value_0, add(headStart, 0))
            }
            function abi_decode_tuple_$bytes32$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_bytes32_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes32_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 32
                let size := 64
                array := abi_decode_available_length__bytes32(offset, length, size, end)
            }
            function abi_decode_available_length__bytes32(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_tuple_$bytes$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_bytes_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__bytes(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__bytes(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_tuple_$bytes5_2___$_$vec$vec$vec$u8$$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_bytes5_2____vec$vec$vec$u8$$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes5_2____vec$vec$vec$u8$$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__bytes5_2____vec$vec$vec$u8$$$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__bytes5_2____vec$vec$vec$u8$$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 64))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 64) }
                {
                    let elementPos := src
                    let value := abi_decode_bytes5_2__vec$vec$u8$$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_bytes5_2__vec$vec$u8$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__bytes5_2__vec$vec$u8$$(offset, length, size, end)
            }
            function abi_decode_available_length__bytes5_2__vec$vec$u8$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_bytes5_vec$u8$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_bytes5_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 5
                let size := 37
                array := abi_decode_available_length__bytes5(offset, length, size, end)
            }
            function abi_decode_available_length__bytes5(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $LoadU8(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU8(offs)
              }
              default {
                val := $StorageLoadU8(offs)
              }
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $StorageLoadU8(offs) -> val {
              val := $StorageLoadBytes(offs, 1)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $CopyFromCallDataToMemory(src, dst, length) {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $AddU8(x, y) -> r {
                if lt(sub(0xff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
        }
    }
}


!! Succeeded compiling Yul
