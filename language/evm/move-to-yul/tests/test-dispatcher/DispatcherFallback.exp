/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xe44f11ec
                {
                    // return_0()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_return_0()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint128$_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            if callvalue()
            {
                $Abort(99)
            }
            {
                A2_M_fallback() stop()
            }
            function A2_M_return_0() -> $result {
                let $t0
                // $t0 := 0
                $t0 := 0
                // return $t0
                $result := $t0
            }

            function A2_M_fallback() {
                // return ()
            }

            function abi_encode_tuple_$uint128$_$u128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint128(value_0, add(headStart, 0))
            }
            function abi_encode_uint128(value, pos) {
                mstore(pos, cleanup_uint128(value))
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul
