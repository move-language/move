============ initial bytecode ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
  0: $t2 := false
  1: $t1 := pack Test::Impotent($t2)
  2: $t0 := infer($t1)
  3: label L0
  4: goto 3
  5: label L1
  6: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
  0: $t2 := false
  1: $t1 := pack Test::Impotent($t2)
  2: $t0 := infer($t1)
  3: label L0
  4: $t3 := true
  5: if ($t3) goto 6 else goto 8
  6: label L2
  7: goto 10
  8: label L3
  9: goto 12
 10: label L4
 11: goto 3
 12: label L1
 13: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
  0: $t3 := false
  1: $t2 := pack Test::Impotent($t3)
  2: $t1 := infer($t2)
  3: if ($t0) goto 4 else goto 9
  4: label L0
  5: label L3
  6: goto 5
  7: label L4
  8: goto 12
  9: label L1
 10: $t4 := 42
 11: abort($t4)
 12: label L2
 13: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     # live vars:
  0: $t2 := false
     # live vars: $t2
  1: $t1 := pack Test::Impotent($t2)
     # live vars: $t1
  2: $t0 := move($t1)
     # live vars:
  3: label L0
     # live vars:
  4: goto 3
     # live vars:
  5: label L1
     # live vars:
  6: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
     # live vars:
  0: $t2 := false
     # live vars: $t2
  1: $t1 := pack Test::Impotent($t2)
     # live vars: $t1
  2: $t0 := move($t1)
     # live vars:
  3: label L0
     # live vars:
  4: $t3 := true
     # live vars: $t3
  5: if ($t3) goto 6 else goto 8
     # live vars:
  6: label L2
     # live vars:
  7: goto 10
     # live vars:
  8: label L3
     # live vars:
  9: goto 12
     # live vars:
 10: label L4
     # live vars:
 11: goto 3
     # live vars:
 12: label L1
     # live vars:
 13: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
     # live vars: $t0
  0: $t3 := false
     # live vars: $t0, $t3
  1: $t2 := pack Test::Impotent($t3)
     # live vars: $t0, $t2
  2: $t1 := move($t2)
     # live vars: $t0
  3: if ($t0) goto 4 else goto 9
     # live vars:
  4: label L0
     # live vars:
  5: label L3
     # live vars:
  6: goto 5
     # live vars:
  7: label L4
     # live vars:
  8: goto 12
     # live vars:
  9: label L1
     # live vars:
 10: $t4 := 42
     # live vars: $t4
 11: abort($t4)
     # live vars:
 12: label L2
     # live vars:
 13: return ()
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t2 := false
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t1 := pack Test::Impotent($t2)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2}
     #
  2: $t0 := move($t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  3: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  4: goto 3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  5: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  6: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t2 := false
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t1 := pack Test::Impotent($t2)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2}
     #
  2: $t0 := move($t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  3: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  4: $t3 := true
     # live vars: $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  5: if ($t3) goto 6 else goto 8
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  6: label L2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  7: goto 10
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  8: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
  9: goto 12
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
 10: label L4
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
 11: goto 3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
 12: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t1,$t2}
     #
 13: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t3 := false
     # live vars: $t0, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t2 := pack Test::Impotent($t3)
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t3}
     #
  2: $t1 := move($t2)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  3: if ($t0) goto 4 else goto 9
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  4: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  5: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  6: goto 5
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  7: label L4
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  8: goto 12
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
  9: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
 10: $t4 := 42
     # live vars: $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2,$t3}
     #
 11: abort($t4)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
 12: label L2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
 13: return ()
}

============ after ExplicitDrop: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
  0: $t2 := false
  1: $t1 := pack Test::Impotent($t2)
  2: $t0 := move($t1)
  3: drop($t0)
  4: label L0
  5: goto 4
  6: label L1
  7: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
  0: $t2 := false
  1: $t1 := pack Test::Impotent($t2)
  2: $t0 := move($t1)
  3: drop($t0)
  4: label L0
  5: $t3 := true
  6: if ($t3) goto 7 else goto 9
  7: label L2
  8: goto 11
  9: label L3
 10: goto 13
 11: label L4
 12: goto 4
 13: label L1
 14: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
  0: $t3 := false
  1: $t2 := pack Test::Impotent($t3)
  2: $t1 := move($t2)
  3: drop($t1)
  4: if ($t0) goto 5 else goto 10
  5: label L0
  6: label L3
  7: goto 6
  8: label L4
  9: goto 13
 10: label L1
 11: $t4 := 42
 12: abort($t4)
 13: label L2
 14: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     # abort state before: {}
     # abort state after : {}
  0: $t2 := false
     # abort state before: {}
     # abort state after : {}
  1: $t1 := pack Test::Impotent($t2)
     # abort state before: {}
     # abort state after : {}
  2: $t0 := move($t1)
     # abort state before: {}
     # abort state after : {}
  3: drop($t0)
     # abort state before: {}
     # abort state after : {}
  4: label L0
     # abort state before: {}
     # abort state after : {}
  5: goto 4
     # abort state before: {returns}
     # abort state after : {returns}
  6: label L1
     # abort state before: {returns}
     # abort state after : {}
  7: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := false
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t1 := pack Test::Impotent($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t0 := move($t1)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  4: label L0
     # abort state before: {returns}
     # abort state after : {returns}
  5: $t3 := true
     # abort state before: {returns}
     # abort state after : {returns}
  6: if ($t3) goto 7 else goto 9
     # abort state before: {returns}
     # abort state after : {returns}
  7: label L2
     # abort state before: {returns}
     # abort state after : {returns}
  8: goto 11
     # abort state before: {returns}
     # abort state after : {returns}
  9: label L3
     # abort state before: {returns}
     # abort state after : {returns}
 10: goto 13
     # abort state before: {returns}
     # abort state after : {returns}
 11: label L4
     # abort state before: {returns}
     # abort state after : {returns}
 12: goto 4
     # abort state before: {returns}
     # abort state after : {returns}
 13: label L1
     # abort state before: {returns}
     # abort state after : {}
 14: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
     # abort state before: {aborts}
     # abort state after : {aborts}
  0: $t3 := false
     # abort state before: {aborts}
     # abort state after : {aborts}
  1: $t2 := pack Test::Impotent($t3)
     # abort state before: {aborts}
     # abort state after : {aborts}
  2: $t1 := move($t2)
     # abort state before: {aborts}
     # abort state after : {aborts}
  3: drop($t1)
     # abort state before: {aborts}
     # abort state after : {aborts}
  4: if ($t0) goto 5 else goto 10
     # abort state before: {}
     # abort state after : {}
  5: label L0
     # abort state before: {}
     # abort state after : {}
  6: label L3
     # abort state before: {}
     # abort state after : {}
  7: goto 6
     # abort state before: {returns}
     # abort state after : {returns}
  8: label L4
     # abort state before: {returns}
     # abort state after : {returns}
  9: goto 13
     # abort state before: {aborts}
     # abort state after : {aborts}
 10: label L1
     # abort state before: {aborts}
     # abort state after : {aborts}
 11: $t4 := 42
     # abort state before: {aborts}
     # abort state after : {}
 12: abort($t4)
     # abort state before: {returns}
     # abort state after : {returns}
 13: label L2
     # abort state before: {returns}
     # abort state after : {}
 14: return ()
}


Diagnostics:
error: cannot drop
   ┌─ tests/ability-checker/loop_abort.move:11:13
   │
11 │         let _x = Impotent {};
   │             ^^

============ after AbilityChecker: ================

[variant baseline]
fun Test::test0() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     # abort state before: {}
     # abort state after : {}
  0: $t2 := false
     # abort state before: {}
     # abort state after : {}
  1: $t1 := pack Test::Impotent($t2)
     # abort state before: {}
     # abort state after : {}
  2: $t0 := move($t1)
     # abort state before: {}
     # abort state after : {}
  3: drop($t0)
     # abort state before: {}
     # abort state after : {}
  4: label L0
     # abort state before: {}
     # abort state after : {}
  5: goto 4
     # abort state before: {returns}
     # abort state after : {returns}
  6: label L1
     # abort state before: {returns}
     # abort state after : {}
  7: return ()
}


[variant baseline]
fun Test::test1() {
     var $t0: Test::Impotent
     var $t1: Test::Impotent
     var $t2: bool
     var $t3: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t2 := false
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t1 := pack Test::Impotent($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t0 := move($t1)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  4: label L0
     # abort state before: {returns}
     # abort state after : {returns}
  5: $t3 := true
     # abort state before: {returns}
     # abort state after : {returns}
  6: if ($t3) goto 7 else goto 9
     # abort state before: {returns}
     # abort state after : {returns}
  7: label L2
     # abort state before: {returns}
     # abort state after : {returns}
  8: goto 11
     # abort state before: {returns}
     # abort state after : {returns}
  9: label L3
     # abort state before: {returns}
     # abort state after : {returns}
 10: goto 13
     # abort state before: {returns}
     # abort state after : {returns}
 11: label L4
     # abort state before: {returns}
     # abort state after : {returns}
 12: goto 4
     # abort state before: {returns}
     # abort state after : {returns}
 13: label L1
     # abort state before: {returns}
     # abort state after : {}
 14: return ()
}


[variant baseline]
fun Test::test2($t0: bool) {
     var $t1: Test::Impotent
     var $t2: Test::Impotent
     var $t3: bool
     var $t4: u64
     # abort state before: {aborts}
     # abort state after : {aborts}
  0: $t3 := false
     # abort state before: {aborts}
     # abort state after : {aborts}
  1: $t2 := pack Test::Impotent($t3)
     # abort state before: {aborts}
     # abort state after : {aborts}
  2: $t1 := move($t2)
     # abort state before: {aborts}
     # abort state after : {aborts}
  3: drop($t1)
     # abort state before: {aborts}
     # abort state after : {aborts}
  4: if ($t0) goto 5 else goto 10
     # abort state before: {}
     # abort state after : {}
  5: label L0
     # abort state before: {}
     # abort state after : {}
  6: label L3
     # abort state before: {}
     # abort state after : {}
  7: goto 6
     # abort state before: {returns}
     # abort state after : {returns}
  8: label L4
     # abort state before: {returns}
     # abort state after : {returns}
  9: goto 13
     # abort state before: {aborts}
     # abort state after : {aborts}
 10: label L1
     # abort state before: {aborts}
     # abort state after : {aborts}
 11: $t4 := 42
     # abort state before: {aborts}
     # abort state after : {}
 12: abort($t4)
     # abort state before: {returns}
     # abort state after : {returns}
 13: label L2
     # abort state before: {returns}
     # abort state after : {}
 14: return ()
}
