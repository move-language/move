============ initial bytecode ================

[variant baseline]
fun operators::arithm($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t6 := -($t0, $t1)
  1: $t5 := /($t1, $t6)
  2: $t4 := *($t5, $t1)
  3: $t3 := %($t4, $t0)
  4: $t2 := +($t0, $t3)
  5: return $t2
}


[variant baseline]
fun operators::bits($t0: u64, $t1: u8): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: $t4 := <<($t0, $t1)
  1: $t3 := &($t4, $t0)
  2: $t6 := >>($t0, $t1)
  3: $t5 := ^($t6, $t0)
  4: $t2 := |($t3, $t5)
  5: return $t2
}


[variant baseline]
fun operators::bools($t0: bool, $t1: bool): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: bool
     var $t7: bool
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t5 := move($t1)
  3: goto 6
  4: label L1
  5: $t5 := false
  6: label L2
  7: if ($t5) goto 8 else goto 11
  8: label L3
  9: $t4 := true
 10: goto 19
 11: label L4
 12: if ($t0) goto 13 else goto 16
 13: label L6
 14: $t4 := !($t1)
 15: goto 18
 16: label L7
 17: $t4 := false
 18: label L8
 19: label L5
 20: if ($t4) goto 21 else goto 24
 21: label L9
 22: $t3 := true
 23: goto 33
 24: label L10
 25: $t6 := !($t0)
 26: if ($t6) goto 27 else goto 30
 27: label L12
 28: $t3 := move($t1)
 29: goto 32
 30: label L13
 31: $t3 := false
 32: label L14
 33: label L11
 34: if ($t3) goto 35 else goto 38
 35: label L15
 36: $t2 := true
 37: goto 47
 38: label L16
 39: $t7 := !($t0)
 40: if ($t7) goto 41 else goto 44
 41: label L18
 42: $t2 := !($t1)
 43: goto 46
 44: label L19
 45: $t2 := false
 46: label L20
 47: label L17
 48: return $t2
}


[variant baseline]
fun operators::equality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
  0: $t2 := ==($t0, $t1)
  1: return $t2
}


[variant baseline]
fun operators::inequality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
  0: $t2 := !=($t0, $t1)
  1: return $t2
}


[variant baseline]
fun operators::order($t0: u64, $t1: u64): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: bool
     var $t7: bool
  0: $t5 := <($t0, $t1)
  1: if ($t5) goto 2 else goto 5
  2: label L0
  3: $t4 := <=($t0, $t1)
  4: goto 7
  5: label L1
  6: $t4 := false
  7: label L2
  8: if ($t4) goto 9 else goto 13
  9: label L3
 10: $t6 := >($t0, $t1)
 11: $t3 := !($t6)
 12: goto 15
 13: label L4
 14: $t3 := false
 15: label L5
 16: if ($t3) goto 17 else goto 21
 17: label L6
 18: $t7 := >=($t0, $t1)
 19: $t2 := !($t7)
 20: goto 23
 21: label L7
 22: $t2 := false
 23: label L8
 24: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun operators::arithm($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # live vars: $t0, $t1
  0: $t6 := -($t0, $t1)
     # live vars: $t0, $t1, $t6
  1: $t5 := /($t1, $t6)
     # live vars: $t0, $t1, $t5
  2: $t4 := *($t5, $t1)
     # live vars: $t0, $t4
  3: $t3 := %($t4, $t0)
     # live vars: $t0, $t3
  4: $t2 := +($t0, $t3)
     # live vars: $t2
  5: return $t2
}


[variant baseline]
fun operators::bits($t0: u64, $t1: u8): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # live vars: $t0, $t1
  0: $t4 := <<($t0, $t1)
     # live vars: $t0, $t1, $t4
  1: $t3 := &($t4, $t0)
     # live vars: $t0, $t1, $t3
  2: $t6 := >>($t0, $t1)
     # live vars: $t0, $t3, $t6
  3: $t5 := ^($t6, $t0)
     # live vars: $t3, $t5
  4: $t2 := |($t3, $t5)
     # live vars: $t2
  5: return $t2
}


[variant baseline]
fun operators::bools($t0: bool, $t1: bool): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: bool
     var $t7: bool
     # live vars: $t0, $t1
  0: if ($t0) goto 1 else goto 4
     # live vars: $t0, $t1
  1: label L0
     # live vars: $t0, $t1
  2: $t5 := move($t1)
     # live vars: $t0, $t1, $t5
  3: goto 6
     # live vars: $t0, $t1
  4: label L1
     # live vars: $t0, $t1
  5: $t5 := false
     # live vars: $t0, $t1, $t5
  6: label L2
     # live vars: $t0, $t1, $t5
  7: if ($t5) goto 8 else goto 11
     # live vars: $t0, $t1
  8: label L3
     # live vars: $t0, $t1
  9: $t4 := true
     # live vars: $t0, $t1, $t4
 10: goto 19
     # live vars: $t0, $t1
 11: label L4
     # live vars: $t0, $t1
 12: if ($t0) goto 13 else goto 16
     # live vars: $t0, $t1
 13: label L6
     # live vars: $t0, $t1
 14: $t4 := !($t1)
     # live vars: $t0, $t1, $t4
 15: goto 18
     # live vars: $t0, $t1
 16: label L7
     # live vars: $t0, $t1
 17: $t4 := false
     # live vars: $t0, $t1, $t4
 18: label L8
     # live vars: $t0, $t1, $t4
 19: label L5
     # live vars: $t0, $t1, $t4
 20: if ($t4) goto 21 else goto 24
     # live vars: $t0, $t1
 21: label L9
     # live vars: $t0, $t1
 22: $t3 := true
     # live vars: $t0, $t1, $t3
 23: goto 33
     # live vars: $t0, $t1
 24: label L10
     # live vars: $t0, $t1
 25: $t6 := !($t0)
     # live vars: $t0, $t1, $t6
 26: if ($t6) goto 27 else goto 30
     # live vars: $t0, $t1
 27: label L12
     # live vars: $t0, $t1
 28: $t3 := move($t1)
     # live vars: $t0, $t1, $t3
 29: goto 32
     # live vars: $t0, $t1
 30: label L13
     # live vars: $t0, $t1
 31: $t3 := false
     # live vars: $t0, $t1, $t3
 32: label L14
     # live vars: $t0, $t1, $t3
 33: label L11
     # live vars: $t0, $t1, $t3
 34: if ($t3) goto 35 else goto 38
     # live vars:
 35: label L15
     # live vars:
 36: $t2 := true
     # live vars: $t2
 37: goto 47
     # live vars: $t0, $t1
 38: label L16
     # live vars: $t0, $t1
 39: $t7 := !($t0)
     # live vars: $t1, $t7
 40: if ($t7) goto 41 else goto 44
     # live vars: $t1
 41: label L18
     # live vars: $t1
 42: $t2 := !($t1)
     # live vars: $t2
 43: goto 46
     # live vars:
 44: label L19
     # live vars:
 45: $t2 := false
     # live vars: $t2
 46: label L20
     # live vars: $t2
 47: label L17
     # live vars: $t2
 48: return $t2
}


[variant baseline]
fun operators::equality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
     # live vars: $t0, $t1
  0: $t2 := ==($t0, $t1)
     # live vars: $t2
  1: return $t2
}


[variant baseline]
fun operators::inequality<#0>($t0: #0, $t1: #0): bool {
     var $t2: bool
     # live vars: $t0, $t1
  0: $t2 := !=($t0, $t1)
     # live vars: $t2
  1: return $t2
}


[variant baseline]
fun operators::order($t0: u64, $t1: u64): bool {
     var $t2: bool
     var $t3: bool
     var $t4: bool
     var $t5: bool
     var $t6: bool
     var $t7: bool
     # live vars: $t0, $t1
  0: $t5 := <($t0, $t1)
     # live vars: $t0, $t1, $t5
  1: if ($t5) goto 2 else goto 5
     # live vars: $t0, $t1
  2: label L0
     # live vars: $t0, $t1
  3: $t4 := <=($t0, $t1)
     # live vars: $t0, $t1, $t4
  4: goto 7
     # live vars: $t0, $t1
  5: label L1
     # live vars: $t0, $t1
  6: $t4 := false
     # live vars: $t0, $t1, $t4
  7: label L2
     # live vars: $t0, $t1, $t4
  8: if ($t4) goto 9 else goto 13
     # live vars: $t0, $t1
  9: label L3
     # live vars: $t0, $t1
 10: $t6 := >($t0, $t1)
     # live vars: $t0, $t1, $t6
 11: $t3 := !($t6)
     # live vars: $t0, $t1, $t3
 12: goto 15
     # live vars: $t0, $t1
 13: label L4
     # live vars: $t0, $t1
 14: $t3 := false
     # live vars: $t0, $t1, $t3
 15: label L5
     # live vars: $t0, $t1, $t3
 16: if ($t3) goto 17 else goto 21
     # live vars: $t0, $t1
 17: label L6
     # live vars: $t0, $t1
 18: $t7 := >=($t0, $t1)
     # live vars: $t7
 19: $t2 := !($t7)
     # live vars: $t2
 20: goto 23
     # live vars:
 21: label L7
     # live vars:
 22: $t2 := false
     # live vars: $t2
 23: label L8
     # live vars: $t2
 24: return $t2
}


============ disassembled file-format ==================
// Move bytecode v4294967295
module 42.operators {


arithm(Arg0: u64, Arg1: u64): u64 {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: CopyLoc[1](Arg1: u64)
	2: Sub
	3: StLoc[2](loc0: u64)
	4: CopyLoc[1](Arg1: u64)
	5: MoveLoc[2](loc0: u64)
	6: Div
	7: MoveLoc[1](Arg1: u64)
	8: Mul
	9: CopyLoc[0](Arg0: u64)
	10: Mod
	11: StLoc[3](loc1: u64)
	12: MoveLoc[0](Arg0: u64)
	13: MoveLoc[3](loc1: u64)
	14: Add
	15: Ret
}
bits(Arg0: u64, Arg1: u8): u64 {
B0:
	0: CopyLoc[0](Arg0: u64)
	1: CopyLoc[1](Arg1: u8)
	2: Shl
	3: CopyLoc[0](Arg0: u64)
	4: BitAnd
	5: CopyLoc[0](Arg0: u64)
	6: MoveLoc[1](Arg1: u8)
	7: Shr
	8: MoveLoc[0](Arg0: u64)
	9: Xor
	10: BitOr
	11: Ret
}
bools(Arg0: bool, Arg1: bool): bool {
L0:	loc2: bool
L1:	loc3: bool
B0:
	0: CopyLoc[0](Arg0: bool)
	1: BrFalse(5)
B1:
	2: CopyLoc[1](Arg1: bool)
	3: StLoc[2](loc0: bool)
	4: Branch(7)
B2:
	5: LdConst[0](Bool: [0])
	6: StLoc[2](loc0: bool)
B3:
	7: MoveLoc[2](loc0: bool)
	8: BrFalse(12)
B4:
	9: LdConst[1](Bool: [1])
	10: StLoc[3](loc1: bool)
	11: Branch(20)
B5:
	12: CopyLoc[0](Arg0: bool)
	13: BrFalse(18)
B6:
	14: CopyLoc[1](Arg1: bool)
	15: Not
	16: StLoc[3](loc1: bool)
	17: Branch(20)
B7:
	18: LdConst[0](Bool: [0])
	19: StLoc[3](loc1: bool)
B8:
	20: MoveLoc[3](loc1: bool)
	21: BrFalse(25)
B9:
	22: LdConst[1](Bool: [1])
	23: StLoc[4](loc2: bool)
	24: Branch(33)
B10:
	25: CopyLoc[0](Arg0: bool)
	26: Not
	27: BrFalse(31)
B11:
	28: CopyLoc[1](Arg1: bool)
	29: StLoc[4](loc2: bool)
	30: Branch(33)
B12:
	31: LdConst[0](Bool: [0])
	32: StLoc[4](loc2: bool)
B13:
	33: MoveLoc[4](loc2: bool)
	34: BrFalse(38)
B14:
	35: LdConst[1](Bool: [1])
	36: StLoc[5](loc3: bool)
	37: Branch(47)
B15:
	38: MoveLoc[0](Arg0: bool)
	39: Not
	40: BrFalse(45)
B16:
	41: MoveLoc[1](Arg1: bool)
	42: Not
	43: StLoc[5](loc3: bool)
	44: Branch(47)
B17:
	45: LdConst[0](Bool: [0])
	46: StLoc[5](loc3: bool)
B18:
	47: MoveLoc[5](loc3: bool)
	48: Ret
}
equality<Ty0>(Arg0: Ty0, Arg1: Ty0): bool {
B0:
	0: MoveLoc[0](Arg0: Ty0)
	1: MoveLoc[1](Arg1: Ty0)
	2: Eq
	3: Ret
}
inequality<Ty0>(Arg0: Ty0, Arg1: Ty0): bool {
B0:
	0: MoveLoc[0](Arg0: Ty0)
	1: MoveLoc[1](Arg1: Ty0)
	2: Neq
	3: Ret
}
order(Arg0: u64, Arg1: u64): bool {
L0:	loc2: bool
B0:
	0: CopyLoc[0](Arg0: u64)
	1: CopyLoc[1](Arg1: u64)
	2: Lt
	3: BrFalse(9)
B1:
	4: CopyLoc[0](Arg0: u64)
	5: CopyLoc[1](Arg1: u64)
	6: Le
	7: StLoc[2](loc0: bool)
	8: Branch(11)
B2:
	9: LdConst[0](Bool: [0])
	10: StLoc[2](loc0: bool)
B3:
	11: MoveLoc[2](loc0: bool)
	12: BrFalse(19)
B4:
	13: CopyLoc[0](Arg0: u64)
	14: CopyLoc[1](Arg1: u64)
	15: Gt
	16: Not
	17: StLoc[3](loc1: bool)
	18: Branch(21)
B5:
	19: LdConst[0](Bool: [0])
	20: StLoc[3](loc1: bool)
B6:
	21: MoveLoc[3](loc1: bool)
	22: BrFalse(29)
B7:
	23: MoveLoc[0](Arg0: u64)
	24: MoveLoc[1](Arg1: u64)
	25: Ge
	26: Not
	27: StLoc[4](loc2: bool)
	28: Branch(31)
B8:
	29: LdConst[0](Bool: [0])
	30: StLoc[4](loc2: bool)
B9:
	31: MoveLoc[4](loc2: bool)
	32: Ret
}
}
