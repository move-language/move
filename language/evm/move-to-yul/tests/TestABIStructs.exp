/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xcf61f38d
                {
                    // do_transfer()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_do_transfer()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x5bd0cf08
                {
                    // test_2((uint64,bool,(uint128[])[]))
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(4, calldatasize())
                    let ret_0 := A2_M_test_2_S(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x99472457
                {
                    // test_s_struct((bytes))
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$_bytes_$_$A1_ascii_String$(4, calldatasize())
                    let ret_0 := A2_M_test_String_struct(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_bytes_$_$A1_ascii_String$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x4c3d6ddc
                {
                    // test_array((uint64,bool,(uint128[])[])[][2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$_uint64_bool__uint128_________2_$_$vec$vec$A2_M_S$$$(4, calldatasize())
                    let ret_0 := A2_M_test_array(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint64_bool__uint128________$_$vec$A2_M_S$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf8a8fd6d
                {
                    // test()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_test_pack_S()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa6853da5
                {
                    // test_safe_transfer_from()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_M_test_safe_transfer_from()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$_uint128___$_$A2_M_S2$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_do_transfer() {
                let s, $t1, $t2, $t3, $t4
                // $t1 := 42
                $t1 := 42
                // $t2 := true
                $t2 := true
                // $t3 := M::pack_S($t1, $t2)
                $t3 := A2_M_pack_S($t1, $t2)
                // $t4 := pack M::Event_S($t3)
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t3)
                    $t4 := $mem
                }
                // Evm::emit<M::Event_S>($t4)
                A2_Evm_emit$A2_M_Event_S$($t4)
                // return ()
            }

            function A2_M_test_2_S(s) -> $result {
                // return $t0
                $result := s
            }

            function A2_M_test_String_struct(s) -> $result {
                // return $t0
                $result := s
            }

            function A2_M_test_array(v) -> $result {
                let $t1, $t2, $t3, $t4
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t1 := borrow_local($t0)
                $t1 := $MakePtr(false, $locals)
                // $t2 := 0
                $t2 := 0
                // $t3 := vector::borrow<vector<M::S>>($t1, $t2)
                $t3 := A1_vector_borrow$vec$A2_M_S$$($t1, $t2)
                // $t4 := read_ref($t3)
                $t4 := $LoadU256($t3)
                if $IsStoragePtr($t3){
                    let $storage_ptr_3616935342
                    let $size_3616935342 := $StorageLoadU64($t4)
                    let $capacity_3616935342 := $ClosestGreaterPowerOfTwo($size_3616935342)
                    $storage_ptr_3616935342 := $Malloc(add(32, mul($capacity_3616935342, 32)))
                    let $data_size_3616935342 := mul($size_3616935342, 32)
                    mstore($storage_ptr_3616935342, $AlignedStorageLoad($t4))
                    $MemoryStoreU64(add($storage_ptr_3616935342, 8), $capacity_3616935342)
                    let $data_src_3616935342 := add($t4, 32)
                    let $data_dst_3616935342 := add($storage_ptr_3616935342, 32)
                    for { let $offs_3616935342 := 0 } lt($offs_3616935342, $data_size_3616935342) { $offs_3616935342 := add($offs_3616935342, 32)} {
                        {
                            let $linked_src_1770153451 := $AlignedStorageLoad(add($data_src_3616935342, $offs_3616935342))
                            let $linked_dst_1770153451
                            $linked_dst_1770153451 := $Malloc(41)
                            {
                                let $linked_src_894856441 := $AlignedStorageLoad(add($linked_src_1770153451, 0))
                                let $linked_dst_894856441
                                let $size_894856441 := $StorageLoadU64($linked_src_894856441)
                                let $capacity_894856441 := $ClosestGreaterPowerOfTwo($size_894856441)
                                $linked_dst_894856441 := $Malloc(add(32, mul($capacity_894856441, 32)))
                                let $data_size_894856441 := mul($size_894856441, 32)
                                mstore($linked_dst_894856441, $AlignedStorageLoad($linked_src_894856441))
                                $MemoryStoreU64(add($linked_dst_894856441, 8), $capacity_894856441)
                                let $data_src_894856441 := add($linked_src_894856441, 32)
                                let $data_dst_894856441 := add($linked_dst_894856441, 32)
                                for { let $offs_894856441 := 0 } lt($offs_894856441, $data_size_894856441) { $offs_894856441 := add($offs_894856441, 32)} {
                                    {
                                        let $linked_src_1602512591 := $AlignedStorageLoad(add($data_src_894856441, $offs_894856441))
                                        let $linked_dst_1602512591
                                        $linked_dst_1602512591 := $Malloc(32)
                                        {
                                            let $linked_src_2315022182 := $AlignedStorageLoad(add($linked_src_1602512591, 0))
                                            let $linked_dst_2315022182
                                            let $size_2315022182 := $StorageLoadU64($linked_src_2315022182)
                                            let $capacity_2315022182 := $ClosestGreaterPowerOfTwo($size_2315022182)
                                            $linked_dst_2315022182 := $Malloc(add(32, mul($capacity_2315022182, 16)))
                                            let $data_size_2315022182 := mul($size_2315022182, 16)
                                            mstore($linked_dst_2315022182, $AlignedStorageLoad($linked_src_2315022182))
                                            $MemoryStoreU64(add($linked_dst_2315022182, 8), $capacity_2315022182)
                                            let $data_src_2315022182 := add($linked_src_2315022182, 32)
                                            let $data_dst_2315022182 := add($linked_dst_2315022182, 32)
                                            for { let $offs_2315022182 := 0 } lt($offs_2315022182, $data_size_2315022182) { $offs_2315022182 := add($offs_2315022182, 32)} {
                                                mstore(add($data_dst_2315022182, $offs_2315022182), $AlignedStorageLoad(add($data_src_2315022182, $offs_2315022182)))
                                            }
                                            mstore(add($linked_dst_1602512591, 0), $linked_dst_2315022182)
                                        }
                                        mstore(add($data_dst_894856441, $offs_894856441), $linked_dst_1602512591)
                                    }
                                }
                                mstore(add($linked_dst_1770153451, 0), $linked_dst_894856441)
                            }
                            mstore(add($linked_dst_1770153451, 32), $AlignedStorageLoad(add($linked_src_1770153451, 32)))
                            mstore(add($data_dst_3616935342, $offs_3616935342), $linked_dst_1770153451)
                        }
                    }
                    $t4 := $storage_ptr_3616935342
                }
                // return $t4
                $result := $t4
                $Free($locals, 32)
            }

            function A2_M_test_pack_S() -> $result {
                let $t0, $t1, $t2
                // $t0 := 42
                $t0 := 42
                // $t1 := true
                $t1 := true
                // $t2 := M::pack_S($t0, $t1)
                $t2 := A2_M_pack_S($t0, $t1)
                // return $t2
                $result := $t2
            }

            function A2_M_test_safe_transfer_from() -> $result {
                let contract_addr, s, $t2, $t3, $t4, $t5, $t6
                // $t2 := 42
                $t2 := 42
                // $t3 := true
                $t3 := true
                // $t4 := M::pack_S($t2, $t3)
                $t4 := A2_M_pack_S($t2, $t3)
                // $t5 := 0x3
                $t5 := 0x3
                // $t6 := M::safe_transfer_form($t5, $t4)
                $t6 := A2_M_safe_transfer_form($t5, $t4)
                // return $t6
                $result := $t6
            }

            function A2_M_safe_transfer_form(contract, s) -> $result  {
                // storage for arguments and returned data
                let $t2 := mload(0)
                mstore($t2, $Shl(0xd9f27567, 224))
                let $t3 := abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(add($t2, 4), s)
                let $t4 := call(gas(), contract, 0,  $t2, sub($t3, $t2), $t2, 0)
                // set freeMemoryPointer
                mstore(0, $t3)
                if iszero($t4) { $RevertForward() }
                if $t4 {
                    // copy dynamic return data out
                    returndatacopy($t2, 0, returndatasize())
                    // decode return parameters from external try-call into retVars
                    $result := abi_decode_tuple_$_uint128___$_$A2_M_S2$_from_memory($t2, add($t2, returndatasize()))
                }
            }
            function A2_M_pack_S(a, b) -> $result {
                let s2, $t4, $t5, $t6, $t7, $t8
                let $locals := $Malloc(32)
                // $t3 := vector::empty<M::S2>()
                mstore($locals, A1_vector_empty$A2_M_S2$())
                // $t4 := (u128)($t0)
                $t4 := $CastU128(a)
                // $t5 := M::pack_S2($t4)
                $t5 := A2_M_pack_S2($t4)
                // $t6 := borrow_local($t3)
                $t6 := $MakePtr(false, $locals)
                // vector::push_back<M::S2>($t6, $t5)
                A1_vector_push_back$A2_M_S2$($t6, $t5)
                // $t7 := move($t3)
                $t7 := mload($locals)
                // $t8 := pack M::S($t0, $t1, $t7)
                {
                    let $mem := $Malloc(41)
                    $MemoryStoreU64(add($mem, 32), a)
                    $MemoryStoreU8(add($mem, 40), b)
                    $MemoryStoreU256(add($mem, 0), $t7)
                    $t8 := $mem
                }
                // return $t8
                $result := $t8
                $Free($locals, 32)
            }

            function A1_vector_push_back$A2_M_S2$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
                $StoreU256(e_ptr, e)
                if $IsStoragePtr(e_ptr) {
                    let e_offs := $OffsetPtr(e_ptr)
                    let $linked_dst_1602512591 := $NewLinkedStorageBase(0x5f8466cf)
                    {
                        let $linked_src_2315022182 := mload(add(e, 0))
                        let $linked_dst_2315022182 := $NewLinkedStorageBase(0x89fc6f66)
                        let $size_2315022182 := $MemoryLoadU64($linked_src_2315022182)
                        let $data_size_2315022182 := mul($size_2315022182, 16)
                        $AlignedStorageStore($linked_dst_2315022182, mload($linked_src_2315022182))
                        let $data_src_2315022182 := add($linked_src_2315022182, 32)
                        let $data_dst_2315022182 := add($linked_dst_2315022182, 32)
                        for { let $offs_2315022182 := 0 } lt($offs_2315022182, $data_size_2315022182) { $offs_2315022182 := add($offs_2315022182, 32)} {
                            $AlignedStorageStore(add($data_dst_2315022182, $offs_2315022182), mload(add($data_src_2315022182, $offs_2315022182)))
                            $Free($linked_src_2315022182, add($data_size_2315022182, 32))
                        }
                        $AlignedStorageStore(add($linked_dst_1602512591, 0), $linked_dst_2315022182)
                    }
                    $Free(e, 32)
                    $AlignedStorageStore(e_offs, $linked_dst_1602512591)
                }
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A2_M_pack_S2(x) -> $result {
                let $t2, $t3, $t4
                let $locals := $Malloc(32)
                // $t1 := vector::empty<u128>()
                mstore($locals, A1_vector_empty$u128$())
                // $t2 := borrow_local($t1)
                $t2 := $MakePtr(false, $locals)
                // vector::push_back<u128>($t2, $t0)
                A1_vector_push_back$u128$($t2, x)
                // $t3 := move($t1)
                $t3 := mload($locals)
                // $t4 := pack M::S2($t3)
                {
                    let $mem := $Malloc(32)
                    $MemoryStoreU256(add($mem, 0), $t3)
                    $t4 := $mem
                }
                // return $t4
                $result := $t4
                $Free($locals, 32)
            }

            function A1_vector_push_back$u128$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 16)))
                $StoreU128(e_ptr, e)
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 16)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A1_vector_empty$u128$() -> vector {
                vector := $Malloc(64)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function A1_vector_empty$A2_M_S2$() -> vector {
                vector := $Malloc(96)
                $MemoryStoreU64(add(vector, 8), 2)
            }
            function A1_vector_borrow$vec$A2_M_S$$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            }
            function A2_Evm_emit$A2_M_Event_S$(e) {
                let $t1 := 0x63832c328fffa84736f81dee39bf126d59b4a7c5c1bb370244d025be5b10230b
                let $t2 := $MemoryLoadU256(add(e, 0))
                {
                    let $t3 := mload(0)
                    let $t4 := abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$($t3, $t2)
                    log1($t3, sub($t4, $t3), $t1)
                    mstore(0, $t4)
                }
            }
            function abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_$uint64_bool__uint128_____$_$A2_M_S$(value_0,  tail)
            }
            function abi_encode_$uint64_bool__uint128_____$_$A2_M_S$(value, pos) -> end {
                let tail := add(pos, 96)
                let value_0 := $MemoryLoadU64(add(value, 32))
                abi_encode_uint64(value_0, add(pos, 0))
                let value_1 := $MemoryLoadU8(add(value, 40))
                abi_encode_bool(value_1, add(pos, 32))
                let value_2 := $MemoryLoadU256(add(value, 0))
                mstore(add(pos, 64), sub(tail, pos))
                tail := abi_encode__uint128______vec$A2_M_S2$(value_2, tail)
                end := tail
            }
            function abi_encode__uint128______vec$A2_M_S2$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_$uint128__$_$A2_M_S2$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_$uint128__$_$A2_M_S2$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_$uint128__$_$A2_M_S2$(value, pos)
            }
            function abi_encode_$uint128__$_$A2_M_S2$(value, pos) -> end {
                let tail := add(pos, 32)
                let value_0 := $MemoryLoadU256(add(value, 0))
                mstore(add(pos, 0), sub(tail, pos))
                tail := abi_encode_uint128___vec$u128$(value_0, tail)
                end := tail
            }
            function abi_encode_uint128___vec$u128$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 16))
                for { let src := start } lt(src, srcEnd) { src := add(src, 16) }
                {
                    let v := $MemoryLoadU128(src)
                    pos := abi_encode_uint128_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint128_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint128(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint128(value, pos) {
                mstore(pos, cleanup_uint128(value))
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$_uint128___$_$A2_M_S2$_from_memory(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := mload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_$uint128__$_$A2_M_S2$_from_memory(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_$uint128__$_$A2_M_S2$_from_memory(headStart, end) -> value {
                if slt(sub(end, headStart), 32) { $Abort(90) }
                let value_0
                value := $Malloc(32)
                {
                    let offset := mload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint128___vec$u128$_from_memory(add(headStart, offset), end)
                }
                $MemoryStoreU256(add(value, 0), value_0)
            }
            function abi_decode_uint128___vec$u128$_from_memory(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := mload(offset)
                let size := add(mul(16, length), 32)
                array := abi_decode_available_length__uint128___vec$u128$_from_memory(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint128___vec$u128$_from_memory(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint128_from_memory(elementPos, end)
                    $MemoryStoreU128(dst, value)
                    dst := add(dst, 16)
                }
            }
            function abi_decode_uint128_from_memory(offset, end) -> value {
                value := mload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$_uint128___$_$A2_M_S2$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_$uint128__$_$A2_M_S2$(value_0,  tail)
            }
            function abi_encode_tuple_$_uint64_bool__uint128________$_$vec$A2_M_S$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode__uint64_bool__uint128_________vec$A2_M_S$(value_0,  tail)
            }
            function abi_encode__uint64_bool__uint128_________vec$A2_M_S$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_$uint64_bool__uint128_____$_$A2_M_S$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_$uint64_bool__uint128_____$_$A2_M_S$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_$uint64_bool__uint128_____$_$A2_M_S$(value, pos)
            }
            function abi_decode_tuple_$_uint64_bool__uint128_________2_$_$vec$vec$A2_M_S$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode__uint64_bool__uint128_________2__vec$vec$A2_M_S$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode__uint64_bool__uint128_________2__vec$vec$A2_M_S$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length___uint64_bool__uint128_________2__vec$vec$A2_M_S$$(offset, length, size, end)
            }
            function abi_decode_available_length___uint64_bool__uint128_________2__vec$vec$A2_M_S$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode__uint64_bool__uint128_________vec$A2_M_S$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode__uint64_bool__uint128_________vec$A2_M_S$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length___uint64_bool__uint128_________vec$A2_M_S$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length___uint64_bool__uint128_________vec$A2_M_S$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_$uint64_bool__uint128_____$_$A2_M_S$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_$uint64_bool__uint128_____$_$A2_M_S$(headStart, end) -> value {
                if slt(sub(end, headStart), 96) { $Abort(90) }
                let value_0, value_1, value_2
                value := $Malloc(96)
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), end)
                }
                $MemoryStoreU64(add(value, 32), value_0)
                {
                    let offset := 32
                    value_1 := abi_decode_bool(add(headStart, offset), end)
                }
                $MemoryStoreU8(add(value, 40), value_1)
                {
                    let offset := calldataload(add(headStart, 64))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_2 := abi_decode__uint128______vec$A2_M_S2$(add(headStart, offset), end)
                }
                $MemoryStoreU256(add(value, 0), value_2)
            }
            function abi_decode__uint128______vec$A2_M_S2$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length___uint128______vec$A2_M_S2$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length___uint128______vec$A2_M_S2$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_$uint128__$_$A2_M_S2$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_$uint128__$_$A2_M_S2$(headStart, end) -> value {
                if slt(sub(end, headStart), 32) { $Abort(90) }
                let value_0
                value := $Malloc(32)
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint128___vec$u128$(add(headStart, offset), end)
                }
                $MemoryStoreU256(add(value, 0), value_0)
            }
            function abi_decode_uint128___vec$u128$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(16, length), 32)
                array := abi_decode_available_length__uint128___vec$u128$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint128___vec$u128$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint128(elementPos, end)
                    $MemoryStoreU128(dst, value)
                    dst := add(dst, 16)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function abi_decode_bool(offset, end) -> value {
                value := calldataload(offset)
                validator_bool(value)
            }
            function validator_bool(value) {
                if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$_bytes_$_$A1_ascii_String$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_$bytes$_$A1_ascii_String$(value_0,  tail)
            }
            function abi_encode_$bytes$_$A1_ascii_String$(value, pos) -> end {
                let tail := add(pos, 32)
                let value_0 := $MemoryLoadU256(add(value, 0))
                mstore(add(pos, 0), sub(tail, pos))
                tail := abi_encode_bytes(value_0, tail)
                end := tail
            }
            function abi_encode_bytes(value, pos) -> end{
                let size := $MemoryLoadU64(value)
                mstore(pos, size)
                pos := add(pos, 0x20)
                $CopyMemory(add(value, 0x20), pos, size)
                size := $RoundUp(size)
                end := add(pos, size)
            }
            function abi_decode_tuple_$_bytes_$_$A1_ascii_String$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_$bytes$_$A1_ascii_String$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_$bytes$_$A1_ascii_String$(headStart, end) -> value {
                if slt(sub(end, headStart), 32) { $Abort(90) }
                let value_0
                value := $Malloc(32)
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_bytes_vec$u8$(add(headStart, offset), end)
                }
                $MemoryStoreU256(add(value, 0), value_0)
            }
            function abi_decode_bytes_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__bytes(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__bytes(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_$uint64_bool__uint128_____$_$A2_M_S$(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $RevertForward() {
              let pos := mload(0)
              returndatacopy(pos, 0, returndatasize())
              revert(pos, returndatasize())
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $NewLinkedStorageBase(type_hash) -> offs {
              let key := $StorageKey(1, 1)
              let handle := sload(key)
              sstore(key, add(handle, 1))
              offs := $MakeTypeStorageBase(1, type_hash, handle)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $MemoryLoadU128(offs) -> val {
              val := $MemoryLoadBytes(offs, 16)
            }
            function $StoreU128(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU128(offs, val)
              }
              default {
                $StorageStoreU128(offs, val)
              }
            }
            function $MemoryStoreU128(offs, val) {
              $MemoryStoreBytes(offs, 16, val)
            }
            function $StorageStoreU128(offs, val) {
              $StorageStoreBytes(offs, 16, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $StoreU256(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU256(offs, val)
              }
              default {
                $StorageStoreU256(offs, val)
              }
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $StorageStoreU256(offs, val) {
              $StorageStoreBytes(offs, 32, val)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(5, offs)
              sstore($StorageKey(0, word_offs), val)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $CopyFromCallDataToMemory(src, dst, length) {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
                let new_capacity := mul(capacity, 2)
                let data_size := add(32, mul(capacity, type_size))
                let new_data_size := add(32, mul(new_capacity, type_size))
                new_v_offs := $Malloc(new_data_size)
                $CopyMemory(v_offs, new_v_offs, data_size)
                // update capacity at new location
                $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
                $Free(v_offs, data_size)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $Shl(x, y) -> r {
              r := shl(y, x)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $CastU128(x) -> r {
                if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                r := x
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
            function $RoundUp(value) -> result {
                result := and(add(value, 31), not(31))
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::test_abi_S
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_abi_S" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_abi_S()
        return (0, 0)
        function A2_M_test_abi_S() {
            let _s, _s2x, s, v, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61
            let $locals := $Malloc(64)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t17 := 100
                    $t17 := 100
                    // abort($t17)
                    $Abort($t17)
                }
                case 3 {
                    // label L0
                    // $t18 := borrow_local($t0)
                    $t18 := $MakePtr(false, _s)
                    // $t19 := borrow_field<M::S>.a($t18)
                    $t19 := $IndexPtr($t18, 32)
                    // $t20 := read_ref($t19)
                    $t20 := $LoadU64($t19)
                    // $t21 := 42
                    $t21 := 42
                    // $t22 := ==($t20, $t21)
                    $t22 := $Eq($t20, $t21)
                    // if ($t22) goto L2 else goto L3
                    switch $t22
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t6 := 42
                    $t6 := 42
                    // $t7 := true
                    $t7 := true
                    // $t3 := M::pack_S($t6, $t7)
                    s := A2_M_pack_S($t6, $t7)
                    // $t8 := copy($t3)
                    $t8 := s
                    // $t9 := M::encode_S($t8)
                    $t9 := A2_M_encode_S($t8)
                    // $t0 := M::decode_S($t9)
                    _s := A2_M_decode_S($t9)
                    // $t10 := borrow_local($t3)
                    $t10 := $MakePtr(false, s)
                    // $t11 := borrow_field<M::S>.a($t10)
                    $t11 := $IndexPtr($t10, 32)
                    // $t12 := read_ref($t11)
                    $t12 := $LoadU64($t11)
                    // $t13 := borrow_local($t0)
                    $t13 := $MakePtr(false, _s)
                    // $t14 := borrow_field<M::S>.a($t13)
                    $t14 := $IndexPtr($t13, 32)
                    // $t15 := read_ref($t14)
                    $t15 := $LoadU64($t14)
                    // $t16 := ==($t12, $t15)
                    $t16 := $Eq($t12, $t15)
                    // if ($t16) goto L0 else goto L1
                    switch $t16
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t23 := 101
                    $t23 := 101
                    // abort($t23)
                    $Abort($t23)
                }
                case 6 {
                    // label L2
                    // $t24 := borrow_local($t3)
                    $t24 := $MakePtr(false, s)
                    // $t25 := borrow_field<M::S>.b($t24)
                    $t25 := $IndexPtr($t24, 40)
                    // $t26 := read_ref($t25)
                    $t26 := $LoadU8($t25)
                    // $t27 := borrow_local($t0)
                    $t27 := $MakePtr(false, _s)
                    // $t28 := borrow_field<M::S>.b($t27)
                    $t28 := $IndexPtr($t27, 40)
                    // $t29 := read_ref($t28)
                    $t29 := $LoadU8($t28)
                    // $t30 := ==($t26, $t29)
                    $t30 := $Eq($t26, $t29)
                    // if ($t30) goto L4 else goto L5
                    switch $t30
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t31 := 102
                    $t31 := 102
                    // abort($t31)
                    $Abort($t31)
                }
                case 8 {
                    // label L4
                    // $t32 := borrow_local($t0)
                    $t32 := $MakePtr(false, _s)
                    // $t33 := borrow_field<M::S>.b($t32)
                    $t33 := $IndexPtr($t32, 40)
                    // $t34 := read_ref($t33)
                    $t34 := $LoadU8($t33)
                    // $t35 := true
                    $t35 := true
                    // $t36 := ==($t34, $t35)
                    $t36 := $Eq($t34, $t35)
                    // if ($t36) goto L6 else goto L7
                    switch $t36
                    case 0  { $block := 9 }
                    default { $block := 10 }
                }
                case 9 {
                    // label L7
                    // $t37 := 103
                    $t37 := 103
                    // abort($t37)
                    $Abort($t37)
                }
                case 10 {
                    // label L6
                    // $t38 := borrow_local($t3)
                    $t38 := $MakePtr(false, s)
                    // $t39 := borrow_field<M::S>.c($t38)
                    $t39 := $t38
                    // $t4 := read_ref($t39)
                    mstore($locals, $LoadU256($t39))
                    if $IsStoragePtr($t39){
                        let $storage_ptr_894856441
                        let $size_894856441 := $StorageLoadU64(mload($locals))
                        let $capacity_894856441 := $ClosestGreaterPowerOfTwo($size_894856441)
                        $storage_ptr_894856441 := $Malloc(add(32, mul($capacity_894856441, 32)))
                        let $data_size_894856441 := mul($size_894856441, 32)
                        mstore($storage_ptr_894856441, $AlignedStorageLoad(mload($locals)))
                        $MemoryStoreU64(add($storage_ptr_894856441, 8), $capacity_894856441)
                        let $data_src_894856441 := add(mload($locals), 32)
                        let $data_dst_894856441 := add($storage_ptr_894856441, 32)
                        for { let $offs_894856441 := 0 } lt($offs_894856441, $data_size_894856441) { $offs_894856441 := add($offs_894856441, 32)} {
                            {
                                let $linked_src_1602512591 := $AlignedStorageLoad(add($data_src_894856441, $offs_894856441))
                                let $linked_dst_1602512591
                                $linked_dst_1602512591 := $Malloc(32)
                                {
                                    let $linked_src_2315022182 := $AlignedStorageLoad(add($linked_src_1602512591, 0))
                                    let $linked_dst_2315022182
                                    let $size_2315022182 := $StorageLoadU64($linked_src_2315022182)
                                    let $capacity_2315022182 := $ClosestGreaterPowerOfTwo($size_2315022182)
                                    $linked_dst_2315022182 := $Malloc(add(32, mul($capacity_2315022182, 16)))
                                    let $data_size_2315022182 := mul($size_2315022182, 16)
                                    mstore($linked_dst_2315022182, $AlignedStorageLoad($linked_src_2315022182))
                                    $MemoryStoreU64(add($linked_dst_2315022182, 8), $capacity_2315022182)
                                    let $data_src_2315022182 := add($linked_src_2315022182, 32)
                                    let $data_dst_2315022182 := add($linked_dst_2315022182, 32)
                                    for { let $offs_2315022182 := 0 } lt($offs_2315022182, $data_size_2315022182) { $offs_2315022182 := add($offs_2315022182, 32)} {
                                        mstore(add($data_dst_2315022182, $offs_2315022182), $AlignedStorageLoad(add($data_src_2315022182, $offs_2315022182)))
                                    }
                                    mstore(add($linked_dst_1602512591, 0), $linked_dst_2315022182)
                                }
                                mstore(add($data_dst_894856441, $offs_894856441), $linked_dst_1602512591)
                            }
                        }
                        mstore($locals, $storage_ptr_894856441)
                    }
                    // $t40 := borrow_local($t0)
                    $t40 := $MakePtr(false, _s)
                    // $t41 := borrow_field<M::S>.c($t40)
                    $t41 := $t40
                    // $t1 := read_ref($t41)
                    mstore(add($locals, 32), $LoadU256($t41))
                    if $IsStoragePtr($t41){
                        let $storage_ptr_894856441
                        let $size_894856441 := $StorageLoadU64(mload(add($locals, 32)))
                        let $capacity_894856441 := $ClosestGreaterPowerOfTwo($size_894856441)
                        $storage_ptr_894856441 := $Malloc(add(32, mul($capacity_894856441, 32)))
                        let $data_size_894856441 := mul($size_894856441, 32)
                        mstore($storage_ptr_894856441, $AlignedStorageLoad(mload(add($locals, 32))))
                        $MemoryStoreU64(add($storage_ptr_894856441, 8), $capacity_894856441)
                        let $data_src_894856441 := add(mload(add($locals, 32)), 32)
                        let $data_dst_894856441 := add($storage_ptr_894856441, 32)
                        for { let $offs_894856441 := 0 } lt($offs_894856441, $data_size_894856441) { $offs_894856441 := add($offs_894856441, 32)} {
                            {
                                let $linked_src_1602512591 := $AlignedStorageLoad(add($data_src_894856441, $offs_894856441))
                                let $linked_dst_1602512591
                                $linked_dst_1602512591 := $Malloc(32)
                                {
                                    let $linked_src_2315022182 := $AlignedStorageLoad(add($linked_src_1602512591, 0))
                                    let $linked_dst_2315022182
                                    let $size_2315022182 := $StorageLoadU64($linked_src_2315022182)
                                    let $capacity_2315022182 := $ClosestGreaterPowerOfTwo($size_2315022182)
                                    $linked_dst_2315022182 := $Malloc(add(32, mul($capacity_2315022182, 16)))
                                    let $data_size_2315022182 := mul($size_2315022182, 16)
                                    mstore($linked_dst_2315022182, $AlignedStorageLoad($linked_src_2315022182))
                                    $MemoryStoreU64(add($linked_dst_2315022182, 8), $capacity_2315022182)
                                    let $data_src_2315022182 := add($linked_src_2315022182, 32)
                                    let $data_dst_2315022182 := add($linked_dst_2315022182, 32)
                                    for { let $offs_2315022182 := 0 } lt($offs_2315022182, $data_size_2315022182) { $offs_2315022182 := add($offs_2315022182, 32)} {
                                        mstore(add($data_dst_2315022182, $offs_2315022182), $AlignedStorageLoad(add($data_src_2315022182, $offs_2315022182)))
                                    }
                                    mstore(add($linked_dst_1602512591, 0), $linked_dst_2315022182)
                                }
                                mstore(add($data_dst_894856441, $offs_894856441), $linked_dst_1602512591)
                            }
                        }
                        mstore(add($locals, 32), $storage_ptr_894856441)
                    }
                    // $t42 := borrow_local($t4)
                    $t42 := $MakePtr(false, $locals)
                    // $t43 := vector::length<M::S2>($t42)
                    $t43 := A1_vector_length$A2_M_S2$($t42)
                    // $t44 := 1
                    $t44 := 1
                    // $t45 := ==($t43, $t44)
                    $t45 := $Eq($t43, $t44)
                    // if ($t45) goto L8 else goto L9
                    switch $t45
                    case 0  { $block := 11 }
                    default { $block := 12 }
                }
                case 11 {
                    // label L9
                    // $t46 := 104
                    $t46 := 104
                    // abort($t46)
                    $Abort($t46)
                }
                case 12 {
                    // label L8
                    // $t47 := borrow_local($t1)
                    $t47 := $MakePtr(false, add($locals, 32))
                    // $t48 := vector::length<M::S2>($t47)
                    $t48 := A1_vector_length$A2_M_S2$($t47)
                    // $t49 := 1
                    $t49 := 1
                    // $t50 := ==($t48, $t49)
                    $t50 := $Eq($t48, $t49)
                    // if ($t50) goto L10 else goto L11
                    switch $t50
                    case 0  { $block := 13 }
                    default { $block := 14 }
                }
                case 13 {
                    // label L11
                    // $t51 := 105
                    $t51 := 105
                    // abort($t51)
                    $Abort($t51)
                }
                case 14 {
                    // label L10
                    // $t52 := borrow_local($t1)
                    $t52 := $MakePtr(false, add($locals, 32))
                    // $t53 := 0
                    $t53 := 0
                    // $t54 := vector::borrow<M::S2>($t52, $t53)
                    $t54 := A1_vector_borrow$A2_M_S2$($t52, $t53)
                    // $t55 := borrow_field<M::S2>.x($t54)
                    $t55 := $t54
                    // $t56 := 0
                    $t56 := 0
                    // $t57 := vector::borrow<u128>($t55, $t56)
                    $t57 := A1_vector_borrow$u128$($t55, $t56)
                    // $t58 := read_ref($t57)
                    $t58 := $LoadU128($t57)
                    // $t59 := 42
                    $t59 := 42
                    // $t60 := ==($t58, $t59)
                    $t60 := $Eq($t58, $t59)
                    // if ($t60) goto L12 else goto L13
                    switch $t60
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 15 {
                    // label L13
                    // $t61 := 106
                    $t61 := 106
                    // abort($t61)
                    $Abort($t61)
                }
                case 16 {
                    // label L12
                    // return ()
                    $Free($locals, 64)
                    leave
                }
            }
        }

        function A1_vector_borrow$u128$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 16)))
        }
        function A1_vector_borrow$A2_M_S2$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
            let e := $LoadU256(e_ptr)
            e_ptr := $MakePtr($IsStoragePtr(v_ref), e)
        }
        function A1_vector_length$A2_M_S2$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_M_decode_S(input) -> $result  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result := abi_decode_tuple_$_uint64_bool__uint128______$_$A2_M_S$_from_memory($t1, $t3)
        }
        function A2_M_encode_S(s) -> $result  {
            $result := mload(0)
            let $t1 := add($result, 32)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t2 := abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$($t1,s)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := sub($t2, $t1)
            $MemoryStoreU64($result, $t3)
            let $t4 := $ClosestGreaterPowerOfTwo($t3)
            $MemoryStoreU64(add($result, 8), $t4)
            mstore(0, $t2)
        }
        function A2_M_pack_S(a, b) -> $result {
            let s2, $t4, $t5, $t6, $t7, $t8
            let $locals := $Malloc(32)
            // $t3 := vector::empty<M::S2>()
            mstore($locals, A1_vector_empty$A2_M_S2$())
            // $t4 := (u128)($t0)
            $t4 := $CastU128(a)
            // $t5 := M::pack_S2($t4)
            $t5 := A2_M_pack_S2($t4)
            // $t6 := borrow_local($t3)
            $t6 := $MakePtr(false, $locals)
            // vector::push_back<M::S2>($t6, $t5)
            A1_vector_push_back$A2_M_S2$($t6, $t5)
            // $t7 := move($t3)
            $t7 := mload($locals)
            // $t8 := pack M::S($t0, $t1, $t7)
            {
                let $mem := $Malloc(41)
                $MemoryStoreU64(add($mem, 32), a)
                $MemoryStoreU8(add($mem, 40), b)
                $MemoryStoreU256(add($mem, 0), $t7)
                $t8 := $mem
            }
            // return $t8
            $result := $t8
            $Free($locals, 32)
        }

        function A1_vector_push_back$A2_M_S2$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_1602512591 := $NewLinkedStorageBase(0x5f8466cf)
                {
                    let $linked_src_2315022182 := mload(add(e, 0))
                    let $linked_dst_2315022182 := $NewLinkedStorageBase(0x89fc6f66)
                    let $size_2315022182 := $MemoryLoadU64($linked_src_2315022182)
                    let $data_size_2315022182 := mul($size_2315022182, 16)
                    $AlignedStorageStore($linked_dst_2315022182, mload($linked_src_2315022182))
                    let $data_src_2315022182 := add($linked_src_2315022182, 32)
                    let $data_dst_2315022182 := add($linked_dst_2315022182, 32)
                    for { let $offs_2315022182 := 0 } lt($offs_2315022182, $data_size_2315022182) { $offs_2315022182 := add($offs_2315022182, 32)} {
                        $AlignedStorageStore(add($data_dst_2315022182, $offs_2315022182), mload(add($data_src_2315022182, $offs_2315022182)))
                        $Free($linked_src_2315022182, add($data_size_2315022182, 32))
                    }
                    $AlignedStorageStore(add($linked_dst_1602512591, 0), $linked_dst_2315022182)
                }
                $Free(e, 32)
                $AlignedStorageStore(e_offs, $linked_dst_1602512591)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_M_pack_S2(x) -> $result {
            let $t2, $t3, $t4
            let $locals := $Malloc(32)
            // $t1 := vector::empty<u128>()
            mstore($locals, A1_vector_empty$u128$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<u128>($t2, $t0)
            A1_vector_push_back$u128$($t2, x)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // $t4 := pack M::S2($t3)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t3)
                $t4 := $mem
            }
            // return $t4
            $result := $t4
            $Free($locals, 32)
        }

        function A1_vector_push_back$u128$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 16)))
            $StoreU128(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 16)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_vector_empty$u128$() -> vector {
            vector := $Malloc(64)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_vector_empty$A2_M_S2$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_encode_tuple_$_uint64_bool__uint128______$_$A2_M_S$(headStart ,value_0) -> tail {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_$uint64_bool__uint128_____$_$A2_M_S$(value_0,  tail)
        }
        function abi_encode_$uint64_bool__uint128_____$_$A2_M_S$(value, pos) -> end {
            let tail := add(pos, 96)
            let value_0 := $MemoryLoadU64(add(value, 32))
            abi_encode_uint64(value_0, add(pos, 0))
            let value_1 := $MemoryLoadU8(add(value, 40))
            abi_encode_bool(value_1, add(pos, 32))
            let value_2 := $MemoryLoadU256(add(value, 0))
            mstore(add(pos, 64), sub(tail, pos))
            tail := abi_encode__uint128______vec$A2_M_S2$(value_2, tail)
            end := tail
        }
        function abi_encode__uint128______vec$A2_M_S2$(value, pos) -> end {
            let length := $MemoryLoadU64(value)
            mstore(pos, length)
            pos := add(pos, 0x20)
            let headStart := pos
            let tail := add(pos, mul(length, 0x20))
            let start := add(value, 32)
            let srcEnd := add(start, mul(length, 32))
            for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
            {
                mstore(pos, sub(tail, headStart))
                let v := $MemoryLoadU256(src)
                tail := abi_encode_$uint128__$_$A2_M_S2$_with_updated_pos(v, tail)
                pos := add(pos, 0x20)
            }
            pos := tail
            end := pos
        }
        function abi_encode_$uint128__$_$A2_M_S2$_with_updated_pos(value, pos) -> updated_pos{
            updated_pos := abi_encode_$uint128__$_$A2_M_S2$(value, pos)
        }
        function abi_encode_$uint128__$_$A2_M_S2$(value, pos) -> end {
            let tail := add(pos, 32)
            let value_0 := $MemoryLoadU256(add(value, 0))
            mstore(add(pos, 0), sub(tail, pos))
            tail := abi_encode_uint128___vec$u128$(value_0, tail)
            end := tail
        }
        function abi_encode_uint128___vec$u128$(value, pos) -> end {
            let length := $MemoryLoadU64(value)
            mstore(pos, length)
            pos := add(pos, 0x20)
            let start := add(value, 32)
            let srcEnd := add(start, mul(length, 16))
            for { let src := start } lt(src, srcEnd) { src := add(src, 16) }
            {
                let v := $MemoryLoadU128(src)
                pos := abi_encode_uint128_with_updated_pos(v, pos)
            }
            end := pos
        }
        function abi_encode_uint128_with_updated_pos(value, pos) -> updated_pos{
            abi_encode_uint128(value, pos)
            updated_pos := add(pos, 32)
        }
        function abi_encode_uint128(value, pos) {
            mstore(pos, cleanup_uint128(value))
        }
        function cleanup_uint128(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
        }
        function abi_encode_bool(value, pos) {
            mstore(pos, cleanup_bool(value))
        }
        function cleanup_bool(value) -> cleaned {
            cleaned := and(value, 0xff)
        }
        function abi_encode_uint64(value, pos) {
            mstore(pos, cleanup_uint64(value))
        }
        function cleanup_uint64(value) -> cleaned {
            cleaned := and(value, 0xffffffffffffffff)
        }
        function abi_decode_tuple_$_uint64_bool__uint128______$_$A2_M_S$_from_memory(headStart, dataEnd) -> value_0 {
            if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
            {
                let offset := mload(add(headStart, 0))
                if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                value_0 := abi_decode_$uint64_bool__uint128_____$_$A2_M_S$_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_$uint64_bool__uint128_____$_$A2_M_S$_from_memory(headStart, end) -> value {
            if slt(sub(end, headStart), 96) { $Abort(90) }
            let value_0, value_1, value_2
            value := $Malloc(96)
            {
                let offset := 0
                value_0 := abi_decode_uint64_from_memory(add(headStart, offset), end)
            }
            $MemoryStoreU64(add(value, 32), value_0)
            {
                let offset := 32
                value_1 := abi_decode_bool_from_memory(add(headStart, offset), end)
            }
            $MemoryStoreU8(add(value, 40), value_1)
            {
                let offset := mload(add(headStart, 64))
                if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                value_2 := abi_decode__uint128______vec$A2_M_S2$_from_memory(add(headStart, offset), end)
            }
            $MemoryStoreU256(add(value, 0), value_2)
        }
        function abi_decode__uint128______vec$A2_M_S2$_from_memory(offset, end) -> array {
            if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
            let length := mload(offset)
            let size := add(mul(32, length), 32)
            array := abi_decode_available_length___uint128______vec$A2_M_S2$_from_memory(add(offset, 0x20), length, size, end)
        }
        function abi_decode_available_length___uint128______vec$A2_M_S2$_from_memory(offset, length, size, end) -> array {
            array := $Malloc($CheckMemorySize(size))
            $MemoryStoreU64(array, length)
            $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
            let dst := add(array, 32)
            let srcEnd := add(offset, mul(length, 32))
            if gt(srcEnd, end) { $Abort(94) }
            for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
            {
                let innerOffset := mload(src)
                if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                let elementPos := add(offset, innerOffset)
                let value := abi_decode_$uint128__$_$A2_M_S2$_from_memory(elementPos, end)
                $MemoryStoreU256(dst, value)
                dst := add(dst, 32)
            }
        }
        function abi_decode_$uint128__$_$A2_M_S2$_from_memory(headStart, end) -> value {
            if slt(sub(end, headStart), 32) { $Abort(90) }
            let value_0
            value := $Malloc(32)
            {
                let offset := mload(add(headStart, 0))
                if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                value_0 := abi_decode_uint128___vec$u128$_from_memory(add(headStart, offset), end)
            }
            $MemoryStoreU256(add(value, 0), value_0)
        }
        function abi_decode_uint128___vec$u128$_from_memory(offset, end) -> array {
            if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
            let length := mload(offset)
            let size := add(mul(16, length), 32)
            array := abi_decode_available_length__uint128___vec$u128$_from_memory(add(offset, 0x20), length, size, end)
        }
        function abi_decode_available_length__uint128___vec$u128$_from_memory(offset, length, size, end) -> array {
            array := $Malloc($CheckMemorySize(size))
            $MemoryStoreU64(array, length)
            $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
            let dst := add(array, 32)
            let srcEnd := add(offset, mul(length, 32))
            if gt(srcEnd, end) { $Abort(94) }
            for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
            {
                let elementPos := src
                let value := abi_decode_uint128_from_memory(elementPos, end)
                $MemoryStoreU128(dst, value)
                dst := add(dst, 16)
            }
        }
        function abi_decode_uint128_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_uint128(value)
        }
        function validator_uint128(value) {
            if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
        }
        function abi_decode_bool_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_bool(value)
        }
        function validator_bool(value) {
            if iszero(eq(value, cleanup_bool(value))) { $Abort(95) }
        }
        function abi_decode_uint64_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_uint64(value)
        }
        function validator_uint64(value) {
            if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $CheckMemorySize(len) -> checked_len {
            if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
            checked_len := len
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU128(x) -> r {
            if gt(x, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_abi_S: Succeed(Stopped) (used_gas=8318): []

// test of M::test_abi_String
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_abi_String" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_abi_String()
        return (0, 0)
        function A2_M_test_abi_String() {
            let _str, end, i, str, v, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37
            let $locals := $Malloc(64)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L5
                    // $t9 := <($t3, $t8)
                    $t9 := $Lt(i, $t8)
                    // if ($t9) goto L0 else goto L2
                    switch $t9
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t7 := 0
                    $t7 := 0
                    // $t3 := $t7
                    i := $t7
                    // $t8 := 128
                    $t8 := 128
                    // $t6 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // goto L5
                    $block := 2
                }
                case 4 {
                    // label L0
                    // $t10 := ascii::is_valid_char($t3)
                    $t10 := A1_ascii_is_valid_char(i)
                    // if ($t10) goto L3 else goto L4
                    switch $t10
                    case 0  { $block := 6 }
                    default { $block := 7 }
                }
                case 5 {
                    // label L2
                    // $t14 := move($t6)
                    $t14 := mload($locals)
                    // $t15 := ascii::string($t14)
                    $t15 := A1_ascii_string($t14)
                    // $t16 := M::encode_String($t15)
                    $t16 := A2_M_encode_String($t15)
                    // $t0 := M::decode_String($t16)
                    _str := A2_M_decode_String($t16)
                    // $t17 := borrow_local($t0)
                    $t17 := $MakePtr(false, _str)
                    // $t18 := ascii::as_bytes($t17)
                    $t18 := A1_ascii_as_bytes($t17)
                    // $t19 := vector::length<u8>($t18)
                    $t19 := A1_vector_length$u8$($t18)
                    // $t20 := 128
                    $t20 := 128
                    // $t21 := ==($t19, $t20)
                    $t21 := $Eq($t19, $t20)
                    // if ($t21) goto L6 else goto L7
                    switch $t21
                    case 0  { $block := 8 }
                    default { $block := 9 }
                }
                case 6 {
                    // label L4
                    // $t11 := 0
                    $t11 := 0
                    // abort($t11)
                    $Abort($t11)
                }
                case 7 {
                    // label L3
                    // $t12 := borrow_local($t6)
                    $t12 := $MakePtr(false, $locals)
                    // vector::push_back<u8>($t12, $t3)
                    A1_vector_push_back$u8$($t12, i)
                    // $t13 := 1
                    $t13 := 1
                    // $t3 := +($t3, $t13)
                    i := $AddU8(i, $t13)
                    // goto L5
                    $block := 2
                }
                case 8 {
                    // label L7
                    // $t22 := 100
                    $t22 := 100
                    // abort($t22)
                    $Abort($t22)
                }
                case 9 {
                    // label L6
                    // $t23 := move($t0)
                    $t23 := _str
                    // $t1 := ascii::into_bytes($t23)
                    mstore(add($locals, 32), A1_ascii_into_bytes($t23))
                    // $t24 := borrow_local($t1)
                    $t24 := $MakePtr(false, add($locals, 32))
                    // $t25 := vector::length<u8>($t24)
                    $t25 := A1_vector_length$u8$($t24)
                    // $t26 := 128
                    $t26 := 128
                    // $t27 := ==($t25, $t26)
                    $t27 := $Eq($t25, $t26)
                    // if ($t27) goto L8 else goto L9
                    switch $t27
                    case 0  { $block := 10 }
                    default { $block := 11 }
                }
                case 10 {
                    // label L9
                    // $t28 := 99
                    $t28 := 99
                    // abort($t28)
                    $Abort($t28)
                }
                case 11 {
                    // label L8
                    // $t29 := 0
                    $t29 := 0
                    // $t3 := $t29
                    i := $t29
                    // goto L15
                    $block := 12
                }
                case 12 {
                    // label L15
                    // $t30 := <($t3, $t8)
                    $t30 := $Lt(i, $t8)
                    // if ($t30) goto L10 else goto L12
                    switch $t30
                    case 0  { $block := 14 }
                    default { $block := 13 }
                }
                case 13 {
                    // label L10
                    // $t31 := borrow_local($t1)
                    $t31 := $MakePtr(false, add($locals, 32))
                    // $t32 := (u64)($t3)
                    $t32 := $CastU64(i)
                    // $t33 := vector::borrow<u8>($t31, $t32)
                    $t33 := A1_vector_borrow$u8$($t31, $t32)
                    // $t34 := read_ref($t33)
                    $t34 := $LoadU8($t33)
                    // $t35 := ==($t34, $t3)
                    $t35 := $Eq($t34, i)
                    // if ($t35) goto L13 else goto L14
                    switch $t35
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 14 {
                    // label L12
                    // return ()
                    $Free($locals, 64)
                    leave
                }
                case 15 {
                    // label L14
                    // $t36 := (u64)($t3)
                    $t36 := $CastU64(i)
                    // abort($t36)
                    $Abort($t36)
                }
                case 16 {
                    // label L13
                    // $t37 := 1
                    $t37 := 1
                    // $t3 := +($t3, $t37)
                    i := $AddU8(i, $t37)
                    // goto L15
                    $block := 12
                }
            }
        }

        function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
        }
        function A1_vector_length$u8$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_ascii_into_bytes(string) -> $result {
            let bytes, $t2
            // $t2 := unpack ascii::String($t0)
            $t2 := $MemoryLoadU256(add(string, 0))
            $Free(string, 32)
            // return $t2
            $result := $t2
        }

        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_ascii_as_bytes(string) -> $result {
            let $t1
            // $t1 := borrow_field<ascii::String>.bytes($t0)
            $t1 := string
            // return $t1
            $result := $t1
        }

        function A2_M_decode_String(input) -> $result  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result := abi_decode_tuple_$_bytes_$_$A1_ascii_String$_from_memory($t1, $t3)
        }
        function A2_M_encode_String(s) -> $result  {
            $result := mload(0)
            let $t1 := add($result, 32)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t2 := abi_encode_tuple_$_bytes_$_$A1_ascii_String$($t1,s)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := sub($t2, $t1)
            $MemoryStoreU64($result, $t3)
            let $t4 := $ClosestGreaterPowerOfTwo($t3)
            $MemoryStoreU64(add($result, 8), $t4)
            mstore(0, $t2)
        }
        function A1_ascii_string(bytes) -> $result {
            let x, $t2, $t3, $t4, $t5, $t6
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t4 := 65536
                    $t4 := 65536
                    // abort($t4)
                    $Abort($t4)
                }
                case 3 {
                    // label L0
                    // $t5 := move($t1)
                    $t5 := x
                    // $t6 := option::destroy_some<ascii::String>($t5)
                    $t6 := A1_option_destroy_some$A1_ascii_String$($t5)
                    // return $t6
                    $result := $t6
                    leave
                }
                case 4 {
                    // $t1 := ascii::try_string($t0)
                    x := A1_ascii_try_string(bytes)
                    // $t2 := borrow_local($t1)
                    $t2 := $MakePtr(false, x)
                    // $t3 := option::is_some<ascii::String>($t2)
                    $t3 := A1_option_is_some$A1_ascii_String$($t2)
                    // if ($t3) goto L0 else goto L1
                    switch $t3
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A1_option_is_some$A1_ascii_String$(t) -> $result {
            let $t1, $t2, $t3
            // $t1 := borrow_field<option::Option<#0>>.vec($t0)
            $t1 := t
            // $t2 := vector::is_empty<#0>($t1)
            $t2 := A1_vector_is_empty$A1_ascii_String$($t1)
            // $t3 := !($t2)
            $t3 := $LogicalNot($t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_is_empty$A1_ascii_String$(v) -> $result {
            let $t1, $t2, $t3
            // $t1 := vector::length<#0>($t0)
            $t1 := A1_vector_length$A1_ascii_String$(v)
            // $t2 := 0
            $t2 := 0
            // $t3 := ==($t1, $t2)
            $t3 := $Eq($t1, $t2)
            // return $t3
            $result := $t3
        }

        function A1_vector_length$A1_ascii_String$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_ascii_try_string(bytes) -> $result {
            let i, len, possible_byte, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17
            let $locals := $Malloc(32)
            mstore($locals, bytes)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L6
                    // assert Le($t1, $t5)
                    // assert forall j: Range(0, $t1): ascii::$is_valid_char(Index($t0, j))
                    // $t7 := <($t1, $t5)
                    $t7 := $Lt(i, $t5)
                    // if ($t7) goto L0 else goto L2
                    switch $t7
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t4 := borrow_local($t0)
                    $t4 := $MakePtr(false, $locals)
                    // $t5 := vector::length<u8>($t4)
                    $t5 := A1_vector_length$u8$($t4)
                    // $t6 := 0
                    $t6 := 0
                    // $t1 := $t6
                    i := $t6
                    // goto L6
                    $block := 2
                }
                case 4 {
                    // label L0
                    // $t8 := borrow_local($t0)
                    $t8 := $MakePtr(false, $locals)
                    // $t9 := vector::borrow<u8>($t8, $t1)
                    $t9 := A1_vector_borrow$u8$($t8, i)
                    // $t10 := read_ref($t9)
                    $t10 := $LoadU8($t9)
                    // $t11 := ascii::is_valid_char($t10)
                    $t11 := A1_ascii_is_valid_char($t10)
                    // $t12 := !($t11)
                    $t12 := $LogicalNot($t11)
                    // if ($t12) goto L3 else goto L5
                    switch $t12
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 5 {
                    // label L2
                    // assert Eq<u64>($t1, $t5)
                    // assert forall j: Range(0, $t5): ascii::$is_valid_char(Index($t0, j))
                    // $t15 := move($t0)
                    $t15 := mload($locals)
                    // $t16 := pack ascii::String($t15)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t15)
                        $t16 := $mem
                    }
                    // $t17 := option::some<ascii::String>($t16)
                    $t17 := A1_option_some$A1_ascii_String$($t16)
                    // return $t17
                    $result := $t17
                    $Free($locals, 32)
                    leave
                }
                case 6 {
                    // label L3
                    // $t13 := option::none<ascii::String>()
                    $t13 := A1_option_none$A1_ascii_String$()
                    // return $t13
                    $result := $t13
                    $Free($locals, 32)
                    leave
                }
                case 7 {
                    // label L5
                    // $t14 := 1
                    $t14 := 1
                    // $t1 := +($t1, $t14)
                    i := $AddU64(i, $t14)
                    // goto L6
                    $block := 2
                }
            }
        }

        function A1_option_none$A1_ascii_String$() -> $result {
            let $t0, $t1
            // $t0 := vector::empty<#0>()
            $t0 := A1_vector_empty$A1_ascii_String$()
            // $t1 := pack option::Option<#0>($t0)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t0)
                $t1 := $mem
            }
            // return $t1
            $result := $t1
        }

        function A1_vector_empty$A1_ascii_String$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A1_option_some$A1_ascii_String$(e) -> $result {
            let $t1, $t2
            // $t1 := vector::singleton<#0>($t0)
            $t1 := A1_vector_singleton$A1_ascii_String$(e)
            // $t2 := pack option::Option<#0>($t1)
            {
                let $mem := $Malloc(32)
                $MemoryStoreU256(add($mem, 0), $t1)
                $t2 := $mem
            }
            // return $t2
            $result := $t2
        }

        function A1_vector_singleton$A1_ascii_String$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$A1_ascii_String$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$A1_ascii_String$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_push_back$A1_ascii_String$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let $linked_dst_57814254 := $NewLinkedStorageBase(0x3722cee)
                {
                    let $linked_src_2300595445 := mload(add(e, 0))
                    let $linked_dst_2300595445 := $NewLinkedStorageBase(0x89204cf5)
                    let $size_2300595445 := $MemoryLoadU64($linked_src_2300595445)
                    let $data_size_2300595445 := mul($size_2300595445, 1)
                    $AlignedStorageStore($linked_dst_2300595445, mload($linked_src_2300595445))
                    let $data_src_2300595445 := add($linked_src_2300595445, 32)
                    let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                    for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                        $AlignedStorageStore(add($data_dst_2300595445, $offs_2300595445), mload(add($data_src_2300595445, $offs_2300595445)))
                        $Free($linked_src_2300595445, add($data_size_2300595445, 32))
                    }
                    $AlignedStorageStore(add($linked_dst_57814254, 0), $linked_dst_2300595445)
                }
                $Free(e, 32)
                $AlignedStorageStore(e_offs, $linked_dst_57814254)
            }
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A1_ascii_is_valid_char(b) -> $result {
            let $t1, $t2
            // $t1 := 127
            $t1 := 127
            // $t2 := <=($t0, $t1)
            $t2 := $LtEq(b, $t1)
            // return $t2
            $result := $t2
        }

        function A1_option_destroy_some$A1_ascii_String$(t) -> $result {
            let elem, $t3, $t4, $t5, $t6, $t7, $t8, $t9
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t5 := 262145
                    $t5 := 262145
                    // abort($t5)
                    $Abort($t5)
                }
                case 3 {
                    // label L0
                    // $t6 := move($t0)
                    $t6 := t
                    // $t2 := unpack option::Option<#0>($t6)
                    mstore($locals, $MemoryLoadU256(add($t6, 0)))
                    $Free($t6, 32)
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := vector::pop_back<#0>($t7)
                    $t8 := A1_vector_pop_back$A1_ascii_String$($t7)
                    // $t9 := move($t2)
                    $t9 := mload($locals)
                    // vector::destroy_empty<#0>($t9)
                    A1_vector_destroy_empty$A1_ascii_String$($t9)
                    // return $t8
                    $result := $t8
                    $Free($locals, 32)
                    leave
                }
                case 4 {
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, t)
                    // $t4 := option::is_some<#0>($t3)
                    $t4 := A1_option_is_some$A1_ascii_String$($t3)
                    // if ($t4) goto L0 else goto L1
                    switch $t4
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A1_vector_destroy_empty$A1_ascii_String$(v) {
            let size := $MemoryLoadU64(v)
            if $LogicalNot(iszero(size)) { $AbortBuiltin() }
            let capacity := $MemoryLoadU64(add(v, 8))
            $Free(v, add(32, mul(capacity, 32)))
        }
        function A1_vector_pop_back$A1_ascii_String$(v_ref) -> e {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if iszero(size) { $AbortBuiltin() }
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
            e := $LoadU256(e_ptr)
            if $IsStoragePtr(e_ptr) {
                let e_offs := $OffsetPtr(e_ptr)
                let linked_src := $AlignedStorageLoad(e_offs)
                e := $Malloc(32)
                {
                    let $linked_src_2300595445 := $AlignedStorageLoad(add(linked_src, 0))
                    let $linked_dst_2300595445
                    let $size_2300595445 := $StorageLoadU64($linked_src_2300595445)
                    let $capacity_2300595445 := $ClosestGreaterPowerOfTwo($size_2300595445)
                    $linked_dst_2300595445 := $Malloc(add(32, mul($capacity_2300595445, 1)))
                    let $data_size_2300595445 := mul($size_2300595445, 1)
                    mstore($linked_dst_2300595445, $AlignedStorageLoad($linked_src_2300595445))
                    $MemoryStoreU64(add($linked_dst_2300595445, 8), $capacity_2300595445)
                    let $data_src_2300595445 := add($linked_src_2300595445, 32)
                    let $data_dst_2300595445 := add($linked_dst_2300595445, 32)
                    for { let $offs_2300595445 := 0 } lt($offs_2300595445, $data_size_2300595445) { $offs_2300595445 := add($offs_2300595445, 32)} {
                        mstore(add($data_dst_2300595445, $offs_2300595445), $AlignedStorageLoad(add($data_src_2300595445, $offs_2300595445)))
                        $AlignedStorageStore(add($data_src_2300595445, $offs_2300595445), 0)
                    }
                    mstore(add(e, 0), $linked_dst_2300595445)
                    $AlignedStorageStore(add(linked_src, 0), 0)
                }
                $AlignedStorageStore(e_offs, 0)
            }
            $StoreU64(v_ptr, sub(size, 1))
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_encode_tuple_$_bytes_$_$A1_ascii_String$(headStart ,value_0) -> tail {
            tail := add(headStart, 32)
            mstore(add(headStart, 0), sub(tail, headStart))
            tail := abi_encode_$bytes$_$A1_ascii_String$(value_0,  tail)
        }
        function abi_encode_$bytes$_$A1_ascii_String$(value, pos) -> end {
            let tail := add(pos, 32)
            let value_0 := $MemoryLoadU256(add(value, 0))
            mstore(add(pos, 0), sub(tail, pos))
            tail := abi_encode_bytes(value_0, tail)
            end := tail
        }
        function abi_encode_bytes(value, pos) -> end{
            let size := $MemoryLoadU64(value)
            mstore(pos, size)
            pos := add(pos, 0x20)
            $CopyMemory(add(value, 0x20), pos, size)
            size := $RoundUp(size)
            end := add(pos, size)
        }
        function abi_decode_tuple_$_bytes_$_$A1_ascii_String$_from_memory(headStart, dataEnd) -> value_0 {
            if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
            {
                let offset := mload(add(headStart, 0))
                if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                value_0 := abi_decode_$bytes$_$A1_ascii_String$_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_$bytes$_$A1_ascii_String$_from_memory(headStart, end) -> value {
            if slt(sub(end, headStart), 32) { $Abort(90) }
            let value_0
            value := $Malloc(32)
            {
                let offset := mload(add(headStart, 0))
                if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                value_0 := abi_decode_bytes_vec$u8$_from_memory(add(headStart, offset), end)
            }
            $MemoryStoreU256(add(value, 0), value_0)
        }
        function abi_decode_bytes_vec$u8$_from_memory(offset, end) -> array {
            if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
            let length := mload(offset)
            let size := add(mul(1, length), 32)
            array := abi_decode_available_length__bytes_from_memory(add(offset, 0x20), length, size, end)
        }
        function abi_decode_available_length__bytes_from_memory(src, length, size, end) -> array {
            array := $Malloc($CheckMemorySize(size))
            $MemoryStoreU64(array, length)
            $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
            let dst := add(array, 32)
            if gt(add(src, sub(size, 32)), end) { $Abort(93) }
            $CopyFromMemoryToMemory(src, dst, length)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $CheckMemorySize(len) -> checked_len {
            if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
            checked_len := len
        }
        function $CopyFromMemoryToMemory(src, dst, length) {
          let i := 0
          for { } lt(i, length) { i := add(i, 32) }
          {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if gt(i, length)
          {
            // clear end
            mstore(add(dst, length), 0)
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $AddU8(x, y) -> r {
            if lt(sub(0xff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Lt(x, y) -> r {
            r := lt(x, y)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $LtEq(x, y) -> r {
            r := or(lt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU64(x) -> r {
            if gt(x, 0xffffffffffffffff) { $AbortBuiltin() }
            r := x
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
        function $RoundUp(value) -> result {
            result := and(add(value, 31), not(31))
        }
    }
}
===> Test result of M::test_abi_String: Succeed(Stopped) (used_gas=435789): []
