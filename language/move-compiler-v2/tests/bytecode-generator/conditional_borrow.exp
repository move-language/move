// -- Model dump before bytecode pipeline
module 0x8675::M {
    struct S {
        f: u64,
    }
    public fun test(): u64 {
        Add<u64>(M::test1(7), M::test1(2))
    }
    private fun test1(r: u64): u64 {
        {
          let x: u64 = 3;
          {
            let tref: &mut u64 = Borrow(Mutable)(if Lt<u64>(r, 4) {
              r
            } else {
              x
            });
            tref = 10;
            {
              let y: u64 = r;
              {
                let tref2: &mut u64 = Borrow(Mutable)(y);
                tref2 = Add<u64>(Deref(tref2), 1);
                {
                  let z: u64 = y;
                  {
                    let tref3: &mut u64 = Borrow(Mutable)(Add<u64>(z, 0));
                    tref3 = Add<u64>(Deref(tref3), 2);
                    {
                      let a: u64 = z;
                      {
                        let tref4: &mut u64 = Borrow(Mutable)({
                          let _q: u64 = 1;
                          a
                        });
                        tref4 = Add<u64>(Deref(tref4), 4);
                        {
                          let tref5: &mut u64 = Borrow(Mutable)(a);
                          tref5 = Add<u64>(Deref(tref5), 8);
                          {
                            let tref6: &mut u64 = Borrow(Mutable)(3;
                            a);
                            tref6 = Add<u64>(Deref(tref6), 16);
                            a
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    private fun test1b(r: M::S): u64 {
        {
          let x: M::S = pack M::S(3);
          {
            let tref: &mut M::S = Borrow(Mutable)(if Lt<u64>(select M::S.f(r), 4) {
              r
            } else {
              x
            });
            select M::S.f(Deref(tref)) = 10;
            {
              let y: M::S = r;
              {
                let tref2: &mut M::S = Borrow(Mutable)(y);
                select M::S.f(Deref(tref2)) = Add<u64>(select M::S.f(Deref(tref2)), 1);
                {
                  let z: M::S = y;
                  {
                    let tref3: &mut u64 = Borrow(Mutable)(select M::S.f(z));
                    tref3 = Add<u64>(Deref(tref3), 1);
                    {
                      let a: M::S = z;
                      {
                        let tref4: &mut u64 = Borrow(Mutable)({
                          let _q: u64 = 1;
                          select M::S.f(a)
                        });
                        tref4 = Add<u64>(Deref(tref4), 1);
                        {
                          let tref5: &mut u64 = Borrow(Mutable)(select M::S.f(a));
                          tref5 = Add<u64>(Deref(tref5), 8);
                          {
                            let tref6: &mut u64 = Borrow(Mutable)(3;
                            select M::S.f(a));
                            tref6 = Add<u64>(Deref(tref6), 16);
                            select M::S.f(a)
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
    }
    public fun testb(): u64 {
        Add<u64>(M::test1b(pack M::S(7)), M::test1b(pack M::S(2)))
    }
    spec fun $test(): u64;
    spec fun $test1(r: u64): u64;
    spec fun $test1b(r: M::S): u64;
    spec fun $testb(): u64;
} // end 0x8675::M

============ initial bytecode ================

[variant baseline]
public fun M::test(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
  0: $t2 := 7
  1: $t1 := M::test1($t2)
  2: $t4 := 2
  3: $t3 := M::test1($t4)
  4: $t0 := +($t1, $t3)
  5: return $t0
}


[variant baseline]
fun M::test1($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: u64
     var $t7: bool
     var $t8: u64
     var $t9: u64
     var $t10: u64
     var $t11: &mut u64
     var $t12: &mut u64
     var $t13: u64
     var $t14: u64
     var $t15: u64
     var $t16: u64
     var $t17: &mut u64
     var $t18: &mut u64
     var $t19: u64
     var $t20: u64
     var $t21: u64
     var $t22: u64
     var $t23: u64
     var $t24: u64
     var $t25: &mut u64
     var $t26: &mut u64
     var $t27: u64
     var $t28: u64
     var $t29: u64
     var $t30: u64
     var $t31: u64
     var $t32: u64
     var $t33: &mut u64
     var $t34: &mut u64
     var $t35: u64
     var $t36: u64
     var $t37: u64
     var $t38: u64
     var $t39: &mut u64
     var $t40: &mut u64
     var $t41: u64
     var $t42: u64
     var $t43: u64
     var $t44: u64
     var $t45: u64
  0: $t3 := 3
  1: $t2 := infer($t3)
  2: $t8 := 4
  3: $t7 := <($t0, $t8)
  4: if ($t7) goto 5 else goto 8
  5: label L0
  6: $t6 := infer($t0)
  7: goto 10
  8: label L1
  9: $t6 := infer($t2)
 10: label L2
 11: $t5 := borrow_local($t6)
 12: $t4 := infer($t5)
 13: $t9 := 10
 14: write_ref($t4, $t9)
 15: $t10 := infer($t0)
 16: $t12 := borrow_local($t10)
 17: $t11 := infer($t12)
 18: $t14 := read_ref($t11)
 19: $t15 := 1
 20: $t13 := +($t14, $t15)
 21: write_ref($t11, $t13)
 22: $t16 := infer($t10)
 23: $t20 := 0
 24: $t19 := +($t16, $t20)
 25: $t18 := borrow_local($t19)
 26: $t17 := infer($t18)
 27: $t22 := read_ref($t17)
 28: $t23 := 2
 29: $t21 := +($t22, $t23)
 30: write_ref($t17, $t21)
 31: $t24 := infer($t16)
 32: $t29 := 1
 33: $t28 := infer($t29)
 34: $t27 := infer($t24)
 35: $t26 := borrow_local($t27)
 36: $t25 := infer($t26)
 37: $t31 := read_ref($t25)
 38: $t32 := 4
 39: $t30 := +($t31, $t32)
 40: write_ref($t25, $t30)
 41: $t35 := infer($t24)
 42: $t34 := borrow_local($t35)
 43: $t33 := infer($t34)
 44: $t37 := read_ref($t33)
 45: $t38 := 8
 46: $t36 := +($t37, $t38)
 47: write_ref($t33, $t36)
 48: $t42 := 3
 49: $t41 := infer($t24)
 50: $t40 := borrow_local($t41)
 51: $t39 := infer($t40)
 52: $t44 := read_ref($t39)
 53: $t45 := 16
 54: $t43 := +($t44, $t45)
 55: write_ref($t39, $t43)
 56: $t1 := infer($t24)
 57: return $t1
}


[variant baseline]
fun M::test1b($t0: M::S): u64 {
     var $t1: u64
     var $t2: M::S
     var $t3: M::S
     var $t4: u64
     var $t5: &mut M::S
     var $t6: &mut M::S
     var $t7: M::S
     var $t8: bool
     var $t9: u64
     var $t10: &M::S
     var $t11: &u64
     var $t12: u64
     var $t13: u64
     var $t14: &mut u64
     var $t15: M::S
     var $t16: &mut M::S
     var $t17: M::S
     var $t18: &mut M::S
     var $t19: &mut M::S
     var $t20: u64
     var $t21: u64
     var $t22: M::S
     var $t23: &M::S
     var $t24: &u64
     var $t25: u64
     var $t26: &mut u64
     var $t27: M::S
     var $t28: &mut M::S
     var $t29: M::S
     var $t30: &mut u64
     var $t31: &mut u64
     var $t32: &mut M::S
     var $t33: u64
     var $t34: u64
     var $t35: u64
     var $t36: M::S
     var $t37: &mut u64
     var $t38: &mut u64
     var $t39: u64
     var $t40: u64
     var $t41: u64
     var $t42: &M::S
     var $t43: &u64
     var $t44: u64
     var $t45: u64
     var $t46: u64
     var $t47: &mut u64
     var $t48: &mut u64
     var $t49: u64
     var $t50: &M::S
     var $t51: &u64
     var $t52: u64
     var $t53: u64
     var $t54: u64
     var $t55: &mut u64
     var $t56: &mut u64
     var $t57: u64
     var $t58: u64
     var $t59: &M::S
     var $t60: &u64
     var $t61: u64
     var $t62: u64
     var $t63: u64
     var $t64: &M::S
     var $t65: &u64
  0: $t4 := 3
  1: $t3 := pack M::S($t4)
  2: $t2 := infer($t3)
  3: $t10 := borrow_local($t0)
  4: $t11 := borrow_field<M::S>.f($t10)
  5: $t9 := read_ref($t11)
  6: $t12 := 4
  7: $t8 := <($t9, $t12)
  8: if ($t8) goto 9 else goto 12
  9: label L0
 10: $t7 := infer($t0)
 11: goto 14
 12: label L1
 13: $t7 := infer($t2)
 14: label L2
 15: $t6 := borrow_local($t7)
 16: $t5 := infer($t6)
 17: $t13 := 10
 18: $t15 := read_ref($t5)
 19: $t16 := borrow_local($t15)
 20: $t14 := borrow_field<M::S>.f($t16)
 21: write_ref($t14, $t13)
 22: $t17 := infer($t0)
 23: $t19 := borrow_local($t17)
 24: $t18 := infer($t19)
 25: $t22 := read_ref($t18)
 26: $t23 := borrow_local($t22)
 27: $t24 := borrow_field<M::S>.f($t23)
 28: $t21 := read_ref($t24)
 29: $t25 := 1
 30: $t20 := +($t21, $t25)
 31: $t27 := read_ref($t18)
 32: $t28 := borrow_local($t27)
 33: $t26 := borrow_field<M::S>.f($t28)
 34: write_ref($t26, $t20)
 35: $t29 := infer($t17)
 36: $t32 := borrow_local($t29)
 37: $t31 := borrow_field<M::S>.f($t32)
 38: $t30 := infer($t31)
 39: $t34 := read_ref($t30)
 40: $t35 := 1
 41: $t33 := +($t34, $t35)
 42: write_ref($t30, $t33)
 43: $t36 := infer($t29)
 44: $t41 := 1
 45: $t40 := infer($t41)
 46: $t42 := borrow_local($t36)
 47: $t43 := borrow_field<M::S>.f($t42)
 48: $t39 := read_ref($t43)
 49: $t38 := borrow_local($t39)
 50: $t37 := infer($t38)
 51: $t45 := read_ref($t37)
 52: $t46 := 1
 53: $t44 := +($t45, $t46)
 54: write_ref($t37, $t44)
 55: $t50 := borrow_local($t36)
 56: $t51 := borrow_field<M::S>.f($t50)
 57: $t49 := read_ref($t51)
 58: $t48 := borrow_local($t49)
 59: $t47 := infer($t48)
 60: $t53 := read_ref($t47)
 61: $t54 := 8
 62: $t52 := +($t53, $t54)
 63: write_ref($t47, $t52)
 64: $t58 := 3
 65: $t59 := borrow_local($t36)
 66: $t60 := borrow_field<M::S>.f($t59)
 67: $t57 := read_ref($t60)
 68: $t56 := borrow_local($t57)
 69: $t55 := infer($t56)
 70: $t62 := read_ref($t55)
 71: $t63 := 16
 72: $t61 := +($t62, $t63)
 73: write_ref($t55, $t61)
 74: $t64 := borrow_local($t36)
 75: $t65 := borrow_field<M::S>.f($t64)
 76: $t1 := read_ref($t65)
 77: return $t1
}


[variant baseline]
public fun M::testb(): u64 {
     var $t0: u64
     var $t1: u64
     var $t2: M::S
     var $t3: u64
     var $t4: u64
     var $t5: M::S
     var $t6: u64
  0: $t3 := 7
  1: $t2 := pack M::S($t3)
  2: $t1 := M::test1b($t2)
  3: $t6 := 2
  4: $t5 := pack M::S($t6)
  5: $t4 := M::test1b($t5)
  6: $t0 := +($t1, $t4)
  7: return $t0
}
