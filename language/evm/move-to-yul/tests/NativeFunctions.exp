/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_NativeFunctions" {
    code {
        codecopy(0, dataoffset("A2_NativeFunctions_deployed"), datasize("A2_NativeFunctions_deployed"))
        return(0, datasize("A2_NativeFunctions_deployed"))
    }
    object "A2_NativeFunctions_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x90b6bab2
                {
                    // call_native_functions()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_NativeFunctions_call_native_functions()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_NativeFunctions_call_native_functions() {
                let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                // $t0 := U256::one()
                $t0 := A2_U256_one()
                // $t1 := Evm::blockhash($t0)
                $t1 := A2_Evm_blockhash($t0)
                // destroy($t1)
                // $t2 := Evm::block_basefee()
                $t2 := A2_Evm_block_basefee()
                // destroy($t2)
                $Free($t2, 0)
                // $t3 := Evm::block_chainid()
                $t3 := A2_Evm_block_chainid()
                // destroy($t3)
                $Free($t3, 0)
                // $t4 := Evm::block_coinbase()
                $t4 := A2_Evm_block_coinbase()
                // destroy($t4)
                // $t5 := Evm::block_difficulty()
                $t5 := A2_Evm_block_difficulty()
                // destroy($t5)
                $Free($t5, 0)
                // $t6 := Evm::block_gaslimit()
                $t6 := A2_Evm_block_gaslimit()
                // destroy($t6)
                $Free($t6, 0)
                // $t7 := Evm::block_number()
                $t7 := A2_Evm_block_number()
                // destroy($t7)
                $Free($t7, 0)
                // $t8 := Evm::block_timestamp()
                $t8 := A2_Evm_block_timestamp()
                // destroy($t8)
                $Free($t8, 0)
                // $t9 := Evm::gasleft()
                $t9 := A2_Evm_gasleft()
                // destroy($t9)
                $Free($t9, 0)
                // $t10 := Evm::msg_data()
                $t10 := A2_Evm_msg_data()
                // destroy($t10)
                // $t11 := Evm::msg_sender()
                $t11 := A2_Evm_msg_sender()
                // destroy($t11)
                // $t12 := Evm::msg_sig()
                $t12 := A2_Evm_msg_sig()
                // destroy($t12)
                // $t13 := Evm::msg_value()
                $t13 := A2_Evm_msg_value()
                // destroy($t13)
                $Free($t13, 0)
                // $t14 := Evm::tx_gasprice()
                $t14 := A2_Evm_tx_gasprice()
                // destroy($t14)
                $Free($t14, 0)
                // $t15 := Evm::tx_origin()
                $t15 := A2_Evm_tx_origin()
                // destroy($t15)
                // return ()
            }

            function A2_Evm_tx_origin() -> result {
              result := origin()
            }
            function A2_Evm_tx_gasprice() -> result {
              result := gasprice()
            }
            function A2_Evm_msg_value() -> result {
              result := callvalue()
            }
            function A2_Evm_msg_sig() -> result {
              result := timestamp()
            }
            function A2_Evm_msg_sender() -> result {
              result := caller()
            }
            function A2_Evm_msg_data() -> result {
              result := calldataload(0)
            }
            function A2_Evm_gasleft() -> result {
              result := gas()
            }
            function A2_Evm_block_timestamp() -> result {
              result := timestamp()
            }
            function A2_Evm_block_number() -> result {
              result := number()
            }
            function A2_Evm_block_gaslimit() -> result {
              result := gaslimit()
            }
            function A2_Evm_block_difficulty() -> result {
              result := difficulty()
            }
            function A2_Evm_block_coinbase() -> result {
              result := coinbase()
            }
            function A2_Evm_block_chainid() -> result {
              result := chainid()
            }
            function A2_Evm_block_basefee() -> result {
              result := basefee()
            }
            function A2_Evm_blockhash(block_number) -> hash {
              hash := blockhash(block_number)
            }
            function A2_U256_one() -> $result {
                let $t0
                // $t0 := 1
                $t0 := 1
                // return $t0
                $result := $t0
            }

            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Free(offs, size) {
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of NativeFunctions::test_abort
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_NativeFunctions_test_abort" {
    code {
        mstore(0, memoryguard(160))
        A2_NativeFunctions_test_abort()
        return (0, 0)
        function A2_NativeFunctions_test_abort() {
            let $t0
            // $t0 := [101, 114, 114, 111, 114, 32, 109, 101, 115, 115, 97, 103, 101]
            $t0 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(13)))
            $MemoryStoreU64($t0, 13)
            $MemoryStoreU64(add($t0, 8), $ClosestGreaterPowerOfTwo(13))
            copy_literal_string_to_memory_1627894131(add($t0, 32))
            // Evm::abort_with($t0)
            A2_Evm_abort_with($t0)
            // return ()
        }

        function A2_Evm_abort_with(message) {
          let head := $Malloc(32)
          // store the function selector for Error(string)
          mstore(head, 3963877391197344453575983046348115674221700746820753546331534351508065746944)
          let pos := add(head, 4)
          mstore(pos, 32)
          pos := add(pos, 32)
          let size := $MemoryLoadU64(message)
          mstore(pos, size)
          pos := add(pos, 32)
          $CopyMemory(add(message, 32), pos, size)
          size := $RoundUp(size)
          let end := add(pos, size)
          revert(head, sub(end, head))
        }
        function copy_literal_string_to_memory_1627894131(value) {
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
            $MemoryStoreU8(value, 114)
            value := add(value, 1)
            $MemoryStoreU8(value, 114)
            value := add(value, 1)
            $MemoryStoreU8(value, 111)
            value := add(value, 1)
            $MemoryStoreU8(value, 114)
            value := add(value, 1)
            $MemoryStoreU8(value, 32)
            value := add(value, 1)
            $MemoryStoreU8(value, 109)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
            $MemoryStoreU8(value, 115)
            value := add(value, 1)
            $MemoryStoreU8(value, 115)
            value := add(value, 1)
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 103)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
        function $RoundUp(value) -> result {
            result := and(add(value, 31), not(31))
        }
    }
}
===> Test result of NativeFunctions::test_abort: Revert(Reverted) (used_gas=696): [8, 195, 121, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 101, 114, 114, 111, 114, 32, 109, 101, 115, 115, 97, 103, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

// test of NativeFunctions::test_concat
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_NativeFunctions_test_concat" {
    code {
        mstore(0, memoryguard(160))
        A2_NativeFunctions_test_concat()
        return (0, 0)
        function A2_NativeFunctions_test_concat() {
            let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 100
                    $t5 := 100
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := []
                    $t0 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t0, 0)
                    $MemoryStoreU64(add($t0, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t0, 32))
                    // $t1 := []
                    $t1 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t1, 0)
                    $MemoryStoreU64(add($t1, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t1, 32))
                    // $t2 := Evm::concat($t0, $t1)
                    $t2 := A2_Evm_concat($t0, $t1)
                    // $t3 := []
                    $t3 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t3, 0)
                    $MemoryStoreU64(add($t3, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t3, 32))
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq_$vec$u8$$($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := [49]
                    $t6 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t6, 1)
                    $MemoryStoreU64(add($t6, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_2868747976(add($t6, 32))
                    // $t7 := [50]
                    $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t7, 1)
                    $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_4015750317(add($t7, 32))
                    // $t8 := Evm::concat($t6, $t7)
                    $t8 := A2_Evm_concat($t6, $t7)
                    // $t9 := [49, 50]
                    $t9 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t9, 2)
                    $MemoryStoreU64(add($t9, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_141265791(add($t9, 32))
                    // $t10 := ==($t8, $t9)
                    $t10 := $Eq_$vec$u8$$($t8, $t9)
                    // if ($t10) goto L4 else goto L3
                    switch $t10
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t11 := 101
                    $t11 := 101
                    // abort($t11)
                    $Abort($t11)
                }
                case 8 {
                    // label L5
                    // $t12 := []
                    $t12 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t12, 0)
                    $MemoryStoreU64(add($t12, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t12, 32))
                    // $t13 := [97, 98, 99]
                    $t13 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t13, 3)
                    $MemoryStoreU64(add($t13, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t13, 32))
                    // $t14 := Evm::concat($t12, $t13)
                    $t14 := A2_Evm_concat($t12, $t13)
                    // $t15 := [97, 98, 99]
                    $t15 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t15, 3)
                    $MemoryStoreU64(add($t15, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t15, 32))
                    // $t16 := ==($t14, $t15)
                    $t16 := $Eq_$vec$u8$$($t14, $t15)
                    // if ($t16) goto L7 else goto L6
                    switch $t16
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t17 := 102
                    $t17 := 102
                    // abort($t17)
                    $Abort($t17)
                }
                case 11 {
                    // label L8
                    // $t18 := [97]
                    $t18 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t18, 1)
                    $MemoryStoreU64(add($t18, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_371573306(add($t18, 32))
                    // $t19 := [98, 99]
                    $t19 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t19, 2)
                    $MemoryStoreU64(add($t19, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_3119208230(add($t19, 32))
                    // $t20 := Evm::concat($t18, $t19)
                    $t20 := A2_Evm_concat($t18, $t19)
                    // $t21 := [100, 101]
                    $t21 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t21, 2)
                    $MemoryStoreU64(add($t21, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_1933910203(add($t21, 32))
                    // $t22 := Evm::concat($t20, $t21)
                    $t22 := A2_Evm_concat($t20, $t21)
                    // $t23 := [97, 98, 99, 100, 101]
                    $t23 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(5)))
                    $MemoryStoreU64($t23, 5)
                    $MemoryStoreU64(add($t23, 8), $ClosestGreaterPowerOfTwo(5))
                    copy_literal_string_to_memory_3871831907(add($t23, 32))
                    // $t24 := ==($t22, $t23)
                    $t24 := $Eq_$vec$u8$$($t22, $t23)
                    // if ($t24) goto L10 else goto L9
                    switch $t24
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t25 := 103
                    $t25 := 103
                    // abort($t25)
                    $Abort($t25)
                }
                case 14 {
                    // label L11
                    // $t26 := [116, 101, 115, 116]
                    $t26 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t26, 4)
                    $MemoryStoreU64(add($t26, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_1610556060(add($t26, 32))
                    // $t27 := []
                    $t27 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t27, 0)
                    $MemoryStoreU64(add($t27, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t27, 32))
                    // $t28 := Evm::concat($t26, $t27)
                    $t28 := A2_Evm_concat($t26, $t27)
                    // $t29 := [116, 101, 115, 116]
                    $t29 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t29, 4)
                    $MemoryStoreU64(add($t29, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_1610556060(add($t29, 32))
                    // $t30 := ==($t28, $t29)
                    $t30 := $Eq_$vec$u8$$($t28, $t29)
                    // if ($t30) goto L13 else goto L12
                    switch $t30
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t31 := 104
                    $t31 := 104
                    // abort($t31)
                    $Abort($t31)
                }
                case 17 {
                    // label L14
                    // return ()
                    leave
                }
            }
        }

        function A2_Evm_concat(s1, s2) -> result {
                          result := $ExtendVector(s1, s2, 1)
                        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function copy_literal_string_to_memory_1610556060(value) {
            $MemoryStoreU8(value, 116)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
            $MemoryStoreU8(value, 115)
            value := add(value, 1)
            $MemoryStoreU8(value, 116)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_21418693(value) {
        }
        function copy_literal_string_to_memory_3871831907(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
            $MemoryStoreU8(value, 100)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_1933910203(value) {
            $MemoryStoreU8(value, 100)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_3119208230(value) {
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_371573306(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2053440334(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_141265791(value) {
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_4015750317(value) {
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2868747976(value) {
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
        function $ExtendVector(v1, v2, elem_size) -> new_v1 {
          let v1_len := $MemoryLoadU64(v1)
          let v2_len := $MemoryLoadU64(v2)
          let new_len := add(v1_len, v2_len)
          let v1_cap := $MemoryLoadU64(add(v1, 8))
          new_v1 := v1
          if iszero(gt(v1_cap, new_len)){
            let new_cap := $ClosestGreaterPowerOfTwo(new_len)
            new_v1 := $Malloc(add(mul(new_cap, elem_size), 32))
            $CopyMemory(v1, new_v1, add(mul(v1_len, elem_size), 32))
            $MemoryStoreU64(add(new_v1, 8), new_cap)
            $Free(v1, add(mul(v1_len, elem_size), 32))
          }
          let src := add(v2, 32)
          let dst := add(add(new_v1, 32), mul(elem_size, v1_len))
          $CopyMemory(src, dst, mul(v2_len, elem_size))
          $MemoryStoreU64(new_v1, new_len)
        }
    }
}
===> Test result of NativeFunctions::test_concat: Succeed(Stopped) (used_gas=10872): []

// test of NativeFunctions::test_signer_address_of
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_NativeFunctions_test_signer_address_of" {
    code {
        mstore(0, memoryguard(160))
        A2_NativeFunctions_test_signer_address_of()
        return (0, 0)
        function A2_NativeFunctions_test_signer_address_of() {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t6 := 101
                    $t6 := 101
                    // abort($t6)
                    $Abort($t6)
                }
                case 4 {
                    // $t1 := 0x42
                    $t1 := 0x42
                    // $t0 := Evm::sign($t1)
                    mstore($locals, A2_Evm_sign($t1))
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, $locals)
                    // $t3 := signer::address_of($t2)
                    $t3 := A1_signer_address_of($t2)
                    // $t4 := 0x42
                    $t4 := 0x42
                    // $t5 := ==($t3, $t4)
                    $t5 := $Eq($t3, $t4)
                    // if ($t5) goto L1 else goto L0
                    switch $t5
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_signer_address_of(s) -> $result {
            let $t1, $t2
            // $t1 := signer::borrow_address($t0)
            $t1 := A1_signer_borrow_address(s)
            // $t2 := read_ref($t1)
            $t2 := $LoadU256($t1)
            // return $t2
            $result := $t2
        }

        function A1_signer_borrow_address(signer_ref) -> addr_ref {
          addr_ref := signer_ref
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of NativeFunctions::test_signer_address_of: Succeed(Stopped) (used_gas=431): []

// test of NativeFunctions::test_to_string
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_NativeFunctions_test_to_string" {
    code {
        mstore(0, memoryguard(160))
        A2_NativeFunctions_test_to_string()
        return (0, 0)
        function A2_NativeFunctions_test_to_string() {
            let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t4 := 101
                    $t4 := 101
                    // abort($t4)
                    $Abort($t4)
                }
                case 4 {
                    // $t0 := U256::zero()
                    $t0 := A2_U256_zero()
                    // $t1 := Evm::to_string($t0)
                    $t1 := A2_Evm_to_string($t0)
                    // $t2 := [48]
                    $t2 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t2, 1)
                    $MemoryStoreU64(add($t2, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_2991736836(add($t2, 32))
                    // $t3 := ==($t1, $t2)
                    $t3 := $Eq_$vec$u8$$($t1, $t2)
                    // if ($t3) goto L1 else goto L0
                    switch $t3
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t5 := U256::one()
                    $t5 := A2_U256_one()
                    // $t6 := Evm::to_string($t5)
                    $t6 := A2_Evm_to_string($t5)
                    // $t7 := [49]
                    $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t7, 1)
                    $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_2868747976(add($t7, 32))
                    // $t8 := ==($t6, $t7)
                    $t8 := $Eq_$vec$u8$$($t6, $t7)
                    // if ($t8) goto L4 else goto L3
                    switch $t8
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t9 := 102
                    $t9 := 102
                    // abort($t9)
                    $Abort($t9)
                }
                case 8 {
                    // label L5
                    // $t10 := 42
                    $t10 := 42
                    // $t11 := U256::u256_from_u128($t10)
                    $t11 := A2_U256_u256_from_u128($t10)
                    // $t12 := Evm::to_string($t11)
                    $t12 := A2_Evm_to_string($t11)
                    // $t13 := [52, 50]
                    $t13 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t13, 2)
                    $MemoryStoreU64(add($t13, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_402108876(add($t13, 32))
                    // $t14 := ==($t12, $t13)
                    $t14 := $Eq_$vec$u8$$($t12, $t13)
                    // if ($t14) goto L7 else goto L6
                    switch $t14
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t15 := 103
                    $t15 := 103
                    // abort($t15)
                    $Abort($t15)
                }
                case 11 {
                    // label L8
                    // $t16 := 7008
                    $t16 := 7008
                    // $t17 := U256::u256_from_u128($t16)
                    $t17 := A2_U256_u256_from_u128($t16)
                    // $t18 := Evm::to_string($t17)
                    $t18 := A2_Evm_to_string($t17)
                    // $t19 := [55, 48, 48, 56]
                    $t19 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t19, 4)
                    $MemoryStoreU64(add($t19, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_2919365730(add($t19, 32))
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq_$vec$u8$$($t18, $t19)
                    // if ($t20) goto L10 else goto L9
                    switch $t20
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t21 := 104
                    $t21 := 104
                    // abort($t21)
                    $Abort($t21)
                }
                case 14 {
                    // label L11
                    // $t22 := 340282366920938463463374607431768211458
                    $t22 := 340282366920938463463374607431768211458
                    // $t23 := Evm::to_string($t22)
                    $t23 := A2_Evm_to_string($t22)
                    // $t24 := [51, 52, 48, 50, 56, 50, 51, 54, 54, 57, 50, 48, 57, 51, 56, 52, 54, 51, 52, 54, 51, 51, 55, 52, 54, 48, 55, 52, 51, 49, 55, 54, 56, 50, 49, 49, 52, 53, 56]
                    $t24 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(39)))
                    $MemoryStoreU64($t24, 39)
                    $MemoryStoreU64(add($t24, 8), $ClosestGreaterPowerOfTwo(39))
                    copy_literal_string_to_memory_767927084(add($t24, 32))
                    // $t25 := ==($t23, $t24)
                    $t25 := $Eq_$vec$u8$$($t23, $t24)
                    // if ($t25) goto L13 else goto L12
                    switch $t25
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t26 := 105
                    $t26 := 105
                    // abort($t26)
                    $Abort($t26)
                }
                case 17 {
                    // label L14
                    // return ()
                    leave
                }
            }
        }

        function A2_Evm_to_string(x) -> result {
                          result := $NumToString(x)
                        }
        function A2_U256_u256_from_u128(lo) -> $result {
            let $t1, $t2
            // $t1 := 0
            $t1 := 0
            // $t2 := (u256)($t1, $t0)
            $t2 := $CastU256($t1, lo)
            // return $t2
            $result := $t2
        }

        function A2_U256_one() -> $result {
            let $t0
            // $t0 := 1
            $t0 := 1
            // return $t0
            $result := $t0
        }

        function A2_U256_zero() -> $result {
            let $t0
            // $t0 := 0
            $t0 := 0
            // return $t0
            $result := $t0
        }

        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function copy_literal_string_to_memory_767927084(value) {
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
            $MemoryStoreU8(value, 56)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 57)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
            $MemoryStoreU8(value, 57)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 56)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 55)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
            $MemoryStoreU8(value, 55)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 51)
            value := add(value, 1)
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
            $MemoryStoreU8(value, 55)
            value := add(value, 1)
            $MemoryStoreU8(value, 54)
            value := add(value, 1)
            $MemoryStoreU8(value, 56)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 53)
            value := add(value, 1)
            $MemoryStoreU8(value, 56)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2919365730(value) {
            $MemoryStoreU8(value, 55)
            value := add(value, 1)
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
            $MemoryStoreU8(value, 56)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_402108876(value) {
            $MemoryStoreU8(value, 52)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2868747976(value) {
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2991736836(value) {
            $MemoryStoreU8(value, 48)
            value := add(value, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $CastU256(hi, lo) -> r {
            if gt(hi, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            if gt(lo, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
            r := add(shl(128, hi), lo)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
        function $NumToString(x) -> s {
          if iszero(x) {
            s := $Malloc(add(32, 2))
            $MemoryStoreU64(s, 1)
            $MemoryStoreU64(add(s, 8), 2)
            $MemoryStoreU8(add(s, 32), 48) // string "0"
            leave
          }
          let temp := x
          let num_digits := 0
          for { } temp { num_digits := add(num_digits, 1) } {
            temp := div(temp, 10)
          }
          let digits_space := $ClosestGreaterPowerOfTwo(num_digits)
          s := $Malloc(add(32, digits_space))
          $MemoryStoreU64(s, num_digits)
          $MemoryStoreU64(add(s, 8), digits_space)
          let digit
          for { } x { } {
            digit := add(48, mod(x, 10))
            num_digits := sub(num_digits, 1)
            $MemoryStoreU8(add(add(s, 32), num_digits), digit)
            x := div(x, 10)
          }
        }
    }
}
===> Test result of NativeFunctions::test_to_string: Succeed(Stopped) (used_gas=13241): []
