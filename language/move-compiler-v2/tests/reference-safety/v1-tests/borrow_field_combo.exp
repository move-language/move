
Diagnostics:
error: cannot copy mutable reference in local `inner`
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:31:37
   │
31 │         let c; if (cond) c = freeze(copy inner) else c = &other.s1;
   │                                     ^^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner`
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:40:40
   │
40 │         let c; if (cond) c = id(freeze(copy inner)) else c = &other.s1; // error in v2
   │                                        ^^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner`
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:49:30
   │
49 │         let c; if (cond) c = copy inner else c = &mut outer.s2; // error in v2
   │                              ^^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner`
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:56:37
   │
56 │         let c; if (cond) c = id_mut(copy inner) else c = &mut outer.s2; // error in v2
   │                                     ^^^^^^^^^^ copied here


Diagnostics:
error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:84:18
   │
83 │         let c; if (cond) c = &inner.f1 else c = &other.s1.f2;
   │                              --------- previous field borrow
84 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:86:9
   │
83 │         let c; if (cond) c = &inner.f1 else c = &other.s1.f2;
   │                              --------- previous field borrow
84 │         let f1 = &inner.f1;
   │                  --------- previous field borrow
85 │         *c;
86 │         *inner;
   │         ^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:93:18
   │
92 │         let c; if (cond) c = id(&inner.f1) else c = &other.s1.f2;
   │                              -------------
   │                              │  │
   │                              │  previous field borrow
   │                              used by call result
93 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:95:9
   │
92 │         let c; if (cond) c = id(&inner.f1) else c = &other.s1.f2;
   │                              -------------
   │                              │  │
   │                              │  previous field borrow
   │                              used by call result
93 │         let f1 = &inner.f1;
   │                  --------- previous field borrow
94 │         *c;
95 │         *inner;
   │         ^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
    ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:104:18
    │
103 │         let c; if (cond) c = &mut inner.f1 else c = &mut inner.f2;
    │                              -------------          ------------- previous mutable field borrow
    │                              │
    │                              previous mutable field borrow
104 │         let f1 = &mut inner.f1; // no error in v1, but should error.
    │                  ^^^^^^^^^^^^^ copied here

error: cannot mutable borrow local since other references exists
    ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:104:18
    │
103 │         let c; if (cond) c = &mut inner.f1 else c = &mut inner.f2;
    │                              ------------- previous mutable field borrow
104 │         let f1 = &mut inner.f1; // no error in v1, but should error.
    │                  ^^^^^^^^^^^^^ mutable borrow attempted here

error: cannot copy mutable reference in local `inner` which is still borrowed
    ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:113:18
    │
112 │         let c; if (cond) c = id_mut(&mut inner.f1) else c = &mut inner.f2;
    │                              ---------------------          ------------- previous mutable field borrow
    │                              │      │
    │                              │      previous mutable field borrow
    │                              used by mutable call result
113 │         let f1 = &mut inner.f1; // no error in v1, but should error
    │                  ^^^^^^^^^^^^^ copied here

error: cannot mutable borrow local since other references exists
    ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:113:18
    │
112 │         let c; if (cond) c = id_mut(&mut inner.f1) else c = &mut inner.f2;
    │                                     ------------- previous mutable field borrow
113 │         let f1 = &mut inner.f1; // no error in v1, but should error
    │                  ^^^^^^^^^^^^^ mutable borrow attempted here

error: cannot copy mutable reference in local `outer` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:13:50
   │
12 │         let inner = &outer.s1;
   │                     --------- previous field borrow
13 │         let c; if (cond) c = copy inner else c = &outer.s1; // error in v2
   │                                                  ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `outer` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:22:57
   │
21 │         let inner = &outer.s1;
   │                     --------- previous field borrow
22 │         let c; if (cond) c = id(copy inner) else c = id(&outer.s1);
   │                                                         ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:32:18
   │
31 │         let c; if (cond) c = freeze(copy inner) else c = &other.s1;
   │                              ------------------ previous call result
32 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:34:9
   │
31 │         let c; if (cond) c = freeze(copy inner) else c = &other.s1;
   │                              ------------------ previous call result
32 │         let f1 = &inner.f1;
   │                  --------- previous field borrow
33 │         *c;
34 │         *inner;
   │         ^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:41:18
   │
40 │         let c; if (cond) c = id(freeze(copy inner)) else c = &other.s1; // error in v2
   │                              ----------------------
   │                              │  │
   │                              │  previous call result
   │                              used by call result
41 │         let f1 = &inner.f1;
   │                  ^^^^^^^^^ copied here

error: cannot copy mutable reference in local `inner` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:43:9
   │
40 │         let c; if (cond) c = id(freeze(copy inner)) else c = &other.s1; // error in v2
   │                              ----------------------
   │                              │  │
   │                              │  previous call result
   │                              used by call result
41 │         let f1 = &inner.f1;
   │                  --------- previous field borrow
42 │         *c;
43 │         *inner;
   │         ^^^^^^ copied here

error: cannot copy mutable reference in local `outer` which is still borrowed
   ┌─ tests/reference-safety/v1-tests/borrow_field_combo.move:49:50
   │
48 │         let inner = &mut outer.s1;
   │                     ------------- previous mutable field borrow
49 │         let c; if (cond) c = copy inner else c = &mut outer.s2; // error in v2
   │                                                  ^^^^^^^^^^^^^ copied here
