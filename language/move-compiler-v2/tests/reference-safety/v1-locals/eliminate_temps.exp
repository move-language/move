
Diagnostics:
error: cannot copy local `x` which is still mutably borrowed
  ┌─ tests/reference-safety/v1-locals/eliminate_temps.move:7:13
  │
7 │         let (boom, u): (&u64, u64) = (&mut x, x);
  │             ^^^^^^^^^                 ------
  │             │                         │
  │             │                         previous mutable local borrow
  │             │                         used by freeze
  │             copied here
8 │         *boom + u + x
  │         ----- conflicting reference `boom` used here

error: mutable reference in local `r` requires exclusive access but is borrowed
   ┌─ tests/reference-safety/v1-locals/eliminate_temps.move:14:39
   │
14 │         let (f, u): (&u64, u64) = (r, *r);
   │                                    -  ^^ requirement enforced here
   │                                    │
   │                                    previous freeze
15 │         *f + u + x
   │         -- conflicting reference `f` used here

error: cannot immutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-locals/eliminate_temps.move:20:46
   │
20 │         let (f, u): (&u64, u64) = (&mut s.f, s.f);
   │                                    --------  ^^^
   │                                    │         │
   │                                    │         immutable borrow attempted here
   │                                    │         requirement enforced here
   │                                    previous mutable field borrow
   │                                    used by freeze
21 │         *f + u
   │         -- conflicting reference `f` used here
