// ---- Model Dump
module <SELF> {
    private fun main() {
        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(And(true, true), Not(false)), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl<u64>(1, 7), 128), Eq<u64>(Shr<u64>(128, 7), 1))), And(Eq<u64>(Div<u64>(255, 2), 127), Eq<u64>(Mod<u64>(255, 2), 1))), And(Eq<u64>(Add<u64>(254, 1), 255), Eq<u64>(Sub<u64>(255, 255), 0))), And(Eq<u64>(BitAnd<u64>(255, 255), 255), Eq<u64>(BitOr<u64>(255, 255), 255))), And(Eq<u64>(Xor<u64>(255, 255), 0), Eq<vector<u8>>([66], [66])));
        Tuple()
    }
    spec fun $main();
} // end <SELF>
