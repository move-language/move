// -- Model dump before bytecode pipeline
module 0x42::freeze_mut_ref {
    use std::vector;
    struct G {
        f: u64,
    }
    struct S {
        dummy_field: bool,
    }
    public fun borrow_mut<Element>(map: &mut vector<#0>): &#0 {
        Freeze(false)(vector::borrow_mut<Element>(map, 0))
    }
    public fun borrow_mut2<Element>(v: &mut #0): &#0 {
        Freeze(false)(v)
    }
    public fun borrow_mut3<Element>(v1: &mut #0,v2: &#0): &#0 {
        if true {
          Freeze(false)(v1)
        } else {
          v2
        }
    }
    public fun borrow_mut4<Element>(v: &mut #0): &#0 {
        return Freeze(false)(v)
    }
    private fun t0() {
        {
          let x: &u64 = Freeze(false)(Borrow(Mutable)(0));
          x;
          Tuple()
        }
    }
    private fun t1(s: &mut freeze_mut_ref::S): &freeze_mut_ref::S {
        Freeze(false)(s)
    }
    private fun t2(u1: &mut u64,u2: &mut u64): (&u64, &mut u64) {
        Tuple(Freeze(false)(u1), u2)
    }
    public fun t4() {
        {
          let x: &u64;
          {
            let y: &u64;
            (x: &u64, y: &u64): (&u64, &u64) = Tuple(Freeze(false)(Borrow(Mutable)(0)), Freeze(false)(Borrow(Mutable)(0)));
            Tuple()
          }
        }
    }
    public fun t5(s: &mut freeze_mut_ref::G) {
        {
          let x: u64 = 0;
          {
            let f: &mut u64 = Borrow(Mutable)(select freeze_mut_ref::G.f<&mut freeze_mut_ref::G>(x: u64 = Add<u64>(x, 1);
            s));
            {
              let g: &mut u64 = Borrow(Mutable)(select freeze_mut_ref::G.f<&mut freeze_mut_ref::G>(x: u64 = Add<u64>(x, 1);
              s));
              {
                let y: &mut u64 = Borrow(Mutable)(2);
                {
                  let z: &u64;
                  f = 0;
                  z: &u64 = Freeze(false)(y);
                  g = 2;
                  Tuple()
                }
              }
            }
          }
        }
    }
    private fun t6(cond: bool,s: &mut freeze_mut_ref::S,other: &freeze_mut_ref::S) {
        {
          let x: &freeze_mut_ref::S;
          if cond {
            x: &freeze_mut_ref::S = Freeze(false)(Copy(s))
          } else {
            x: &freeze_mut_ref::S = other
          };
          Tuple()
        }
    }
    private fun t7(cond: bool,s: &mut freeze_mut_ref::S,other: &freeze_mut_ref::S) {
        {
          let _x: &freeze_mut_ref::S;
          _x: &freeze_mut_ref::S = if cond {
            Freeze(false)(s)
          } else {
            other
          };
          Tuple()
        }
    }
    private fun t8(cond: bool,s: &mut freeze_mut_ref::S,other: &freeze_mut_ref::S) {
        {
          let _x: &freeze_mut_ref::S = if cond {
            Freeze(false)(s)
          } else {
            other
          };
          Tuple()
        }
    }
} // end 0x42::freeze_mut_ref

============ initial bytecode ================

[variant baseline]
public fun freeze_mut_ref::borrow_mut<#0>($t0: &mut vector<#0>): &#0 {
     var $t1: &#0
     var $t2: &mut #0
     var $t3: u64
  0: $t3 := 0
  1: $t2 := vector::borrow_mut<#0>($t0, $t3)
  2: $t1 := freeze_ref(implicit)($t2)
  3: return $t1
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut2<#0>($t0: &mut #0): &#0 {
     var $t1: &#0
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut3<#0>($t0: &mut #0, $t1: &#0): &#0 {
     var $t2: &#0
     var $t3: bool
  0: $t3 := true
  1: if ($t3) goto 2 else goto 5
  2: label L0
  3: $t2 := freeze_ref(implicit)($t0)
  4: goto 7
  5: label L1
  6: $t2 := infer($t1)
  7: label L2
  8: return $t2
}


[variant baseline]
public fun freeze_mut_ref::borrow_mut4<#0>($t0: &mut #0): &#0 {
     var $t1: &#0
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
  2: return $t1
}


[variant baseline]
fun freeze_mut_ref::t0() {
     var $t0: &u64
     var $t1: &mut u64
     var $t2: u64
     var $t3: &u64
  0: $t2 := 0
  1: $t1 := borrow_local($t2)
  2: $t0 := freeze_ref(implicit)($t1)
  3: $t3 := infer($t0)
  4: return ()
}


[variant baseline]
fun freeze_mut_ref::t1($t0: &mut freeze_mut_ref::S): &freeze_mut_ref::S {
     var $t1: &freeze_mut_ref::S
  0: $t1 := freeze_ref(implicit)($t0)
  1: return $t1
}


[variant baseline]
fun freeze_mut_ref::t2($t0: &mut u64, $t1: &mut u64): (&u64, &mut u64) {
     var $t2: &u64
     var $t3: &mut u64
  0: $t2 := freeze_ref(implicit)($t0)
  1: $t3 := infer($t1)
  2: return ($t2, $t3)
}


[variant baseline]
public fun freeze_mut_ref::t4() {
     var $t0: &u64
     var $t1: &u64
     var $t2: &u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: &u64
     var $t6: &mut u64
     var $t7: u64
  0: $t4 := 0
  1: $t3 := borrow_local($t4)
  2: $t2 := freeze_ref(implicit)($t3)
  3: $t0 := infer($t2)
  4: $t7 := 0
  5: $t6 := borrow_local($t7)
  6: $t5 := freeze_ref(implicit)($t6)
  7: $t1 := infer($t5)
  8: return ()
}


[variant baseline]
public fun freeze_mut_ref::t5($t0: &mut freeze_mut_ref::G) {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut freeze_mut_ref::G
     var $t4: u64
     var $t5: u64
     var $t6: &mut u64
     var $t7: &mut freeze_mut_ref::G
     var $t8: u64
     var $t9: u64
     var $t10: &mut u64
     var $t11: u64
     var $t12: &u64
     var $t13: u64
     var $t14: &mut u64
     var $t15: u64
     var $t16: &u64
  0: $t1 := 0
  1: $t5 := 1
  2: $t4 := +($t1, $t5)
  3: $t1 := infer($t4)
  4: $t3 := infer($t0)
  5: $t2 := borrow_field<freeze_mut_ref::G>.f($t3)
  6: $t9 := 1
  7: $t8 := +($t1, $t9)
  8: $t1 := infer($t8)
  9: $t7 := infer($t0)
 10: $t6 := borrow_field<freeze_mut_ref::G>.f($t7)
 11: $t11 := 2
 12: $t10 := borrow_local($t11)
 13: $t13 := 2
 14: $t15 := 0
 15: write_ref($t2, $t15)
 16: $t16 := freeze_ref(implicit)($t10)
 17: $t12 := infer($t16)
 18: $t14 := infer($t6)
 19: write_ref($t14, $t13)
 20: return ()
}


[variant baseline]
fun freeze_mut_ref::t6($t0: bool, $t1: &mut freeze_mut_ref::S, $t2: &freeze_mut_ref::S) {
     var $t3: &freeze_mut_ref::S
     var $t4: &freeze_mut_ref::S
     var $t5: &mut freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 6
  1: label L0
  2: $t5 := copy($t1)
  3: $t4 := freeze_ref(implicit)($t5)
  4: $t3 := infer($t4)
  5: goto 8
  6: label L1
  7: $t3 := infer($t2)
  8: label L2
  9: return ()
}


[variant baseline]
fun freeze_mut_ref::t7($t0: bool, $t1: &mut freeze_mut_ref::S, $t2: &freeze_mut_ref::S) {
     var $t3: &freeze_mut_ref::S
     var $t4: &freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t4 := freeze_ref(implicit)($t1)
  3: goto 6
  4: label L1
  5: $t4 := infer($t2)
  6: label L2
  7: $t3 := infer($t4)
  8: return ()
}


[variant baseline]
fun freeze_mut_ref::t8($t0: bool, $t1: &mut freeze_mut_ref::S, $t2: &freeze_mut_ref::S) {
     var $t3: &freeze_mut_ref::S
  0: if ($t0) goto 1 else goto 4
  1: label L0
  2: $t3 := freeze_ref(implicit)($t1)
  3: goto 6
  4: label L1
  5: $t3 := infer($t2)
  6: label L2
  7: return ()
}
