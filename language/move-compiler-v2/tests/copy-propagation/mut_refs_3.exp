============ initial bytecode ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: u64
  0: $t2 := borrow_local($t0)
  1: $t3 := infer($t2)
  2: $t4 := infer($t3)
  3: $t5 := 0
  4: write_ref($t2, $t5)
  5: $t1 := read_ref($t4)
  6: return $t1
}


Diagnostics:
error: mutable reference in local `a` requires exclusive access but is borrowed
  ┌─ tests/copy-propagation/mut_refs_3.move:7:9
  │
7 │         *a = 0;
  │         ^^^^^^ requirement enforced here
8 │         *c
  │         -- conflicting reference `c` used here

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: &mut u64
     var $t5: u64
  0: $t2 := borrow_local($t0)
  1: $t3 := copy($t2)
  2: $t4 := move($t3)
  3: $t5 := 0
  4: write_ref($t2, $t5)
  5: $t1 := read_ref($t4)
  6: return $t1
}
