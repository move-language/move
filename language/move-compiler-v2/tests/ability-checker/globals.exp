
Diagnostics:
warning: Unused parameter `x`. Consider removing or prefixing with an underscore: `_x`
   ┌─ tests/ability-checker/globals.move:18:27
   │
18 │     fun write(a: address, x: u64): u64 {
   │                           ^

============ initial bytecode ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
  0: $t1 := exists<globals::R>($t0)
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
  0: $t2 := 1
  1: $t1 := pack globals::R($t2)
  2: move_to<globals::R>($t0, $t1)
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
  0: $t3 := borrow_global<globals::R>($t0)
  1: $t2 := infer($t3)
  2: $t4 := borrow_field<globals::R>.f($t2)
  3: $t1 := read_ref($t4)
  4: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
  0: $t4 := borrow_global<globals::R>($t0)
  1: $t3 := infer($t4)
  2: $t5 := 2
  3: $t6 := borrow_field<globals::R>.f($t3)
  4: write_ref($t6, $t5)
  5: $t2 := 9
  6: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
     # live vars: $t0
  0: $t1 := exists<globals::R>($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
     # live vars: $t0
  0: $t2 := 1
     # live vars: $t0, $t2
  1: $t1 := pack globals::R($t2)
     # live vars: $t0, $t1
  2: move_to<globals::R>($t0, $t1)
     # live vars:
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
     # live vars: $t0
  0: $t3 := borrow_global<globals::R>($t0)
     # live vars: $t3
  1: $t2 := move($t3)
     # live vars: $t2
  2: $t4 := borrow_field<globals::R>.f($t2)
     # live vars: $t4
  3: $t1 := read_ref($t4)
     # live vars: $t1
  4: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
     # live vars: $t0
  0: $t4 := borrow_global<globals::R>($t0)
     # live vars: $t4
  1: $t3 := move($t4)
     # live vars: $t3
  2: $t5 := 2
     # live vars: $t3, $t5
  3: $t6 := borrow_field<globals::R>.f($t3)
     # live vars: $t5, $t6
  4: write_ref($t6, $t5)
     # live vars:
  5: $t2 := 9
     # live vars: $t2
  6: return $t2
}

============ after MemorySafetyProcessor: ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t1 := exists<globals::R>($t0)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0}
     #
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t2 := 1
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  1: $t1 := pack globals::R($t2)
     # live vars: $t0, $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t2}
     #
  2: move_to<globals::R>($t0, $t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0,$t1,$t2}
     #
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t3 := borrow_global<globals::R>($t0)
     # live vars: $t3
     # graph: {L0=global<globals::R>[borrow_global(false) -> L1],L1=local($t3)[]}
     # local_to_label: {$t3=L1}
     # global_to_label: {globals::R=L0}
     # moved: {}
     #
  1: $t2 := move($t3)
     # live vars: $t2
     # graph: {L0=global<globals::R>[borrow_global(false) -> L1],L1=local($t3)[skip -> L257],L257=local($t2)[]}
     # local_to_label: {$t2=L257,$t3=L1}
     # global_to_label: {globals::R=L0}
     # moved: {$t3}
     #
  2: $t4 := borrow_field<globals::R>.f($t2)
     # live vars: $t4
     # graph: {L0=global<globals::R>[borrow_global(false) -> L1],L1=local($t3)[skip -> L257],L257=local($t2)[borrow_field(false) -> L513],L513=local($t4)[]}
     # local_to_label: {$t2=L257,$t3=L1,$t4=L513}
     # global_to_label: {globals::R=L0}
     # moved: {$t3}
     #
  3: $t1 := read_ref($t4)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t3}
     #
  4: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t4 := borrow_global<globals::R>($t0)
     # live vars: $t4
     # graph: {L0=global<globals::R>[borrow_global(true) -> L1],L1=local($t4)[]}
     # local_to_label: {$t4=L1}
     # global_to_label: {globals::R=L0}
     # moved: {}
     #
  1: $t3 := move($t4)
     # live vars: $t3
     # graph: {L0=global<globals::R>[borrow_global(true) -> L1],L1=local($t4)[skip -> L257],L257=local($t3)[]}
     # local_to_label: {$t3=L257,$t4=L1}
     # global_to_label: {globals::R=L0}
     # moved: {$t4}
     #
  2: $t5 := 2
     # live vars: $t3, $t5
     # graph: {L0=global<globals::R>[borrow_global(true) -> L1],L1=local($t4)[skip -> L257],L257=local($t3)[]}
     # local_to_label: {$t3=L257,$t4=L1}
     # global_to_label: {globals::R=L0}
     # moved: {$t4}
     #
  3: $t6 := borrow_field<globals::R>.f($t3)
     # live vars: $t5, $t6
     # graph: {L0=global<globals::R>[borrow_global(true) -> L1],L1=local($t4)[skip -> L257],L257=local($t3)[borrow_field(true) -> L769],L769=local($t6)[]}
     # local_to_label: {$t3=L257,$t4=L1,$t6=L769}
     # global_to_label: {globals::R=L0}
     # moved: {$t4}
     #
  4: write_ref($t6, $t5)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t4}
     #
  5: $t2 := 9
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t4}
     #
  6: return $t2
}

============ after ExplicitDrop: ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
  0: $t1 := exists<globals::R>($t0)
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
  0: $t2 := 1
  1: $t1 := pack globals::R($t2)
  2: move_to<globals::R>($t0, $t1)
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
  0: $t3 := borrow_global<globals::R>($t0)
  1: $t2 := move($t3)
  2: $t4 := borrow_field<globals::R>.f($t2)
  3: drop($t2)
  4: $t1 := read_ref($t4)
  5: drop($t4)
  6: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
  0: $t4 := borrow_global<globals::R>($t0)
  1: $t3 := move($t4)
  2: $t5 := 2
  3: $t6 := borrow_field<globals::R>.f($t3)
  4: drop($t3)
  5: write_ref($t6, $t5)
  6: drop($t6)
  7: $t2 := 9
  8: return $t2
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t1 := exists<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {}
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: $t2 := 1
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t1 := pack globals::R($t2)
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  2: move_to<globals::R>($t0, $t1)
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  0: $t3 := borrow_global<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t2 := move($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t4 := borrow_field<globals::R>.f($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  4: $t1 := read_ref($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  5: drop($t4)
     # abort state before: {returns}
     # abort state after : {}
  6: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  0: $t4 := borrow_global<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t3 := move($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t5 := 2
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t6 := borrow_field<globals::R>.f($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  4: drop($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  5: write_ref($t6, $t5)
     # abort state before: {returns}
     # abort state after : {returns}
  6: drop($t6)
     # abort state before: {returns}
     # abort state after : {returns}
  7: $t2 := 9
     # abort state before: {returns}
     # abort state after : {}
  8: return $t2
}


Diagnostics:
error: no key ability
  ┌─ tests/ability-checker/globals.move:6:9
  │
6 │         move_to(s, R{f: 1});
  │         ^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/globals.move:10:9
   │
10 │         exists<R>(a)
   │         ^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/globals.move:14:17
   │
14 │         let r = borrow_global<R>(a);
   │                 ^^^^^^^^^^^^^^^^^^^

error: no key ability
   ┌─ tests/ability-checker/globals.move:19:17
   │
19 │         let r = borrow_global_mut<R>(a);
   │                 ^^^^^^^^^^^^^^^^^^^^^^^

============ after AbilityChecker: ================

[variant baseline]
fun globals::check($t0: address): bool {
     var $t1: bool
     # abort state before: {returns}
     # abort state after : {returns}
  0: $t1 := exists<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {}
  1: return $t1
}


[variant baseline]
fun globals::publish($t0: &signer) {
     var $t1: globals::R
     var $t2: u64
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: $t2 := 1
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t1 := pack globals::R($t2)
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  2: move_to<globals::R>($t0, $t1)
     # abort state before: {returns}
     # abort state after : {}
  3: return ()
}


[variant baseline]
fun globals::read($t0: address): u64 {
     var $t1: u64
     var $t2: &globals::R
     var $t3: &globals::R
     var $t4: &u64
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  0: $t3 := borrow_global<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t2 := move($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t4 := borrow_field<globals::R>.f($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  3: drop($t2)
     # abort state before: {returns}
     # abort state after : {returns}
  4: $t1 := read_ref($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  5: drop($t4)
     # abort state before: {returns}
     # abort state after : {}
  6: return $t1
}


[variant baseline]
fun globals::write($t0: address, $t1: u64): u64 {
     var $t2: u64
     var $t3: &mut globals::R
     var $t4: &mut globals::R
     var $t5: u64
     var $t6: &mut u64
     # abort state before: {returns,aborts}
     # abort state after : {returns}
  0: $t4 := borrow_global<globals::R>($t0)
     # abort state before: {returns}
     # abort state after : {returns}
  1: $t3 := move($t4)
     # abort state before: {returns}
     # abort state after : {returns}
  2: $t5 := 2
     # abort state before: {returns}
     # abort state after : {returns}
  3: $t6 := borrow_field<globals::R>.f($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  4: drop($t3)
     # abort state before: {returns}
     # abort state after : {returns}
  5: write_ref($t6, $t5)
     # abort state before: {returns}
     # abort state after : {returns}
  6: drop($t6)
     # abort state before: {returns}
     # abort state after : {returns}
  7: $t2 := 9
     # abort state before: {returns}
     # abort state after : {}
  8: return $t2
}
