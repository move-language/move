/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xc11ae395
                {
                    // evaded(uint64,uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint64_uint64$_$u64_u64$(4, calldatasize())
                    let ret_0, ret_1, ret_2, ret_3 := A2_M_evaded(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64_uint64_uint64_uint64$_$u64_u64_u64_u64$(memPos, ret_0, ret_1, ret_2, ret_3)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_evaded(a, b) -> $result0, $result1, $result2, $result3 {
                let ar, d, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14
                let $locals := $Malloc(64)
                mstore($locals, a)
                // $t5 := copy($t0)
                $t5 := mload($locals)
                // $t3 := $t5
                mstore(add($locals, 32), $t5)
                // $t6 := copy($t3)
                $t6 := mload(add($locals, 32))
                // $t7 := +($t6, $t1)
                $t7 := $AddU64($t6, b)
                // $t8 := borrow_local($t0)
                $t8 := $MakePtr(false, add($locals, 24))
                // $t9 := borrow_local($t3)
                $t9 := $MakePtr(false, add($locals, 56))
                // $t10 := read_ref($t9)
                $t10 := $LoadU64($t9)
                // $t11 := 1
                $t11 := 1
                // $t12 := +($t10, $t11)
                $t12 := $AddU64($t10, $t11)
                // write_ref($t8, $t12)
                $StoreU64($t8, $t12)
                // $t13 := move($t0)
                $t13 := mload($locals)
                // $t14 := move($t3)
                $t14 := mload(add($locals, 32))
                // return ($t13, $t1, $t14, $t7)
                $result0 := $t13
                $result1 := b
                $result2 := $t14
                $result3 := $t7
                $Free($locals, 64)
            }

            function abi_encode_tuple_$uint64_uint64_uint64_uint64$_$u64_u64_u64_u64$(headStart ,value_0, value_1, value_2, value_3) -> tail {
                tail := add(headStart, 128)
                abi_encode_uint64(value_0, add(headStart, 0))
                abi_encode_uint64(value_1, add(headStart, 32))
                abi_encode_uint64(value_2, add(headStart, 64))
                abi_encode_uint64(value_3, add(headStart, 96))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$uint64_uint64$_$u64_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::test_call_by_ref
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_call_by_ref" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_call_by_ref()
        return (0, 0)
        function A2_M_test_call_by_ref() {
            let $t1, $t2, $t3, $t4, $t5, $t6
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t6 := 101
                    $t6 := 101
                    // abort($t6)
                    $Abort($t6)
                }
                case 4 {
                    // $t1 := 1
                    $t1 := 1
                    // $t0 := $t1
                    mstore($locals, $t1)
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, add($locals, 24))
                    // M::call_by_ref($t2)
                    A2_M_call_by_ref($t2)
                    // $t3 := move($t0)
                    $t3 := mload($locals)
                    // $t4 := 2
                    $t4 := 2
                    // $t5 := ==($t3, $t4)
                    $t5 := $Eq($t3, $t4)
                    // if ($t5) goto L1 else goto L0
                    switch $t5
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A2_M_call_by_ref(a) {
            let $t1
            // $t1 := 2
            $t1 := 2
            // write_ref($t0, $t1)
            $StoreU64(a, $t1)
            // return ()
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
    }
}
===> Test result of M::test_call_by_ref: Succeed(Stopped) (used_gas=488): []

// test of M::test_evaded
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_evaded" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_evaded()
        return (0, 0)
        function A2_M_test_evaded() {
            let b, c, d, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t11 := 100
                    $t11 := 100
                    // abort($t11)
                    $Abort($t11)
                }
                case 4 {
                    // $t3 := 1
                    $t3 := 1
                    // $t4 := 2
                    $t4 := 2
                    // ($t5, $t6, $t7, $t8) := M::evaded($t3, $t4)
                    $t5, $t6, $t7, $t8 := A2_M_evaded($t3, $t4)
                    // $t9 := 2
                    $t9 := 2
                    // $t10 := ==($t5, $t9)
                    $t10 := $Eq($t5, $t9)
                    // if ($t10) goto L1 else goto L0
                    switch $t10
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t12 := 2
                    $t12 := 2
                    // $t13 := ==($t6, $t12)
                    $t13 := $Eq($t6, $t12)
                    // if ($t13) goto L4 else goto L3
                    switch $t13
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t14 := 101
                    $t14 := 101
                    // abort($t14)
                    $Abort($t14)
                }
                case 8 {
                    // label L5
                    // $t15 := 1
                    $t15 := 1
                    // $t16 := ==($t7, $t15)
                    $t16 := $Eq($t7, $t15)
                    // if ($t16) goto L7 else goto L6
                    switch $t16
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t17 := 102
                    $t17 := 102
                    // abort($t17)
                    $Abort($t17)
                }
                case 11 {
                    // label L8
                    // $t18 := 3
                    $t18 := 3
                    // $t19 := ==($t8, $t18)
                    $t19 := $Eq($t8, $t18)
                    // if ($t19) goto L10 else goto L9
                    switch $t19
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t20 := 103
                    $t20 := 103
                    // abort($t20)
                    $Abort($t20)
                }
                case 14 {
                    // label L11
                    // return ()
                    leave
                }
            }
        }

        function A2_M_evaded(a, b) -> $result0, $result1, $result2, $result3 {
            let ar, d, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14
            let $locals := $Malloc(64)
            mstore($locals, a)
            // $t5 := copy($t0)
            $t5 := mload($locals)
            // $t3 := $t5
            mstore(add($locals, 32), $t5)
            // $t6 := copy($t3)
            $t6 := mload(add($locals, 32))
            // $t7 := +($t6, $t1)
            $t7 := $AddU64($t6, b)
            // $t8 := borrow_local($t0)
            $t8 := $MakePtr(false, add($locals, 24))
            // $t9 := borrow_local($t3)
            $t9 := $MakePtr(false, add($locals, 56))
            // $t10 := read_ref($t9)
            $t10 := $LoadU64($t9)
            // $t11 := 1
            $t11 := 1
            // $t12 := +($t10, $t11)
            $t12 := $AddU64($t10, $t11)
            // write_ref($t8, $t12)
            $StoreU64($t8, $t12)
            // $t13 := move($t0)
            $t13 := mload($locals)
            // $t14 := move($t3)
            $t14 := mload(add($locals, 32))
            // return ($t13, $t1, $t14, $t7)
            $result0 := $t13
            $result1 := b
            $result2 := $t14
            $result3 := $t7
            $Free($locals, 64)
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::test_evaded: Succeed(Stopped) (used_gas=2140): []

// test of M::test_freeze_ref
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_freeze_ref" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_freeze_ref()
        return (0, 0)
        function A2_M_test_freeze_ref() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 101
                    $t7 := 101
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t1 := 1
                    $t1 := 1
                    // $t0 := $t1
                    mstore($locals, $t1)
                    // $t2 := borrow_local($t0)
                    $t2 := $MakePtr(false, add($locals, 24))
                    // $t3 := freeze_ref($t2)
                    $t3 := $t2
                    // $t4 := M::call_by_immut_ref($t3)
                    $t4 := A2_M_call_by_immut_ref($t3)
                    // $t5 := 1
                    $t5 := 1
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A2_M_call_by_immut_ref(a) -> $result {
            let $t1
            // $t1 := read_ref($t0)
            $t1 := $LoadU64(a)
            // return $t1
            $result := $t1
        }

        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::test_freeze_ref: Succeed(Stopped) (used_gas=438): []
