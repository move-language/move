/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            {
                if iszero(calldatasize()) { A2_M_receive() stop() }
            }
            if callvalue()
            {
                $Abort(99)
            }
            {
                let retval := A2_M_fallback(0, calldatasize()) stop()
                return(add(retval, 0x20), mload(retval))
            }
            function A2_M_receive() {
                // return ()
            }

            function A2_M_fallback(x) -> $result {
                let $t1, $t2
                // $t1 := 1
                $t1 := 1
                // $t2 := +($t0, $t1)
                $t2 := $AddU64(x, $t1)
                // return $t2
                $result := $t2
            }

            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Errors compiling Yul

Warning: Yul is still experimental. Please use the output with care.
Warning: "switch" statement with only a default case.
  --> <stdin>:17:17:
   |
17 |                 switch selector
   |                 ^ (Relevant source part starts here and spans across multiple lines).

Error: Function "A2_M_fallback" expects 1 arguments but got 2.
  --> <stdin>:28:31:
   |
28 |                 let retval := A2_M_fallback(0, calldatasize()) stop()
   |                               ^^^^^^^^^^^^^
