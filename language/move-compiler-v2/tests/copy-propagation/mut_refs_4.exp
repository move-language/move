============ initial bytecode ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t3 := borrow_local($t0)
  1: $t2 := infer($t3)
  2: $t4 := infer($t0)
  3: $t5 := infer($t4)
  4: $t6 := infer($t5)
  5: $t7 := 0
  6: write_ref($t2, $t7)
  7: $t1 := infer($t6)
  8: return $t1
}


Diagnostics:
error: cannot copy local `p` which is still mutably borrowed
  ┌─ tests/copy-propagation/mut_refs_4.move:5:13
  │
4 │         let a = &mut p;
  │                 ------ previous mutable local borrow
5 │         let b = p;
  │             ^ copied here
  ·
8 │         *a = 0;
  │         ------ conflicting reference `a` used here

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: &mut u64
     var $t3: &mut u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t3 := borrow_local($t0)
  1: $t2 := move($t3)
  2: $t4 := copy($t0)
  3: $t5 := move($t4)
  4: $t6 := move($t5)
  5: $t7 := 0
  6: write_ref($t2, $t7)
  7: $t1 := move($t6)
  8: return $t1
}
