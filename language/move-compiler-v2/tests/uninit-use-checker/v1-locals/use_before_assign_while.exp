============ initial bytecode ================

[variant baseline]
fun M::tborrow1($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
  0: label L0
  1: if ($t0) goto 2 else goto 8
  2: label L2
  3: $t2 := borrow_local($t1)
  4: $t3 := move($t2)
  5: $t4 := 0
  6: $t1 := infer($t4)
  7: goto 10
  8: label L3
  9: goto 12
 10: label L4
 11: goto 0
 12: label L1
 13: return ()
}


[variant baseline]
fun M::tborrow2($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
  0: label L0
  1: if ($t0) goto 2 else goto 14
  2: label L2
  3: $t2 := borrow_local($t1)
  4: $t3 := move($t2)
  5: if ($t0) goto 6 else goto 10
  6: label L5
  7: $t4 := 0
  8: $t1 := infer($t4)
  9: goto 11
 10: label L6
 11: label L7
 12: goto 18
 13: goto 16
 14: label L3
 15: goto 18
 16: label L4
 17: goto 0
 18: label L1
 19: return ()
}


[variant baseline]
fun M::tcopy($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: label L0
  1: if ($t0) goto 2 else goto 16
  2: label L2
  3: $t3 := move($t1)
  4: $t4 := 1
  5: $t2 := +($t3, $t4)
  6: if ($t0) goto 7 else goto 10
  7: label L5
  8: goto 0
  9: goto 11
 10: label L6
 11: label L7
 12: $t5 := 0
 13: $t1 := infer($t5)
 14: $t6 := infer($t2)
 15: goto 18
 16: label L3
 17: goto 20
 18: label L4
 19: goto 0
 20: label L1
 21: return ()
}


[variant baseline]
fun M::tmove($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
  0: label L0
  1: if ($t0) goto 2 else goto 10
  2: label L2
  3: $t3 := move($t1)
  4: $t4 := 1
  5: $t2 := +($t3, $t4)
  6: $t5 := 0
  7: $t1 := infer($t5)
  8: $t6 := infer($t2)
  9: goto 12
 10: label L3
 11: goto 14
 12: label L4
 13: goto 0
 14: label L1
 15: return ()
}


Diagnostics:
error: use of possibly unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_while.move:4:32
  │
4 │         while (cond) { let y = move x + 1; x = 0; y; }
  │                                ^^^^^^

error: use of possibly unassigned local `x`
  ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_while.move:9:32
  │
9 │         while (cond) { let y = move x + 1; if (cond) { continue }; x = 0; y; }
  │                                ^^^^^^

error: use of possibly unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_while.move:14:32
   │
14 │         while (cond) { let y = &x; _ = move y; x = 0 }
   │                                ^^

error: use of unassigned local `x`
   ┌─ tests/uninit-use-checker/v1-locals/use_before_assign_while.move:19:32
   │
19 │         while (cond) { let y = &x; _ = move y; if (cond) { x = 0 }; break }
   │                                ^^

============ after uninitialized_use_checker: ================

[variant baseline]
fun M::tborrow1($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
  0: label L0
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
  1: if ($t0) goto 2 else goto 8
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
  2: label L2
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t3, $t4 }
  3: $t2 := borrow_local($t1)
     # before: { maybe: $t1, $t3, $t4 }, after: { maybe: $t1, $t4 }
  4: $t3 := move($t2)
     # before: { maybe: $t1, $t4 }, after: { maybe: $t1 }
  5: $t4 := 0
     # before: { maybe: $t1 }, after: all initialized
  6: $t1 := infer($t4)
     # before: all initialized, after: all initialized
  7: goto 10
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
  8: label L3
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
  9: goto 12
     # before: all initialized, after: all initialized
 10: label L4
     # before: all initialized, after: all initialized
 11: goto 0
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
 12: label L1
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
 13: return ()
}


[variant baseline]
fun M::tborrow2($t0: bool) {
     var $t1: u64
     var $t2: &u64
     var $t3: &u64
     var $t4: u64
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  0: label L0
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  1: if ($t0) goto 2 else goto 14
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
  2: label L2
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t3, $t4 }
  3: $t2 := borrow_local($t1)
     # before: { no: $t1, $t3, $t4 }, after: { no: $t1, $t4 }
  4: $t3 := move($t2)
     # before: { no: $t1, $t4 }, after: { no: $t1, $t4 }
  5: if ($t0) goto 6 else goto 10
     # before: { no: $t1, $t4 }, after: { no: $t1, $t4 }
  6: label L5
     # before: { no: $t1, $t4 }, after: { no: $t1 }
  7: $t4 := 0
     # before: { no: $t1 }, after: all initialized
  8: $t1 := infer($t4)
     # before: all initialized, after: all initialized
  9: goto 11
     # before: { no: $t1, $t4 }, after: { no: $t1, $t4 }
 10: label L6
     # before: { maybe: $t1, $t4 }, after: { maybe: $t1, $t4 }
 11: label L7
     # before: { maybe: $t1, $t4 }, after: { maybe: $t1, $t4 }
 12: goto 18
 13: goto 16
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
 14: label L3
     # before: { no: $t1, $t2, $t3, $t4 }, after: { no: $t1, $t2, $t3, $t4 }
 15: goto 18
 16: label L4
 17: goto 0
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
 18: label L1
     # before: { maybe: $t1, $t2, $t3, $t4 }, after: { maybe: $t1, $t2, $t3, $t4 }
 19: return ()
}


[variant baseline]
fun M::tcopy($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  0: label L0
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  1: if ($t0) goto 2 else goto 16
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  2: label L2
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t4, $t5, $t6 }
  3: $t3 := move($t1)
     # before: { maybe: $t1, $t2, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t5, $t6 }
  4: $t4 := 1
     # before: { maybe: $t1, $t2, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  5: $t2 := +($t3, $t4)
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  6: if ($t0) goto 7 else goto 10
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  7: label L5
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  8: goto 0
  9: goto 11
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
 10: label L6
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
 11: label L7
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t6 }
 12: $t5 := 0
     # before: { maybe: $t1, $t6 }, after: { maybe: $t6 }
 13: $t1 := infer($t5)
     # before: { maybe: $t6 }, after: all initialized
 14: $t6 := infer($t2)
     # before: all initialized, after: all initialized
 15: goto 18
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 16: label L3
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 17: goto 20
     # before: all initialized, after: all initialized
 18: label L4
     # before: all initialized, after: all initialized
 19: goto 0
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 20: label L1
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 21: return ()
}


[variant baseline]
fun M::tmove($t0: bool) {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  0: label L0
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  1: if ($t0) goto 2 else goto 10
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
  2: label L2
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t4, $t5, $t6 }
  3: $t3 := move($t1)
     # before: { maybe: $t1, $t2, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t5, $t6 }
  4: $t4 := 1
     # before: { maybe: $t1, $t2, $t5, $t6 }, after: { maybe: $t1, $t5, $t6 }
  5: $t2 := +($t3, $t4)
     # before: { maybe: $t1, $t5, $t6 }, after: { maybe: $t1, $t6 }
  6: $t5 := 0
     # before: { maybe: $t1, $t6 }, after: { maybe: $t6 }
  7: $t1 := infer($t5)
     # before: { maybe: $t6 }, after: all initialized
  8: $t6 := infer($t2)
     # before: all initialized, after: all initialized
  9: goto 12
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 10: label L3
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 11: goto 14
     # before: all initialized, after: all initialized
 12: label L4
     # before: all initialized, after: all initialized
 13: goto 0
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 14: label L1
     # before: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }, after: { maybe: $t1, $t2, $t3, $t4, $t5, $t6 }
 15: return ()
}
