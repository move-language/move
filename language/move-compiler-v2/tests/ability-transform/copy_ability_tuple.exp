============ initial bytecode ================

[variant baseline]
public fun M::f($t0: M::R): (M::R, u64) {
     var $t1: M::R
     var $t2: u64
  0: $t1 := infer($t0)
  1: $t2 := 0
  2: return ($t1, $t2)
}


[variant baseline]
public fun M::g($t0: &signer) {
     var $t1: M::R
     var $t2: u64
     var $t3: u64
  0: $t2 := 1
  1: $t1 := pack M::R($t2)
  2: $t3 := 3
  3: ($t1, $t3) := M::f($t1)
  4: move_to<M::R>($t0, $t1)
  5: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun M::f($t0: M::R): (M::R, u64) {
     var $t1: M::R
     var $t2: u64
     # live vars: $t0
  0: $t1 := infer($t0)
     # live vars: $t1
  1: $t2 := 0
     # live vars: $t1, $t2
  2: return ($t1, $t2)
}


[variant baseline]
public fun M::g($t0: &signer) {
     var $t1: M::R
     var $t2: u64
     var $t3: u64
     # live vars: $t0
  0: $t2 := 1
     # live vars: $t0, $t2
  1: $t1 := pack M::R($t2)
     # live vars: $t0, $t1
  2: $t3 := 3
     # live vars: $t0, $t1
  3: ($t1, $t3) := M::f($t1)
     # live vars: $t0, $t1
  4: move_to<M::R>($t0, $t1)
     # live vars:
  5: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
public fun M::f($t0: M::R): (M::R, u64) {
     var $t1: M::R
     var $t2: u64
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t1 := infer($t0)
     # live vars: $t1
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t2 := 0
     # live vars: $t1, $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
  2: return ($t1, $t2)
}


[variant baseline]
public fun M::g($t0: &signer) {
     var $t1: M::R
     var $t2: u64
     var $t3: u64
     # live vars: $t0
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: $t2 := 1
     # live vars: $t0, $t2
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  1: $t1 := pack M::R($t2)
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  2: $t3 := 3
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  3: ($t1, $t3) := M::f($t1)
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  4: move_to<M::R>($t0, $t1)
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  5: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
public fun M::f($t0: M::R): (M::R, u64) {
     var $t1: M::R
     var $t2: u64
     # abort state: {returns}
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t1 := infer($t0)
     # abort state: {returns}
     # live vars: $t1
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t2 := 0
     # abort state: {returns}
     # live vars: $t1, $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
  2: return ($t1, $t2)
}


[variant baseline]
public fun M::g($t0: &signer) {
     var $t1: M::R
     var $t2: u64
     var $t3: u64
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: $t2 := 1
     # abort state: {returns,aborts}
     # live vars: $t0, $t2
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  1: $t1 := pack M::R($t2)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  2: $t3 := 3
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  3: ($t1, $t3) := M::f($t1)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  4: move_to<M::R>($t0, $t1)
     # abort state: {returns}
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  5: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
public fun M::f($t0: M::R): (M::R, u64) {
     var $t1: M::R
     var $t2: u64
  0: $t1 := move($t0)
  1: $t2 := 0
  2: return ($t1, $t2)
}


[variant baseline]
public fun M::g($t0: &signer) {
     var $t1: M::R
     var $t2: u64
     var $t3: u64
  0: $t2 := 1
  1: $t1 := pack M::R($t2)
  2: $t3 := 3
  3: ($t1, $t3) := M::f($t1)
  4: move_to<M::R>($t0, $t1)
  5: return ()
}
