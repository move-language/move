/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            $Abort(97)
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of M::test_decode_two_bytes1
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_decode_two_bytes1" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_decode_two_bytes1()
        return (0, 0)
        function A2_M_test_decode_two_bytes1() {
            let i, i_1, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47
            let $locals := $Malloc(96)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L3
                    // $t8 := 31
                    $t8 := 31
                    // $t9 := <=($t0, $t8)
                    $t9 := $LtEq(i, $t8)
                    // if ($t9) goto L1 else goto L0
                    switch $t9
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t2 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t5 := borrow_local($t2)
                    $t5 := $MakePtr(false, $locals)
                    // $t6 := 42
                    $t6 := 42
                    // vector::push_back<u8>($t5, $t6)
                    A1_vector_push_back$u8$($t5, $t6)
                    // $t7 := 1
                    $t7 := 1
                    // $t0 := $t7
                    i := $t7
                    // goto L3
                    $block := 2
                }
                case 4 {
                    // label L1
                    // goto L2
                    $block := 6
                }
                case 5 {
                    // label L0
                    // $t13 := borrow_local($t2)
                    $t13 := $MakePtr(false, $locals)
                    // $t14 := 43
                    $t14 := 43
                    // vector::push_back<u8>($t13, $t14)
                    A1_vector_push_back$u8$($t13, $t14)
                    // $t15 := 1
                    $t15 := 1
                    // $t1 := $t15
                    i_1 := $t15
                    // goto L7
                    $block := 7
                }
                case 6 {
                    // label L2
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, $locals)
                    // $t11 := 0
                    $t11 := 0
                    // vector::push_back<u8>($t10, $t11)
                    A1_vector_push_back$u8$($t10, $t11)
                    // $t12 := 1
                    $t12 := 1
                    // $t0 := +($t0, $t12)
                    i := $AddU64(i, $t12)
                    // goto L3
                    $block := 2
                }
                case 7 {
                    // label L7
                    // $t16 := 31
                    $t16 := 31
                    // $t17 := <=($t1, $t16)
                    $t17 := $LtEq(i_1, $t16)
                    // if ($t17) goto L5 else goto L4
                    switch $t17
                    case 0  { $block := 9 }
                    default { $block := 8 }
                }
                case 8 {
                    // label L5
                    // goto L6
                    $block := 10
                }
                case 9 {
                    // label L4
                    // $t21 := move($t2)
                    $t21 := mload($locals)
                    // ($t22, $t23) := M::decode_two_bytes1($t21)
                    $t22, $t23 := A2_M_decode_two_bytes1($t21)
                    // $t4 := $t23
                    mstore(add($locals, 64), $t23)
                    // $t3 := $t22
                    mstore(add($locals, 32), $t22)
                    // $t24 := borrow_local($t3)
                    $t24 := $MakePtr(false, add($locals, 32))
                    // $t25 := vector::length<u8>($t24)
                    $t25 := A1_vector_length$u8$($t24)
                    // $t26 := 1
                    $t26 := 1
                    // $t27 := ==($t25, $t26)
                    $t27 := $Eq($t25, $t26)
                    // if ($t27) goto L9 else goto L8
                    switch $t27
                    case 0  { $block := 12 }
                    default { $block := 11 }
                }
                case 10 {
                    // label L6
                    // $t18 := borrow_local($t2)
                    $t18 := $MakePtr(false, $locals)
                    // $t19 := 0
                    $t19 := 0
                    // vector::push_back<u8>($t18, $t19)
                    A1_vector_push_back$u8$($t18, $t19)
                    // $t20 := 1
                    $t20 := 1
                    // $t1 := +($t1, $t20)
                    i_1 := $AddU64(i_1, $t20)
                    // goto L7
                    $block := 7
                }
                case 11 {
                    // label L9
                    // goto L10
                    $block := 13
                }
                case 12 {
                    // label L8
                    // $t28 := 101
                    $t28 := 101
                    // abort($t28)
                    $Abort($t28)
                }
                case 13 {
                    // label L10
                    // $t29 := borrow_local($t4)
                    $t29 := $MakePtr(false, add($locals, 64))
                    // $t30 := vector::length<u8>($t29)
                    $t30 := A1_vector_length$u8$($t29)
                    // $t31 := 1
                    $t31 := 1
                    // $t32 := ==($t30, $t31)
                    $t32 := $Eq($t30, $t31)
                    // if ($t32) goto L12 else goto L11
                    switch $t32
                    case 0  { $block := 15 }
                    default { $block := 14 }
                }
                case 14 {
                    // label L12
                    // goto L13
                    $block := 16
                }
                case 15 {
                    // label L11
                    // $t33 := 102
                    $t33 := 102
                    // abort($t33)
                    $Abort($t33)
                }
                case 16 {
                    // label L13
                    // $t34 := borrow_local($t3)
                    $t34 := $MakePtr(false, add($locals, 32))
                    // $t35 := 0
                    $t35 := 0
                    // $t36 := vector::borrow<u8>($t34, $t35)
                    $t36 := A1_vector_borrow$u8$($t34, $t35)
                    // $t37 := read_ref($t36)
                    $t37 := $LoadU8($t36)
                    // $t38 := 42
                    $t38 := 42
                    // $t39 := ==($t37, $t38)
                    $t39 := $Eq($t37, $t38)
                    // if ($t39) goto L15 else goto L14
                    switch $t39
                    case 0  { $block := 18 }
                    default { $block := 17 }
                }
                case 17 {
                    // label L15
                    // goto L16
                    $block := 19
                }
                case 18 {
                    // label L14
                    // $t40 := 103
                    $t40 := 103
                    // abort($t40)
                    $Abort($t40)
                }
                case 19 {
                    // label L16
                    // $t41 := borrow_local($t4)
                    $t41 := $MakePtr(false, add($locals, 64))
                    // $t42 := 0
                    $t42 := 0
                    // $t43 := vector::borrow<u8>($t41, $t42)
                    $t43 := A1_vector_borrow$u8$($t41, $t42)
                    // $t44 := read_ref($t43)
                    $t44 := $LoadU8($t43)
                    // $t45 := 43
                    $t45 := 43
                    // $t46 := ==($t44, $t45)
                    $t46 := $Eq($t44, $t45)
                    // if ($t46) goto L18 else goto L17
                    switch $t46
                    case 0  { $block := 21 }
                    default { $block := 20 }
                }
                case 20 {
                    // label L18
                    // goto L19
                    $block := 22
                }
                case 21 {
                    // label L17
                    // $t47 := 104
                    $t47 := 104
                    // abort($t47)
                    $Abort($t47)
                }
                case 22 {
                    // label L19
                    // return ()
                    $Free($locals, 96)
                    leave
                }
            }
        }

        function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
        }
        function A1_vector_length$u8$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_M_decode_two_bytes1(input) -> $result0, $result1  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result0, $result1 := abi_decode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$_from_memory($t1, $t3)
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_decode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$_from_memory(headStart, dataEnd) -> value_0, value_1 {
            if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
            {
                let offset := 0
                value_0 := abi_decode_bytes1_vec$u8$_from_memory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value_1 := abi_decode_bytes1_vec$u8$_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_bytes1_vec$u8$_from_memory(offset, end) -> array {
            if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
            let length := 1
            let size := 33
            array := abi_decode_available_length__bytes1_from_memory(offset, length, size, end)
        }
        function abi_decode_available_length__bytes1_from_memory(src, length, size, end) -> array {
            array := $Malloc($CheckMemorySize(size))
            $MemoryStoreU64(array, length)
            $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
            let dst := add(array, 32)
            if gt(add(src, sub(size, 32)), end) { $Abort(93) }
            $CopyFromMemoryToMemory(src, dst, length)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $CheckMemorySize(len) -> checked_len {
            if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
            checked_len := len
        }
        function $CopyFromMemoryToMemory(src, dst, length) {
          let i := 0
          for { } lt(i, length) { i := add(i, 32) }
          {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if gt(i, length)
          {
            // clear end
            mstore(add(dst, length), 0)
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $LtEq(x, y) -> r {
            r := or(lt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_decode_two_bytes1: Succeed(Stopped) (used_gas=79598): []

// test of M::test_decode_two_u8
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_decode_two_u8" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_decode_two_u8()
        return (0, 0)
        function A2_M_test_decode_two_u8() {
            let i, i_1, v2, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28
            let $locals := $Malloc(32)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L3
                    // $t5 := 31
                    $t5 := 31
                    // $t6 := <=($t0, $t5)
                    $t6 := $LtEq(i, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t2 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t4 := 1
                    $t4 := 1
                    // $t0 := $t4
                    i := $t4
                    // goto L3
                    $block := 2
                }
                case 4 {
                    // label L1
                    // goto L2
                    $block := 6
                }
                case 5 {
                    // label L0
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, $locals)
                    // $t11 := 42
                    $t11 := 42
                    // vector::push_back<u8>($t10, $t11)
                    A1_vector_push_back$u8$($t10, $t11)
                    // $t12 := 1
                    $t12 := 1
                    // $t1 := $t12
                    i_1 := $t12
                    // goto L7
                    $block := 7
                }
                case 6 {
                    // label L2
                    // $t7 := borrow_local($t2)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := 0
                    $t8 := 0
                    // vector::push_back<u8>($t7, $t8)
                    A1_vector_push_back$u8$($t7, $t8)
                    // $t9 := 1
                    $t9 := 1
                    // $t0 := +($t0, $t9)
                    i := $AddU64(i, $t9)
                    // goto L3
                    $block := 2
                }
                case 7 {
                    // label L7
                    // $t13 := 31
                    $t13 := 31
                    // $t14 := <=($t1, $t13)
                    $t14 := $LtEq(i_1, $t13)
                    // if ($t14) goto L5 else goto L4
                    switch $t14
                    case 0  { $block := 9 }
                    default { $block := 8 }
                }
                case 8 {
                    // label L5
                    // goto L6
                    $block := 10
                }
                case 9 {
                    // label L4
                    // $t18 := borrow_local($t2)
                    $t18 := $MakePtr(false, $locals)
                    // $t19 := 43
                    $t19 := 43
                    // vector::push_back<u8>($t18, $t19)
                    A1_vector_push_back$u8$($t18, $t19)
                    // $t20 := move($t2)
                    $t20 := mload($locals)
                    // ($t21, $t22) := M::decode_two_u8($t20)
                    $t21, $t22 := A2_M_decode_two_u8($t20)
                    // $t23 := 42
                    $t23 := 42
                    // $t24 := ==($t21, $t23)
                    $t24 := $Eq($t21, $t23)
                    // if ($t24) goto L9 else goto L8
                    switch $t24
                    case 0  { $block := 12 }
                    default { $block := 11 }
                }
                case 10 {
                    // label L6
                    // $t15 := borrow_local($t2)
                    $t15 := $MakePtr(false, $locals)
                    // $t16 := 0
                    $t16 := 0
                    // vector::push_back<u8>($t15, $t16)
                    A1_vector_push_back$u8$($t15, $t16)
                    // $t17 := 1
                    $t17 := 1
                    // $t1 := +($t1, $t17)
                    i_1 := $AddU64(i_1, $t17)
                    // goto L7
                    $block := 7
                }
                case 11 {
                    // label L9
                    // goto L10
                    $block := 13
                }
                case 12 {
                    // label L8
                    // $t25 := 101
                    $t25 := 101
                    // abort($t25)
                    $Abort($t25)
                }
                case 13 {
                    // label L10
                    // $t26 := 43
                    $t26 := 43
                    // $t27 := ==($t22, $t26)
                    $t27 := $Eq($t22, $t26)
                    // if ($t27) goto L12 else goto L11
                    switch $t27
                    case 0  { $block := 15 }
                    default { $block := 14 }
                }
                case 14 {
                    // label L12
                    // goto L13
                    $block := 16
                }
                case 15 {
                    // label L11
                    // $t28 := 102
                    $t28 := 102
                    // abort($t28)
                    $Abort($t28)
                }
                case 16 {
                    // label L13
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_M_decode_two_u8(input) -> $result0, $result1  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result0, $result1 := abi_decode_tuple_$uint8_uint8$_$u8_u8$_from_memory($t1, $t3)
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_decode_tuple_$uint8_uint8$_$u8_u8$_from_memory(headStart, dataEnd) -> value_0, value_1 {
            if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
            {
                let offset := 0
                value_0 := abi_decode_uint8_from_memory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value_1 := abi_decode_uint8_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_uint8_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_uint8(value)
        }
        function validator_uint8(value) {
            if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
        }
        function cleanup_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $LtEq(x, y) -> r {
            r := or(lt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of M::test_decode_two_u8: Succeed(Stopped) (used_gas=77393): []

// test of M::test_encode_packed_string
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_encode_packed_string" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_encode_packed_string()
        return (0, 0)
        function A2_M_test_encode_packed_string() {
            let $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t5 := 100
                    $t5 := 100
                    // abort($t5)
                    $Abort($t5)
                }
                case 4 {
                    // $t0 := []
                    $t0 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t0, 0)
                    $MemoryStoreU64(add($t0, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t0, 32))
                    // $t1 := []
                    $t1 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t1, 0)
                    $MemoryStoreU64(add($t1, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t1, 32))
                    // $t2 := M::encode_packed_string($t0, $t1)
                    $t2 := A2_M_encode_packed_string($t0, $t1)
                    // $t3 := []
                    $t3 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t3, 0)
                    $MemoryStoreU64(add($t3, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t3, 32))
                    // $t4 := ==($t2, $t3)
                    $t4 := $Eq_$vec$u8$$($t2, $t3)
                    // if ($t4) goto L1 else goto L0
                    switch $t4
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // $t6 := [49]
                    $t6 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t6, 1)
                    $MemoryStoreU64(add($t6, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_2868747976(add($t6, 32))
                    // $t7 := [50]
                    $t7 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t7, 1)
                    $MemoryStoreU64(add($t7, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_4015750317(add($t7, 32))
                    // $t8 := M::encode_packed_string($t6, $t7)
                    $t8 := A2_M_encode_packed_string($t6, $t7)
                    // $t9 := [49, 50]
                    $t9 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t9, 2)
                    $MemoryStoreU64(add($t9, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_141265791(add($t9, 32))
                    // $t10 := ==($t8, $t9)
                    $t10 := $Eq_$vec$u8$$($t8, $t9)
                    // if ($t10) goto L4 else goto L3
                    switch $t10
                    case 0  { $block := 7 }
                    default { $block := 6 }
                }
                case 6 {
                    // label L4
                    // goto L5
                    $block := 8
                }
                case 7 {
                    // label L3
                    // $t11 := 101
                    $t11 := 101
                    // abort($t11)
                    $Abort($t11)
                }
                case 8 {
                    // label L5
                    // $t12 := []
                    $t12 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t12, 0)
                    $MemoryStoreU64(add($t12, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t12, 32))
                    // $t13 := [97, 98, 99]
                    $t13 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t13, 3)
                    $MemoryStoreU64(add($t13, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t13, 32))
                    // $t14 := M::encode_packed_string($t12, $t13)
                    $t14 := A2_M_encode_packed_string($t12, $t13)
                    // $t15 := [97, 98, 99]
                    $t15 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(3)))
                    $MemoryStoreU64($t15, 3)
                    $MemoryStoreU64(add($t15, 8), $ClosestGreaterPowerOfTwo(3))
                    copy_literal_string_to_memory_2053440334(add($t15, 32))
                    // $t16 := ==($t14, $t15)
                    $t16 := $Eq_$vec$u8$$($t14, $t15)
                    // if ($t16) goto L7 else goto L6
                    switch $t16
                    case 0  { $block := 10 }
                    default { $block := 9 }
                }
                case 9 {
                    // label L7
                    // goto L8
                    $block := 11
                }
                case 10 {
                    // label L6
                    // $t17 := 102
                    $t17 := 102
                    // abort($t17)
                    $Abort($t17)
                }
                case 11 {
                    // label L8
                    // $t18 := [97]
                    $t18 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(1)))
                    $MemoryStoreU64($t18, 1)
                    $MemoryStoreU64(add($t18, 8), $ClosestGreaterPowerOfTwo(1))
                    copy_literal_string_to_memory_371573306(add($t18, 32))
                    // $t19 := [98, 99]
                    $t19 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t19, 2)
                    $MemoryStoreU64(add($t19, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_3119208230(add($t19, 32))
                    // $t20 := M::encode_packed_string($t18, $t19)
                    $t20 := A2_M_encode_packed_string($t18, $t19)
                    // $t21 := [100, 101]
                    $t21 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(2)))
                    $MemoryStoreU64($t21, 2)
                    $MemoryStoreU64(add($t21, 8), $ClosestGreaterPowerOfTwo(2))
                    copy_literal_string_to_memory_1933910203(add($t21, 32))
                    // $t22 := M::encode_packed_string($t20, $t21)
                    $t22 := A2_M_encode_packed_string($t20, $t21)
                    // $t23 := [97, 98, 99, 100, 101]
                    $t23 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(5)))
                    $MemoryStoreU64($t23, 5)
                    $MemoryStoreU64(add($t23, 8), $ClosestGreaterPowerOfTwo(5))
                    copy_literal_string_to_memory_3871831907(add($t23, 32))
                    // $t24 := ==($t22, $t23)
                    $t24 := $Eq_$vec$u8$$($t22, $t23)
                    // if ($t24) goto L10 else goto L9
                    switch $t24
                    case 0  { $block := 13 }
                    default { $block := 12 }
                }
                case 12 {
                    // label L10
                    // goto L11
                    $block := 14
                }
                case 13 {
                    // label L9
                    // $t25 := 103
                    $t25 := 103
                    // abort($t25)
                    $Abort($t25)
                }
                case 14 {
                    // label L11
                    // $t26 := [116, 101, 115, 116]
                    $t26 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t26, 4)
                    $MemoryStoreU64(add($t26, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_1610556060(add($t26, 32))
                    // $t27 := []
                    $t27 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(0)))
                    $MemoryStoreU64($t27, 0)
                    $MemoryStoreU64(add($t27, 8), $ClosestGreaterPowerOfTwo(0))
                    copy_literal_string_to_memory_21418693(add($t27, 32))
                    // $t28 := M::encode_packed_string($t26, $t27)
                    $t28 := A2_M_encode_packed_string($t26, $t27)
                    // $t29 := [116, 101, 115, 116]
                    $t29 := $Malloc(add(32, $ClosestGreaterPowerOfTwo(4)))
                    $MemoryStoreU64($t29, 4)
                    $MemoryStoreU64(add($t29, 8), $ClosestGreaterPowerOfTwo(4))
                    copy_literal_string_to_memory_1610556060(add($t29, 32))
                    // $t30 := ==($t28, $t29)
                    $t30 := $Eq_$vec$u8$$($t28, $t29)
                    // if ($t30) goto L13 else goto L12
                    switch $t30
                    case 0  { $block := 16 }
                    default { $block := 15 }
                }
                case 15 {
                    // label L13
                    // goto L14
                    $block := 17
                }
                case 16 {
                    // label L12
                    // $t31 := 104
                    $t31 := 104
                    // abort($t31)
                    $Abort($t31)
                }
                case 17 {
                    // label L14
                    // return ()
                    leave
                }
            }
        }

        function A2_M_encode_packed_string(input_1,input_2) -> $result  {
            $result := mload(0)
            let $t2 := add($result, 32)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := abi_encode_tuple_packed_$string_string$_$vec$u8$_vec$u8$$_not_padded_inplace($t2,input_1,input_2)
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t4 := sub($t3, $t2)
            $MemoryStoreU64($result, $t4)
            let $t5 := $ClosestGreaterPowerOfTwo($t4)
            $MemoryStoreU64(add($result, 8), $t5)
            mstore(0, $t3)
        }
        function abi_encode_tuple_packed_$string_string$_$vec$u8$_vec$u8$$_not_padded_inplace(pos ,value_0, value_1) -> end {
            pos := abi_encode_string_not_padded_inplace(value_0,  pos)
            pos := abi_encode_string_not_padded_inplace(value_1,  pos)
            end := pos
        }
        function abi_encode_string_not_padded_inplace(value, pos) -> end{
            let size := $MemoryLoadU64(value)
            $CopyMemory(add(value, 0x20), pos, size)
            end := add(pos, size)
        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function copy_literal_string_to_memory_1610556060(value) {
            $MemoryStoreU8(value, 116)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
            $MemoryStoreU8(value, 115)
            value := add(value, 1)
            $MemoryStoreU8(value, 116)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_21418693(value) {
        }
        function copy_literal_string_to_memory_3871831907(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
            $MemoryStoreU8(value, 100)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_1933910203(value) {
            $MemoryStoreU8(value, 100)
            value := add(value, 1)
            $MemoryStoreU8(value, 101)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_3119208230(value) {
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_371573306(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2053440334(value) {
            $MemoryStoreU8(value, 97)
            value := add(value, 1)
            $MemoryStoreU8(value, 98)
            value := add(value, 1)
            $MemoryStoreU8(value, 99)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_141265791(value) {
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_4015750317(value) {
            $MemoryStoreU8(value, 50)
            value := add(value, 1)
        }
        function copy_literal_string_to_memory_2868747976(value) {
            $MemoryStoreU8(value, 49)
            value := add(value, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_encode_packed_string: Succeed(Stopped) (used_gas=10647): []

// test of M::test_encode_packed_uint16
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_encode_packed_uint16" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_encode_packed_uint16()
        return (0, 0)
        function A2_M_test_encode_packed_uint16() {
            let $t1, $t2, $t3, $t4, $t5, $t6, $t7
            let $locals := $Malloc(32)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // goto L2
                    $block := 5
                }
                case 3 {
                    // label L0
                    // $t7 := 101
                    $t7 := 101
                    // abort($t7)
                    $Abort($t7)
                }
                case 4 {
                    // $t1 := 41
                    $t1 := 41
                    // $t2 := 42
                    $t2 := 42
                    // $t0 := M::encode_packed($t1, $t2)
                    mstore($locals, A2_M_encode_packed($t1, $t2))
                    // $t3 := borrow_local($t0)
                    $t3 := $MakePtr(false, $locals)
                    // $t4 := vector::length<u8>($t3)
                    $t4 := A1_vector_length$u8$($t3)
                    // $t5 := 4
                    $t5 := 4
                    // $t6 := ==($t4, $t5)
                    $t6 := $Eq($t4, $t5)
                    // if ($t6) goto L1 else goto L0
                    switch $t6
                    case 0  { $block := 3 }
                    default { $block := 2 }
                }
                case 5 {
                    // label L2
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_length$u8$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_M_encode_packed(input_1,input_2) -> $result  {
            $result := mload(0)
            let $t2 := add($result, 32)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := abi_encode_tuple_packed_$uint16_uint16$_$u64_u64$_not_padded_inplace($t2,input_1,input_2)
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t4 := sub($t3, $t2)
            $MemoryStoreU64($result, $t4)
            let $t5 := $ClosestGreaterPowerOfTwo($t4)
            $MemoryStoreU64(add($result, 8), $t5)
            mstore(0, $t3)
        }
        function abi_encode_tuple_packed_$uint16_uint16$_$u64_u64$_not_padded_inplace(pos ,value_0, value_1) -> end {
            abi_encode_uint16(value_0,  pos)
            pos := add(pos, 2)
            abi_encode_uint16(value_1,  pos)
            pos := add(pos, 2)
            end := pos
        }
        function abi_encode_uint16(value, pos) {
            mstore(pos, left_align_uint16(cleanup_uint16(value)))
        }
        function left_align_uint16(value) -> aligned {
            aligned := shl(240, value)
        }
        function cleanup_uint16(value) -> cleaned {
            cleaned := and(value, 0xffff)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_encode_packed_uint16: Succeed(Stopped) (used_gas=776): []

// test of M::test_marshalling_two_bytes1
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_marshalling_two_bytes1" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_marshalling_two_bytes1()
        return (0, 0)
        function A2_M_test_marshalling_two_bytes1() {
            let i, i_1, v_, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26
            let $locals := $Malloc(32)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L3
                    // $t7 := 31
                    $t7 := 31
                    // $t8 := <=($t0, $t7)
                    $t8 := $LtEq(i, $t7)
                    // if ($t8) goto L1 else goto L0
                    switch $t8
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t2 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t4 := borrow_local($t2)
                    $t4 := $MakePtr(false, $locals)
                    // $t5 := 42
                    $t5 := 42
                    // vector::push_back<u8>($t4, $t5)
                    A1_vector_push_back$u8$($t4, $t5)
                    // $t6 := 1
                    $t6 := 1
                    // $t0 := $t6
                    i := $t6
                    // goto L3
                    $block := 2
                }
                case 4 {
                    // label L1
                    // goto L2
                    $block := 6
                }
                case 5 {
                    // label L0
                    // $t12 := borrow_local($t2)
                    $t12 := $MakePtr(false, $locals)
                    // $t13 := 43
                    $t13 := 43
                    // vector::push_back<u8>($t12, $t13)
                    A1_vector_push_back$u8$($t12, $t13)
                    // $t14 := 1
                    $t14 := 1
                    // $t1 := $t14
                    i_1 := $t14
                    // goto L7
                    $block := 7
                }
                case 6 {
                    // label L2
                    // $t9 := borrow_local($t2)
                    $t9 := $MakePtr(false, $locals)
                    // $t10 := 0
                    $t10 := 0
                    // vector::push_back<u8>($t9, $t10)
                    A1_vector_push_back$u8$($t9, $t10)
                    // $t11 := 1
                    $t11 := 1
                    // $t0 := +($t0, $t11)
                    i := $AddU64(i, $t11)
                    // goto L3
                    $block := 2
                }
                case 7 {
                    // label L7
                    // $t15 := 31
                    $t15 := 31
                    // $t16 := <=($t1, $t15)
                    $t16 := $LtEq(i_1, $t15)
                    // if ($t16) goto L5 else goto L4
                    switch $t16
                    case 0  { $block := 9 }
                    default { $block := 8 }
                }
                case 8 {
                    // label L5
                    // goto L6
                    $block := 10
                }
                case 9 {
                    // label L4
                    // $t20 := copy($t2)
                    $t20 := mload($locals)
                    // ($t21, $t22) := M::decode_two_bytes1($t20)
                    $t21, $t22 := A2_M_decode_two_bytes1($t20)
                    // $t23 := M::encode_two_bytes1($t21, $t22)
                    $t23 := A2_M_encode_two_bytes1($t21, $t22)
                    // $t24 := move($t2)
                    $t24 := mload($locals)
                    // $t25 := ==($t24, $t23)
                    $t25 := $Eq_$vec$u8$$($t24, $t23)
                    // if ($t25) goto L9 else goto L8
                    switch $t25
                    case 0  { $block := 12 }
                    default { $block := 11 }
                }
                case 10 {
                    // label L6
                    // $t17 := borrow_local($t2)
                    $t17 := $MakePtr(false, $locals)
                    // $t18 := 0
                    $t18 := 0
                    // vector::push_back<u8>($t17, $t18)
                    A1_vector_push_back$u8$($t17, $t18)
                    // $t19 := 1
                    $t19 := 1
                    // $t1 := +($t1, $t19)
                    i_1 := $AddU64(i_1, $t19)
                    // goto L7
                    $block := 7
                }
                case 11 {
                    // label L9
                    // goto L10
                    $block := 13
                }
                case 12 {
                    // label L8
                    // $t26 := 101
                    $t26 := 101
                    // abort($t26)
                    $Abort($t26)
                }
                case 13 {
                    // label L10
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_M_encode_two_bytes1(input_1,input_2) -> $result  {
            $result := mload(0)
            let $t2 := add($result, 32)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := abi_encode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$($t2,input_1,input_2)
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t4 := sub($t3, $t2)
            $MemoryStoreU64($result, $t4)
            let $t5 := $ClosestGreaterPowerOfTwo($t4)
            $MemoryStoreU64(add($result, 8), $t5)
            mstore(0, $t3)
        }
        function A2_M_decode_two_bytes1(input) -> $result0, $result1  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result0, $result1 := abi_decode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$_from_memory($t1, $t3)
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_decode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$_from_memory(headStart, dataEnd) -> value_0, value_1 {
            if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
            {
                let offset := 0
                value_0 := abi_decode_bytes1_vec$u8$_from_memory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value_1 := abi_decode_bytes1_vec$u8$_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_bytes1_vec$u8$_from_memory(offset, end) -> array {
            if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
            let length := 1
            let size := 33
            array := abi_decode_available_length__bytes1_from_memory(offset, length, size, end)
        }
        function abi_decode_available_length__bytes1_from_memory(src, length, size, end) -> array {
            array := $Malloc($CheckMemorySize(size))
            $MemoryStoreU64(array, length)
            $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
            let dst := add(array, 32)
            if gt(add(src, sub(size, 32)), end) { $Abort(93) }
            $CopyFromMemoryToMemory(src, dst, length)
        }
        function abi_encode_tuple_$bytes1_bytes1$_$vec$u8$_vec$u8$$(headStart ,value_0, value_1) -> tail {
            tail := add(headStart, 64)
            abi_encode_bytes1(value_0, add(headStart, 0))
            abi_encode_bytes1(value_1, add(headStart, 32))
        }
        function abi_encode_bytes1(value, pos) {
            let size := $MemoryLoadU64(value)
            if iszero(eq(size, 1)) { $Abort(92) }
            $CopyMemory(add(value, 0x20), pos, size)
        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $CheckMemorySize(len) -> checked_len {
            if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
            checked_len := len
        }
        function $CopyFromMemoryToMemory(src, dst, length) {
          let i := 0
          for { } lt(i, length) { i := add(i, 32) }
          {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if gt(i, length)
          {
            // clear end
            mstore(add(dst, length), 0)
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $LtEq(x, y) -> r {
            r := or(lt(x, y), eq(x, y))
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_marshalling_two_bytes1: Succeed(Stopped) (used_gas=78906): []

// test of M::test_marshalling_two_u8
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_M_test_marshalling_two_u8" {
    code {
        mstore(0, memoryguard(160))
        A2_M_test_marshalling_two_u8()
        return (0, 0)
        function A2_M_test_marshalling_two_u8() {
            let i, i_1, v1, v2, v_, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34
            let $locals := $Malloc(32)
            let $block := 3
            for {} true {} {
                switch $block
                case 2 {
                    // label L3
                    // $t7 := 31
                    $t7 := 31
                    // $t8 := <=($t0, $t7)
                    $t8 := $LtEq(i, $t7)
                    // if ($t8) goto L1 else goto L0
                    switch $t8
                    case 0  { $block := 5 }
                    default { $block := 4 }
                }
                case 3 {
                    // $t2 := vector::empty<u8>()
                    mstore($locals, A1_vector_empty$u8$())
                    // $t6 := 1
                    $t6 := 1
                    // $t0 := $t6
                    i := $t6
                    // goto L3
                    $block := 2
                }
                case 4 {
                    // label L1
                    // goto L2
                    $block := 6
                }
                case 5 {
                    // label L0
                    // $t12 := borrow_local($t2)
                    $t12 := $MakePtr(false, $locals)
                    // $t13 := 42
                    $t13 := 42
                    // vector::push_back<u8>($t12, $t13)
                    A1_vector_push_back$u8$($t12, $t13)
                    // $t14 := 1
                    $t14 := 1
                    // $t1 := $t14
                    i_1 := $t14
                    // goto L7
                    $block := 7
                }
                case 6 {
                    // label L2
                    // $t9 := borrow_local($t2)
                    $t9 := $MakePtr(false, $locals)
                    // $t10 := 0
                    $t10 := 0
                    // vector::push_back<u8>($t9, $t10)
                    A1_vector_push_back$u8$($t9, $t10)
                    // $t11 := 1
                    $t11 := 1
                    // $t0 := +($t0, $t11)
                    i := $AddU64(i, $t11)
                    // goto L3
                    $block := 2
                }
                case 7 {
                    // label L7
                    // $t15 := 31
                    $t15 := 31
                    // $t16 := <=($t1, $t15)
                    $t16 := $LtEq(i_1, $t15)
                    // if ($t16) goto L5 else goto L4
                    switch $t16
                    case 0  { $block := 9 }
                    default { $block := 8 }
                }
                case 8 {
                    // label L5
                    // goto L6
                    $block := 10
                }
                case 9 {
                    // label L4
                    // $t20 := borrow_local($t2)
                    $t20 := $MakePtr(false, $locals)
                    // $t21 := 43
                    $t21 := 43
                    // vector::push_back<u8>($t20, $t21)
                    A1_vector_push_back$u8$($t20, $t21)
                    // $t22 := copy($t2)
                    $t22 := mload($locals)
                    // ($t23, $t24) := M::decode_two_u8($t22)
                    $t23, $t24 := A2_M_decode_two_u8($t22)
                    // $t25 := 42
                    $t25 := 42
                    // $t26 := ==($t23, $t25)
                    $t26 := $Eq($t23, $t25)
                    // if ($t26) goto L9 else goto L8
                    switch $t26
                    case 0  { $block := 12 }
                    default { $block := 11 }
                }
                case 10 {
                    // label L6
                    // $t17 := borrow_local($t2)
                    $t17 := $MakePtr(false, $locals)
                    // $t18 := 0
                    $t18 := 0
                    // vector::push_back<u8>($t17, $t18)
                    A1_vector_push_back$u8$($t17, $t18)
                    // $t19 := 1
                    $t19 := 1
                    // $t1 := +($t1, $t19)
                    i_1 := $AddU64(i_1, $t19)
                    // goto L7
                    $block := 7
                }
                case 11 {
                    // label L9
                    // goto L10
                    $block := 13
                }
                case 12 {
                    // label L8
                    // $t27 := 101
                    $t27 := 101
                    // abort($t27)
                    $Abort($t27)
                }
                case 13 {
                    // label L10
                    // $t28 := 43
                    $t28 := 43
                    // $t29 := ==($t24, $t28)
                    $t29 := $Eq($t24, $t28)
                    // if ($t29) goto L12 else goto L11
                    switch $t29
                    case 0  { $block := 15 }
                    default { $block := 14 }
                }
                case 14 {
                    // label L12
                    // goto L13
                    $block := 16
                }
                case 15 {
                    // label L11
                    // $t30 := 102
                    $t30 := 102
                    // abort($t30)
                    $Abort($t30)
                }
                case 16 {
                    // label L13
                    // $t31 := M::encode_two_u8($t23, $t24)
                    $t31 := A2_M_encode_two_u8($t23, $t24)
                    // $t32 := move($t2)
                    $t32 := mload($locals)
                    // $t33 := ==($t32, $t31)
                    $t33 := $Eq_$vec$u8$$($t32, $t31)
                    // if ($t33) goto L15 else goto L14
                    switch $t33
                    case 0  { $block := 18 }
                    default { $block := 17 }
                }
                case 17 {
                    // label L15
                    // goto L16
                    $block := 19
                }
                case 18 {
                    // label L14
                    // $t34 := 103
                    $t34 := 103
                    // abort($t34)
                    $Abort($t34)
                }
                case 19 {
                    // label L16
                    // return ()
                    $Free($locals, 32)
                    leave
                }
            }
        }

        function A2_M_encode_two_u8(v1,v2) -> $result  {
            $result := mload(0)
            let $t2 := add($result, 32)
            if gt($t2, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t3 := abi_encode_tuple_$uint8_uint8$_$u8_u8$($t2,v1,v2)
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            let $t4 := sub($t3, $t2)
            $MemoryStoreU64($result, $t4)
            let $t5 := $ClosestGreaterPowerOfTwo($t4)
            $MemoryStoreU64(add($result, 8), $t5)
            mstore(0, $t3)
        }
        function A1_vector_push_back$u8$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 1)))
            $StoreU8(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 1)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_M_decode_two_u8(input) -> $result0, $result1  {
            let $t1 := add(input, 32)
            let $t2 := $MemoryLoadU64(input)
            let $t3 := add($t1, $t2)
            if gt($t1, 0xffffffffffffffff) { $AbortBuiltin() }
            if gt($t3, 0xffffffffffffffff) { $AbortBuiltin() }
            $result0, $result1 := abi_decode_tuple_$uint8_uint8$_$u8_u8$_from_memory($t1, $t3)
        }
        function A1_vector_empty$u8$() -> vector {
            vector := $Malloc(34)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function abi_decode_tuple_$uint8_uint8$_$u8_u8$_from_memory(headStart, dataEnd) -> value_0, value_1 {
            if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
            {
                let offset := 0
                value_0 := abi_decode_uint8_from_memory(add(headStart, offset), dataEnd)
            }
            {
                let offset := 32
                value_1 := abi_decode_uint8_from_memory(add(headStart, offset), dataEnd)
            }
        }
        function abi_decode_uint8_from_memory(offset, end) -> value {
            value := mload(offset)
            validator_uint8(value)
        }
        function validator_uint8(value) {
            if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
        }
        function cleanup_uint8(value) -> cleaned {
            cleaned := and(value, 0xff)
        }
        function abi_encode_tuple_$uint8_uint8$_$u8_u8$(headStart ,value_0, value_1) -> tail {
            tail := add(headStart, 64)
            abi_encode_uint8(value_0, add(headStart, 0))
            abi_encode_uint8(value_1, add(headStart, 32))
        }
        function abi_encode_uint8(value, pos) {
            mstore(pos, cleanup_uint8(value))
        }
        function $Eq_$vec$u8$$(x, y) -> res
        {
            res := $EqVector(x, y, 1)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $StoreU8(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU8(offs, val)
          }
          default {
            $StorageStoreU8(offs, val)
          }
        }
        function $MemoryStoreU8(offs, val) {
          // Shortcut via special instruction
          mstore8(offs, val)
        }
        function $StorageStoreU8(offs, val) {
          $StorageStoreBytes(offs, 1, val)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $AddU64(x, y) -> r {
            if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
            r := add(x, y)
        }
        function $LtEq(x, y) -> r {
            r := or(lt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $EqVector(x, y, elem_size) -> r {
            let len_x := $MemoryLoadU64(x)
            let len_y := $MemoryLoadU64(y)
            if $Neq(len_x, len_y) {
                r := false
                leave
            }
            let data_size_bytes := mul(elem_size, len_x)
            let num_words, overflow_bytes := $ToWordOffs(data_size_bytes)
            let i := 0
            for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                if $Neq(mload(add(x, add(i, 32))), mload(add(y, add(i, 32)))) {
                    r := false
                    leave
                }
            }
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let x_overflow := mload(add(x, add(overflow_offs, 32)))
            let y_overflow := mload(add(y, add(overflow_offs, 32)))
            r := eq(or(mask, x_overflow), or(mask, y_overflow))
        }
        function $Neq(x, y) -> r {
            r := $LogicalNot(eq(x, y))
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of M::test_marshalling_two_u8: Succeed(Stopped) (used_gas=78803): []



!! Move-To-Yul Diagnostics:
 warning: unused alias
  ┌─ tests/TestABINative.move:3:20
  │
3 │      use Evm::Evm::concat;
  │                    ^^^^^^ Unused 'use' of alias 'concat'. Consider removing it
