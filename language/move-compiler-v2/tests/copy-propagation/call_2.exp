============ initial bytecode ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 0
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t3)
  3: $t5 := borrow_local($t2)
  4: m::update($t5)
  5: $t1 := infer($t4)
  6: return $t1
}

============ after AvailableCopiesAnalysisProcessor: ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
     # before: {}, after: {}
  0: $t1 := 0
     # before: {}, after: {}
  1: write_ref($t0, $t1)
     # before: {}, after: {}
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
     # before: {}, after: {}
  0: $t2 := infer($t0)
     # before: {}, after: {$t3 := $t0}
  1: $t3 := infer($t0)
     # before: {$t3 := $t0}, after: {$t3 := $t0, $t4 := $t3}
  2: $t4 := infer($t3)
     # before: {$t3 := $t0, $t4 := $t3}, after: {$t3 := $t0, $t4 := $t3}
  3: $t5 := borrow_local($t2)
     # before: {$t3 := $t0, $t4 := $t3}, after: {$t3 := $t0, $t4 := $t3}
  4: m::update($t5)
     # before: {$t3 := $t0, $t4 := $t3}, after: {$t1 := $t4, $t3 := $t0, $t4 := $t3}
  5: $t1 := infer($t4)
     # before: {$t1 := $t4, $t3 := $t0, $t4 := $t3}, after: {$t1 := $t4, $t3 := $t0, $t4 := $t3}
  6: return $t1
}

============ after CopyPropagation: ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 0
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t0)
  2: $t4 := infer($t0)
  3: $t5 := borrow_local($t2)
  4: m::update($t5)
  5: $t1 := infer($t0)
  6: return $t0
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::update($t0: &mut u64) {
     var $t1: u64
  0: $t1 := 0
  1: write_ref($t0, $t1)
  2: return ()
}


[variant baseline]
fun m::test($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: &mut u64
  0: $t2 := infer($t0)
  1: $t5 := borrow_local($t2)
  2: m::update($t5)
  3: return $t0
}
