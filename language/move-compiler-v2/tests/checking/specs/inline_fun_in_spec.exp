// -- Model dump before bytecode pipeline
module 0x42::m {
    spec {
      invariant forall a: address: TypeDomain<address>(): Implies(exists<m::S>(a), {
      let (x: address): (address) = Tuple(a);
      {
        let r: bool = {
          let (a: address): (address) = Tuple(x);
          Lt(select m::S.f<m::S>({
            let (a: address): (address) = Tuple(a);
            global<m::S>(a)
          }), 10)
        };
        r
      }
    });
    }

    struct S {
        f: u64,
    }
    spec {
      invariant {
      let (x: num): (num) = Tuple(select m::S.f());
      {
        let r: bool = {
          let (x: num): (num) = Tuple(x);
          Gt(x, 0)
        };
        r
      }
    };
    }

    private fun function_code_spec_block(x: u64): u64 {
        spec {
          assert {
          let (x: num): (num) = Tuple($t0);
          {
            let r: bool = {
              let (y: num): (num) = Tuple(x);
              Gt(y, 0)
            };
            r
          }
        };
        }
        ;
        Add<u64>(x, 1)
    }
    private fun function_spec_block(x: u64): u64 {
        Add<u64>(x, 1)
    }
    spec {
      ensures Eq<u64>(result0(), {
      let (x: num): (num) = Tuple($t0);
      {
        let r: num = {
          let (x: num): (num) = Tuple(x);
          Add(x, 1)
        };
        r
      }
    });
    }

} // end 0x42::m
