// ---- Model Dump
module 0x42::mathtest2 {
    spec fun $fun2(a: u64,b: u64,c: u64): u64 {
        Cast(Add(Add(Mul(7, Cast(a)), Mul(11, Cast(b))), Mul(13, Cast(c))))
    }
} // end 0x42::mathtest2
module 0x42::mathtest {
    spec fun $fun1(a: u64,b: u64,c: u64): u64 {
        Cast(Add(Add(Mul(2, Cast(a)), Mul(3, Cast(b))), Mul(5, Cast(c))))
    }
} // end 0x42::mathtest
module 0x42::test {
    use 0x42::mathtest; // resolved as: 0x42::mathtest
    use 0x42::mathtest2; // resolved as: 0x42::mathtest2
    private fun test_nested_fun1() {
        {
          let a: u64 = {
            let (a: u64, b: u64, c: u64) = Tuple(2, {
              let (a: u64, b: u64, c: u64) = Tuple(3, {
                let (a: u64, b: u64, c: u64) = Tuple(4, 5, 6);
                Cast(Add<u128>(Add<u128>(Mul<u128>(7, Cast(a)), Mul<u128>(11, Cast(b))), Mul<u128>(13, Cast(c))))
              }, 7);
              Cast(Add<u128>(Add<u128>(Mul<u128>(2, Cast(a)), Mul<u128>(3, Cast(b))), Mul<u128>(5, Cast(c))))
            }, {
              let (a: u64, b: u64, c: u64) = Tuple(8, 9, {
                let (a: u64, b: u64, c: u64) = Tuple(10, {
                  let (a: u64, b: u64, c: u64) = Tuple(11, 12, 13);
                  Cast(Add<u128>(Add<u128>(Mul<u128>(7, Cast(a)), Mul<u128>(11, Cast(b))), Mul<u128>(13, Cast(c))))
                }, 14);
                Cast(Add<u128>(Add<u128>(Mul<u128>(2, Cast(a)), Mul<u128>(3, Cast(b))), Mul<u128>(5, Cast(c))))
              });
              Cast(Add<u128>(Add<u128>(Mul<u128>(7, Cast(a)), Mul<u128>(11, Cast(b))), Mul<u128>(13, Cast(c))))
            });
            Cast(Add<u128>(Add<u128>(Mul<u128>(2, Cast(a)), Mul<u128>(3, Cast(b))), Mul<u128>(5, Cast(c))))
          };
          if Eq<u64>(a, 81911) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
    spec fun $test_nested_fun1() {
        {
          let a: u64 = mathtest::$fun1(2, mathtest::$fun1(3, mathtest2::$fun2(4, 5, 6), 7), mathtest2::$fun2(8, 9, mathtest::$fun1(10, mathtest2::$fun2(11, 12, 13), 14)));
          Tuple()
        }
    }
} // end 0x42::test
