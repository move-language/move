============ initial bytecode ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
  0: $t4 := 0
  1: $t3 := infer($t4)
  2: label L0
  3: $t5 := <($t3, $t0)
  4: if ($t5) goto 5 else goto 12
  5: label L2
  6: $t1 := infer($t2)
  7: $t2 := infer($t1)
  8: $t7 := 1
  9: $t6 := +($t3, $t7)
 10: $t3 := infer($t6)
 11: goto 14
 12: label L3
 13: goto 16
 14: label L4
 15: goto 2
 16: label L1
 17: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t3 := 0
  1: $t2 := infer($t3)
  2: label L0
  3: $t4 := <($t2, $t0)
  4: if ($t4) goto 5 else goto 11
  5: label L2
  6: $t1 := infer($t1)
  7: $t6 := 1
  8: $t5 := +($t2, $t6)
  9: $t2 := infer($t5)
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 2
 15: label L1
 16: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
  0: $t4 := 0
  1: $t3 := move($t4)
  2: label L0
  3: $t5 := <($t3, $t0)
  4: if ($t5) goto 5 else goto 12
  5: label L2
  6: $t1 := move($t2)
  7: $t2 := move($t1)
  8: $t7 := 1
  9: $t6 := +($t3, $t7)
 10: $t3 := move($t6)
 11: goto 14
 12: label L3
 13: goto 16
 14: label L4
 15: goto 2
 16: label L1
 17: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
  0: $t3 := 0
  1: $t2 := move($t3)
  2: label L0
  3: $t4 := <($t2, $t0)
  4: if ($t4) goto 5 else goto 10
  5: label L2
  6: $t6 := 1
  7: $t5 := +($t2, $t6)
  8: $t2 := move($t5)
  9: goto 12
 10: label L3
 11: goto 14
 12: label L4
 13: goto 2
 14: label L1
 15: return ()
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: u64
     # live vars: $t0, $t1, $t2
     # events: b:$t0, b:$t1, b:$t2, b:$t4
  0: $t4 := 0
     # live vars: $t0, $t2, $t4
     # events: e:$t4, b:$t3
  1: $t3 := move($t4)
     # live vars: $t0, $t2, $t3
  2: label L0
     # live vars: $t0, $t2, $t3
     # events: b:$t5
  3: $t5 := <($t3, $t0)
     # live vars: $t0, $t2, $t3, $t5
     # events: e:$t5
  4: if ($t5) goto 5 else goto 12
     # live vars: $t0, $t2, $t3
  5: label L2
     # live vars: $t0, $t2, $t3
  6: $t1 := move($t2)
     # live vars: $t0, $t1, $t3
     # events: e:$t1
  7: $t2 := move($t1)
     # live vars: $t0, $t2, $t3
     # events: b:$t7
  8: $t7 := 1
     # live vars: $t0, $t2, $t3, $t7
     # events: e:$t7, b:$t6
  9: $t6 := +($t3, $t7)
     # live vars: $t0, $t2, $t6
     # events: e:$t6
 10: $t3 := move($t6)
     # live vars: $t0, $t2, $t3
 11: goto 14
     # live vars: $t0, $t2, $t3
 12: label L3
     # live vars:
 13: goto 16
     # live vars: $t0, $t2, $t3
 14: label L4
     # live vars: $t0, $t2, $t3
     # events: e:$t0, e:$t2, e:$t3
 15: goto 2
     # live vars:
 16: label L1
     # live vars:
 17: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64
     var $t3: u64
     var $t4: bool
     var $t5: u64
     var $t6: u64
     # live vars: $t0, $t1
     # events: b:$t0, b:$t1, e:$t1, b:$t3
  0: $t3 := 0
     # live vars: $t0, $t3
     # events: e:$t3, b:$t2
  1: $t2 := move($t3)
     # live vars: $t0, $t2
  2: label L0
     # live vars: $t0, $t2
     # events: b:$t4
  3: $t4 := <($t2, $t0)
     # live vars: $t0, $t2, $t4
     # events: e:$t4
  4: if ($t4) goto 5 else goto 10
     # live vars: $t0, $t2
  5: label L2
     # live vars: $t0, $t2
     # events: b:$t6
  6: $t6 := 1
     # live vars: $t0, $t2, $t6
     # events: e:$t6, b:$t5
  7: $t5 := +($t2, $t6)
     # live vars: $t0, $t5
     # events: e:$t5
  8: $t2 := move($t5)
     # live vars: $t0, $t2
  9: goto 12
     # live vars: $t0, $t2
 10: label L3
     # live vars:
 11: goto 14
     # live vars: $t0, $t2
 12: label L4
     # live vars: $t0, $t2
     # events: e:$t0, e:$t2
 13: goto 2
     # live vars:
 14: label L1
     # live vars:
 15: return ()
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: bool
     var $t6: u64 [unused]
     var $t7: u64 [unused]
  0: $t4 := 0
  1: $t4 := move($t4)
  2: label L0
  3: $t5 := <($t4, $t0)
  4: if ($t5) goto 5 else goto 12
  5: label L2
  6: $t1 := move($t2)
  7: $t2 := move($t1)
  8: $t1 := 1
  9: $t1 := +($t4, $t1)
 10: $t4 := move($t1)
 11: goto 14
 12: label L3
 13: goto 16
 14: label L4
 15: goto 2
 16: label L1
 17: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: bool
     var $t5: u64 [unused]
     var $t6: u64
  0: $t1 := 0
  1: $t1 := move($t1)
  2: label L0
  3: $t4 := <($t1, $t0)
  4: if ($t4) goto 5 else goto 10
  5: label L2
  6: $t6 := 1
  7: $t6 := +($t1, $t6)
  8: $t1 := move($t6)
  9: goto 12
 10: label L3
 11: goto 14
 12: label L4
 13: goto 2
 14: label L1
 15: return ()
}

============ after DeadStoreElimination: ================

[variant baseline]
public fun m::test1($t0: u64, $t1: u64, $t2: u64) {
     var $t3: u64 [unused]
     var $t4: u64
     var $t5: bool
     var $t6: u64 [unused]
     var $t7: u64 [unused]
  0: $t4 := 0
  1: label L0
  2: $t5 := <($t4, $t0)
  3: if ($t5) goto 4 else goto 11
  4: label L2
  5: $t1 := move($t2)
  6: $t2 := move($t1)
  7: $t1 := 1
  8: $t1 := +($t4, $t1)
  9: $t4 := move($t1)
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 1
 15: label L1
 16: return ()
}


[variant baseline]
public fun m::test2($t0: u64, $t1: u64) {
     var $t2: u64 [unused]
     var $t3: u64 [unused]
     var $t4: bool
     var $t5: u64 [unused]
     var $t6: u64
  0: $t1 := 0
  1: label L0
  2: $t4 := <($t1, $t0)
  3: if ($t4) goto 4 else goto 9
  4: label L2
  5: $t6 := 1
  6: $t6 := +($t1, $t6)
  7: $t1 := move($t6)
  8: goto 11
  9: label L3
 10: goto 13
 11: label L4
 12: goto 1
 13: label L1
 14: return ()
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


public test1(Arg0: u64, Arg1: u64, Arg2: u64) /* def_idx: 0 */ {
L3:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[3](loc0: u64)
B1:
	2: CopyLoc[3](loc0: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(17)
B2:
	6: MoveLoc[2](Arg2: u64)
	7: StLoc[1](Arg1: u64)
	8: MoveLoc[1](Arg1: u64)
	9: StLoc[2](Arg2: u64)
	10: LdU64(1)
	11: StLoc[1](Arg1: u64)
	12: MoveLoc[3](loc0: u64)
	13: CopyLoc[1](Arg1: u64)
	14: Add
	15: StLoc[3](loc0: u64)
	16: Branch(18)
B3:
	17: Branch(19)
B4:
	18: Branch(2)
B5:
	19: Ret
}
public test2(Arg0: u64, Arg1: u64) /* def_idx: 1 */ {
L2:	loc0: u64
B0:
	0: LdU64(0)
	1: StLoc[1](Arg1: u64)
B1:
	2: CopyLoc[1](Arg1: u64)
	3: CopyLoc[0](Arg0: u64)
	4: Lt
	5: BrFalse(13)
B2:
	6: LdU64(1)
	7: StLoc[2](loc0: u64)
	8: MoveLoc[1](Arg1: u64)
	9: CopyLoc[2](loc0: u64)
	10: Add
	11: StLoc[1](Arg1: u64)
	12: Branch(14)
B3:
	13: Branch(15)
B4:
	14: Branch(2)
B5:
	15: Ret
}
}
