/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0xc938cd4b
                {
                    // add(int192,uint32)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$int192_uint32$_$A2_U256_U256_u64$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_f1(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$int256_int24$_$A2_U256_U256_u64$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x90b89a6b
                {
                    // fun_address(address,address)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_address$_$signer_address$(4, calldatasize())
                    let ret_0 := A2_M_f2(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$address$_$address$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xdf19e4ed
                {
                    // fun_2(int120[3][][5],address[],bytes[2],bytes1,bytes32)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2, param_3, param_4 := abi_decode_tuple_$int120_3____5__address___bytes_2__bytes1_bytes32$_$vec$vec$vec$u128$$$_vec$address$_vec$vec$u8$$_vec$u8$_vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_f3(param_0, param_1, param_2, param_3, param_4)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64$_$u128$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x18159cfb
                {
                    // f(string,string)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(4, calldatasize())
                    A2_M_f4(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x7d19f4c8
                {
                    // $_fun1$(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    let ret_0 := A2_M_fun_1(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$int64$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf0619891
                {
                    // no_para_return()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    A2_M_no_para_return()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_f1(x, y) -> $result0, $result1 {
                // return ($t0, $t1)
                $result0 := x
                $result1 := y
            }

            function A2_M_f2(_signer, addr) -> $result {
                // return $t1
                $result := addr
            }

            function A2_M_f3(_vec0, _vec1, _vec2, _vec3, _vec4) -> $result {
                let $t5
                // $t5 := 2
                $t5 := 2
                // return $t5
                $result := $t5
            }

            function A2_M_f4(_s, _s1) {
                // return ()
            }

            function A2_M_fun_1(x) -> $result {
                // return $t0
                $result := x
            }

            function A2_M_no_para_return() {
                // return ()
            }

            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_encode_tuple_$int64$_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_int64(value_0, add(headStart, 0))
            }
            function abi_encode_int64(value, pos) {
                mstore(pos, cleanup_int64(value))
            }
            function cleanup_int64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$uint64$_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_1 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_string_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__string(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__string(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_encode_tuple_$uint64$_$u128$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint64(value_0, add(headStart, 0))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function abi_decode_tuple_$int120_3____5__address___bytes_2__bytes1_bytes32$_$vec$vec$vec$u128$$$_vec$address$_vec$vec$u8$$_vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1, value_2, value_3, value_4 {
                if slt(sub(dataEnd, headStart), 160) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_int120_3____5__vec$vec$vec$u128$$$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_1 := abi_decode_address___vec$address$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 64))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_2 := abi_decode_bytes_2__vec$vec$u8$$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value_3 := abi_decode_bytes1_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value_4 := abi_decode_bytes32_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_bytes32_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 32
                let size := 64
                array := abi_decode_available_length__bytes32(offset, length, size, end)
            }
            function abi_decode_available_length__bytes32(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_bytes1_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 1
                let size := 33
                array := abi_decode_available_length__bytes1(offset, length, size, end)
            }
            function abi_decode_available_length__bytes1(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_bytes_2__vec$vec$u8$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__bytes_2__vec$vec$u8$$(offset, length, size, end)
            }
            function abi_decode_available_length__bytes_2__vec$vec$u8$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_bytes_vec$u8$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_bytes_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__bytes(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__bytes(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_decode_address___vec$address$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__address___vec$address$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__address___vec$address$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_address(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_int120_3____5__vec$vec$vec$u128$$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 5
                let size := 192
                array := abi_decode_available_length__int120_3____5__vec$vec$vec$u128$$$(offset, length, size, end)
            }
            function abi_decode_available_length__int120_3____5__vec$vec$vec$u128$$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_int120_3____vec$vec$u128$$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_int120_3____vec$vec$u128$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__int120_3____vec$vec$u128$$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__int120_3____vec$vec$u128$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 96))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 96) }
                {
                    let elementPos := src
                    let value := abi_decode_int120_3__vec$u128$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_int120_3__vec$u128$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 3
                let size := 80
                array := abi_decode_available_length__int120_3__vec$u128$(offset, length, size, end)
            }
            function abi_decode_available_length__int120_3__vec$u128$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_int120(elementPos, end)
                    $MemoryStoreU128(dst, value)
                    dst := add(dst, 16)
                }
            }
            function abi_decode_int120(offset, end) -> value {
                value := calldataload(offset)
                validator_int120(value)
            }
            function validator_int120(value) {
                if iszero(eq(value, cleanup_int120(value))) { $Abort(95) }
            }
            function cleanup_int120(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$address$_$address$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_address(value_0, add(headStart, 0))
            }
            function abi_encode_address(value, pos) {
                mstore(pos, cleanup_address(value))
            }
            function abi_decode_tuple_$address_address$_$signer_address$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$int256_int24$_$A2_U256_U256_u64$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_int256(value_0, add(headStart, 0))
                abi_encode_int24(value_1, add(headStart, 32))
            }
            function abi_encode_int24(value, pos) {
                mstore(pos, cleanup_int24(value))
            }
            function cleanup_int24(value) -> cleaned {
                cleaned := and(value, 0xffffff)
            }
            function abi_encode_int256(value, pos) {
                mstore(pos, cleanup_int256(value))
            }
            function cleanup_int256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$int192_uint32$_$A2_U256_U256_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_int192(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint32(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint32(offset, end) -> value {
                value := calldataload(offset)
                validator_uint32(value)
            }
            function validator_uint32(value) {
                if iszero(eq(value, cleanup_uint32(value))) { $Abort(95) }
            }
            function cleanup_uint32(value) -> cleaned {
                cleaned := and(value, 0xffffffff)
            }
            function abi_decode_int192(offset, end) -> value {
                value := calldataload(offset)
                validator_int192(value)
            }
            function validator_int192(value) {
                if iszero(eq(value, cleanup_int192(value))) { $Abort(95) }
            }
            function cleanup_int192(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $MemoryStoreU128(offs, val) {
              $MemoryStoreBytes(offs, 16, val)
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $CopyFromCallDataToMemory(src, dst, length) {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
        }
    }
}


!! Succeeded compiling Yul
