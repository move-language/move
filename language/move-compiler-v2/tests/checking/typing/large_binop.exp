// ---- Model Dump
module <SELF> {
    private fun main() {
        Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(Or(And(And(true, true), Not(false)), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66]))), And(And(Neq<vector<u8>>([104, 101, 108, 108, 111], [98, 121, 101]), And(true, true)), Not(false))), And(Eq<u64>(Shl(1, 7), 128), Eq<u64>(Shr(128, 7), 1))), And(Eq<u64>(Div(255, 2), 127), Eq<u64>(Mod(255, 2), 1))), And(Eq<u64>(Add(254, 1), 255), Eq<u64>(Sub(255, 255), 0))), And(Eq<u64>(BitAnd(255, 255), 255), Eq<u64>(BitOr(255, 255), 255))), And(Eq<u64>(Xor(255, 255), 0), Eq<vector<u8>>([66], [66])));
        Tuple()
    }
} // end <SELF>
