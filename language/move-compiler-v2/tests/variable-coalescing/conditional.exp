============ initial bytecode ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := 2
  1: if ($t0) goto 2 else goto 6
  2: label L0
  3: $t3 := 3
  4: $t1 := infer($t3)
  5: goto 10
  6: label L1
  7: $t5 := 1
  8: $t4 := +($t2, $t5)
  9: $t1 := infer($t4)
 10: label L2
 11: return $t1
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
  0: $t2 := 2
  1: if ($t0) goto 2 else goto 6
  2: label L0
  3: $t3 := 3
  4: $t1 := move($t3)
  5: goto 10
  6: label L1
  7: $t5 := 1
  8: $t4 := +($t2, $t5)
  9: $t1 := move($t4)
 10: label L2
 11: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := 2
     # live vars: $t0, $t2
     # events: e:$t0
  1: if ($t0) goto 2 else goto 6
     # live vars: $t2
  2: label L0
     # live vars:
     # events: b:$t3
  3: $t3 := 3
     # live vars: $t3
     # events: e:$t3, b:$t1
  4: $t1 := move($t3)
     # live vars: $t1
  5: goto 10
     # live vars: $t2
  6: label L1
     # live vars: $t2
     # events: b:$t5
  7: $t5 := 1
     # live vars: $t2, $t5
     # events: e:$t2, e:$t5, b:$t4
  8: $t4 := +($t2, $t5)
     # live vars: $t4
     # events: e:$t4
  9: $t1 := move($t4)
     # live vars: $t1
 10: label L2
     # live vars: $t1
     # events: e:$t1
 11: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64
  0: $t2 := 2
  1: if ($t0) goto 2 else goto 6
  2: label L0
  3: $t3 := 3
  4: $t3 := move($t3)
  5: goto 10
  6: label L1
  7: $t5 := 1
  8: $t2 := +($t2, $t5)
  9: $t3 := move($t2)
 10: label L2
 11: return $t3
}

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: bool): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64
     var $t4: u64 [unused]
     var $t5: u64
  0: $t2 := 2
  1: if ($t0) goto 2 else goto 5
  2: label L0
  3: $t3 := 3
  4: goto 9
  5: label L1
  6: $t5 := 1
  7: $t2 := +($t2, $t5)
  8: $t3 := move($t2)
  9: label L2
 10: return $t3
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


test(Arg0: bool): u64 /* def_idx: 0 */ {
L1:	loc0: u64
L2:	loc1: u64
L3:	loc2: u64
B0:
	0: LdU64(2)
	1: MoveLoc[0](Arg0: bool)
	2: StLoc[0](Arg0: bool)
	3: StLoc[1](loc0: u64)
	4: MoveLoc[0](Arg0: bool)
	5: BrFalse(9)
B1:
	6: LdU64(3)
	7: StLoc[2](loc1: u64)
	8: Branch(15)
B2:
	9: LdU64(1)
	10: StLoc[3](loc2: u64)
	11: CopyLoc[1](loc0: u64)
	12: MoveLoc[3](loc2: u64)
	13: Add
	14: StLoc[2](loc1: u64)
B3:
	15: MoveLoc[2](loc1: u64)
	16: Ret
}
}
============ bytecode verification succeeded ========
