// ---- Model Dump
module 0xcafe::vectors {
    use std::vector;
    public entry fun guess_flips(flips: vector<u8>) {
        {
          let (flips: &vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  break
                } else {
                  Tuple()
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_flips_directly(flips: vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(Borrow(Immutable)(flips))) {
              if Neq<u8>(Deref(vector::borrow<u8>(Borrow(Immutable)(flips), i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          {
            let _v: vector<u8> = Copy(flips);
            {
              let _v2: vector<u8> = flips;
              Tuple()
            }
          }
        }
    }
    public entry fun guess_with_break_without_inline(flips: vector<u8>) {
        vectors::loops_with_break_no_inline(Borrow(Immutable)(flips));
        {
          let _v: vector<u8> = Copy(flips);
          {
            let _v2: vector<u8> = flips;
            Tuple()
          }
        }
    }
    public entry fun guess_without_break_with_inline(flips: vector<u8>) {
        {
          let (flips: &vector<u8>) = Tuple(Borrow(Immutable)(flips));
          {
            let i: u64 = 0;
            loop {
              if Lt<u64>(i, vector::length<u8>(flips)) {
                if Eq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                  Tuple()
                } else {
                  Abort(3)
                };
                i: u64 = Add<u64>(i, 1);
                Tuple()
              } else {
                break
              }
            };
            Tuple()
          }
        };
        {
          let _v: vector<u8> = flips;
          {
            let _v2: vector<u8> = Copy(flips);
            Tuple()
          }
        }
    }
    private fun loops_with_break_no_inline(flips: &vector<u8>) {
        {
          let i: u64 = 0;
          loop {
            if Lt<u64>(i, vector::length<u8>(flips)) {
              if Neq<u8>(Deref(vector::borrow<u8>(flips, i)), 0) {
                break
              } else {
                Tuple()
              };
              i: u64 = Add<u64>(i, 1);
              Tuple()
            } else {
              break
            }
          };
          Tuple()
        }
    }
    private fun test_guess_directly() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_flips_directly(flips);
          Tuple()
        }
    }
    private fun test_guess_with_break_no_inline() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_with_break_without_inline(flips);
          Tuple()
        }
    }
    private fun test_guess_with_inline_break() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_flips(flips);
          Tuple()
        }
    }
    private fun test_guess_without_break() {
        {
          let flips: vector<u8> = Vector<u8>(0, 0, 0, 0);
          vectors::guess_without_break_with_inline(flips);
          Tuple()
        }
    }
    spec fun $guess_flips(flips: vector<u8>);
    spec fun $guess_flips_directly(flips: vector<u8>);
    spec fun $guess_with_break_without_inline(flips: vector<u8>);
    spec fun $guess_without_break_with_inline(flips: vector<u8>);
    spec fun $loops_with_break(flips: &vector<u8>);
    spec fun $loops_with_break_no_inline(flips: &vector<u8>);
    spec fun $loops_without_break(flips: &vector<u8>);
    spec fun $test_guess_directly();
    spec fun $test_guess_with_break_no_inline();
    spec fun $test_guess_with_inline_break();
    spec fun $test_guess_without_break();
} // end 0xcafe::vectors

============ initial bytecode ================

[variant baseline]
public fun vectors::guess_flips($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
  0: $t2 := borrow_local($t0)
  1: $t1 := infer($t2)
  2: $t4 := 0
  3: $t3 := infer($t4)
  4: label L0
  5: $t6 := vector::length<u8>($t1)
  6: $t5 := <($t3, $t6)
  7: if ($t5) goto 8 else goto 23
  8: label L2
  9: $t9 := vector::borrow<u8>($t1, $t3)
 10: $t8 := read_ref($t9)
 11: $t10 := 0
 12: $t7 := !=($t8, $t10)
 13: if ($t7) goto 14 else goto 17
 14: label L5
 15: goto 27
 16: goto 18
 17: label L6
 18: label L7
 19: $t12 := 1
 20: $t11 := +($t3, $t12)
 21: $t3 := infer($t11)
 22: goto 25
 23: label L3
 24: goto 27
 25: label L4
 26: goto 4
 27: label L1
 28: $t14 := copy($t0)
 29: $t13 := infer($t14)
 30: $t15 := infer($t0)
 31: return ()
}


[variant baseline]
public fun vectors::guess_flips_directly($t0: vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: &vector<u8>
     var $t6: bool
     var $t7: u8
     var $t8: &u8
     var $t9: &vector<u8>
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
  0: $t2 := 0
  1: $t1 := infer($t2)
  2: label L0
  3: $t5 := borrow_local($t0)
  4: $t4 := vector::length<u8>($t5)
  5: $t3 := <($t1, $t4)
  6: if ($t3) goto 7 else goto 23
  7: label L2
  8: $t9 := borrow_local($t0)
  9: $t8 := vector::borrow<u8>($t9, $t1)
 10: $t7 := read_ref($t8)
 11: $t10 := 0
 12: $t6 := !=($t7, $t10)
 13: if ($t6) goto 14 else goto 17
 14: label L5
 15: goto 27
 16: goto 18
 17: label L6
 18: label L7
 19: $t12 := 1
 20: $t11 := +($t1, $t12)
 21: $t1 := infer($t11)
 22: goto 25
 23: label L3
 24: goto 27
 25: label L4
 26: goto 2
 27: label L1
 28: $t14 := copy($t0)
 29: $t13 := infer($t14)
 30: $t15 := infer($t0)
 31: return ()
}


[variant baseline]
public fun vectors::guess_with_break_without_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: vector<u8>
     var $t3: vector<u8>
     var $t4: vector<u8>
  0: $t1 := borrow_local($t0)
  1: vectors::loops_with_break_no_inline($t1)
  2: $t3 := copy($t0)
  3: $t2 := infer($t3)
  4: $t4 := infer($t0)
  5: return ()
}


[variant baseline]
public fun vectors::guess_without_break_with_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: vector<u8>
  0: $t2 := borrow_local($t0)
  1: $t1 := infer($t2)
  2: $t4 := 0
  3: $t3 := infer($t4)
  4: label L0
  5: $t6 := vector::length<u8>($t1)
  6: $t5 := <($t3, $t6)
  7: if ($t5) goto 8 else goto 24
  8: label L2
  9: $t9 := vector::borrow<u8>($t1, $t3)
 10: $t8 := read_ref($t9)
 11: $t10 := 0
 12: $t7 := ==($t8, $t10)
 13: if ($t7) goto 14 else goto 16
 14: label L5
 15: goto 19
 16: label L6
 17: $t11 := 3
 18: abort($t11)
 19: label L7
 20: $t13 := 1
 21: $t12 := +($t3, $t13)
 22: $t3 := infer($t12)
 23: goto 26
 24: label L3
 25: goto 28
 26: label L4
 27: goto 4
 28: label L1
 29: $t14 := infer($t0)
 30: $t16 := copy($t0)
 31: $t15 := infer($t16)
 32: return ()
}


[variant baseline]
fun vectors::loops_with_break_no_inline($t0: &vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: bool
     var $t6: u8
     var $t7: &u8
     var $t8: u8
     var $t9: u64
     var $t10: u64
  0: $t2 := 0
  1: $t1 := infer($t2)
  2: label L0
  3: $t4 := vector::length<u8>($t0)
  4: $t3 := <($t1, $t4)
  5: if ($t3) goto 6 else goto 21
  6: label L2
  7: $t7 := vector::borrow<u8>($t0, $t1)
  8: $t6 := read_ref($t7)
  9: $t8 := 0
 10: $t5 := !=($t6, $t8)
 11: if ($t5) goto 12 else goto 15
 12: label L5
 13: goto 25
 14: goto 16
 15: label L6
 16: label L7
 17: $t10 := 1
 18: $t9 := +($t1, $t10)
 19: $t1 := infer($t9)
 20: goto 23
 21: label L3
 22: goto 25
 23: label L4
 24: goto 2
 25: label L1
 26: return ()
}


[variant baseline]
fun vectors::test_guess_directly() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t2 := 0
  1: $t3 := 0
  2: $t4 := 0
  3: $t5 := 0
  4: $t1 := vector($t2, $t3, $t4, $t5)
  5: $t0 := infer($t1)
  6: vectors::guess_flips_directly($t0)
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_break_no_inline() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t2 := 0
  1: $t3 := 0
  2: $t4 := 0
  3: $t5 := 0
  4: $t1 := vector($t2, $t3, $t4, $t5)
  5: $t0 := infer($t1)
  6: vectors::guess_with_break_without_inline($t0)
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_inline_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t2 := 0
  1: $t3 := 0
  2: $t4 := 0
  3: $t5 := 0
  4: $t1 := vector($t2, $t3, $t4, $t5)
  5: $t0 := infer($t1)
  6: vectors::guess_flips($t0)
  7: return ()
}


[variant baseline]
fun vectors::test_guess_without_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
  0: $t2 := 0
  1: $t3 := 0
  2: $t4 := 0
  3: $t5 := 0
  4: $t1 := vector($t2, $t3, $t4, $t5)
  5: $t0 := infer($t1)
  6: vectors::guess_without_break_with_inline($t0)
  7: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun vectors::guess_flips($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: &vector<u8>
     var $t17: &vector<u8>
     # live vars: $t0
  0: $t2 := borrow_local($t0)
     # live vars: $t2
  1: $t1 := copy($t2)
     # live vars: $t1
  2: $t4 := 0
     # live vars: $t1, $t4
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
  4: label L0
     # live vars: $t1, $t3
  5: $t16 := copy($t1)
     # live vars: $t1, $t3, $t16
  6: $t6 := vector::length<u8>($t16)
     # live vars: $t1, $t3, $t6
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
  8: if ($t5) goto 9 else goto 25
     # live vars: $t1, $t3
  9: label L2
     # live vars: $t1, $t3
 10: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
 11: $t9 := vector::borrow<u8>($t17, $t3)
     # live vars: $t1, $t3, $t9
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
 14: $t7 := !=($t8, $t10)
     # live vars: $t1, $t3, $t7
 15: if ($t7) goto 16 else goto 19
     # live vars:
 16: label L5
     # live vars:
 17: goto 29
     # live vars: $t1, $t3
 18: goto 20
     # live vars: $t1, $t3
 19: label L6
     # live vars: $t1, $t3
 20: label L7
     # live vars: $t1, $t3
 21: $t12 := 1
     # live vars: $t1, $t3, $t12
 22: $t11 := +($t3, $t12)
     # live vars: $t1, $t11
 23: $t3 := copy($t11)
     # live vars: $t1, $t3
 24: goto 27
     # live vars:
 25: label L3
     # live vars:
 26: goto 29
     # live vars: $t1, $t3
 27: label L4
     # live vars: $t1, $t3
 28: goto 4
     # live vars:
 29: label L1
     # live vars:
 30: $t14 := copy($t0)
     # live vars:
 31: $t13 := copy($t14)
     # live vars:
 32: $t15 := copy($t0)
     # live vars:
 33: return ()
}


[variant baseline]
public fun vectors::guess_flips_directly($t0: vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: &vector<u8>
     var $t6: bool
     var $t7: u8
     var $t8: &u8
     var $t9: &vector<u8>
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     # live vars: $t0
  0: $t2 := 0
     # live vars: $t0, $t2
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
  2: label L0
     # live vars: $t0, $t1
  3: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t5
  4: $t4 := vector::length<u8>($t5)
     # live vars: $t0, $t1, $t4
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
  7: label L2
     # live vars: $t0, $t1
  8: $t9 := borrow_local($t0)
     # live vars: $t0, $t1, $t9
  9: $t8 := vector::borrow<u8>($t9, $t1)
     # live vars: $t0, $t1, $t8
 10: $t7 := read_ref($t8)
     # live vars: $t0, $t1, $t7
 11: $t10 := 0
     # live vars: $t0, $t1, $t7, $t10
 12: $t6 := !=($t7, $t10)
     # live vars: $t0, $t1, $t6
 13: if ($t6) goto 14 else goto 17
     # live vars:
 14: label L5
     # live vars:
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
 17: label L6
     # live vars: $t0, $t1
 18: label L7
     # live vars: $t0, $t1
 19: $t12 := 1
     # live vars: $t0, $t1, $t12
 20: $t11 := +($t1, $t12)
     # live vars: $t0, $t11
 21: $t1 := copy($t11)
     # live vars: $t0, $t1
 22: goto 25
     # live vars:
 23: label L3
     # live vars:
 24: goto 27
     # live vars: $t0, $t1
 25: label L4
     # live vars: $t0, $t1
 26: goto 2
     # live vars:
 27: label L1
     # live vars:
 28: $t14 := copy($t0)
     # live vars:
 29: $t13 := copy($t14)
     # live vars:
 30: $t15 := copy($t0)
     # live vars:
 31: return ()
}


[variant baseline]
public fun vectors::guess_with_break_without_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: vector<u8>
     var $t3: vector<u8>
     var $t4: vector<u8>
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t1
  1: vectors::loops_with_break_no_inline($t1)
     # live vars:
  2: $t3 := copy($t0)
     # live vars:
  3: $t2 := copy($t3)
     # live vars:
  4: $t4 := copy($t0)
     # live vars:
  5: return ()
}


[variant baseline]
public fun vectors::guess_without_break_with_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: vector<u8>
     var $t17: &vector<u8>
     var $t18: &vector<u8>
     # live vars: $t0
  0: $t2 := borrow_local($t0)
     # live vars: $t2
  1: $t1 := copy($t2)
     # live vars: $t1
  2: $t4 := 0
     # live vars: $t1, $t4
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
  4: label L0
     # live vars: $t1, $t3
  5: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
  6: $t6 := vector::length<u8>($t17)
     # live vars: $t1, $t3, $t6
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
  8: if ($t5) goto 9 else goto 26
     # live vars: $t1, $t3
  9: label L2
     # live vars: $t1, $t3
 10: $t18 := copy($t1)
     # live vars: $t1, $t3, $t18
 11: $t9 := vector::borrow<u8>($t18, $t3)
     # live vars: $t1, $t3, $t9
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
 14: $t7 := ==($t8, $t10)
     # live vars: $t1, $t3, $t7
 15: if ($t7) goto 16 else goto 18
     # live vars: $t1, $t3
 16: label L5
     # live vars: $t1, $t3
 17: goto 21
     # live vars:
 18: label L6
     # live vars:
 19: $t11 := 3
     # live vars: $t11
 20: abort($t11)
     # live vars: $t1, $t3
 21: label L7
     # live vars: $t1, $t3
 22: $t13 := 1
     # live vars: $t1, $t3, $t13
 23: $t12 := +($t3, $t13)
     # live vars: $t1, $t12
 24: $t3 := copy($t12)
     # live vars: $t1, $t3
 25: goto 28
     # live vars:
 26: label L3
     # live vars:
 27: goto 30
     # live vars: $t1, $t3
 28: label L4
     # live vars: $t1, $t3
 29: goto 4
     # live vars:
 30: label L1
     # live vars:
 31: $t14 := copy($t0)
     # live vars:
 32: $t16 := copy($t0)
     # live vars:
 33: $t15 := copy($t16)
     # live vars:
 34: return ()
}


[variant baseline]
fun vectors::loops_with_break_no_inline($t0: &vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: bool
     var $t6: u8
     var $t7: &u8
     var $t8: u8
     var $t9: u64
     var $t10: u64
     var $t11: &vector<u8>
     var $t12: &vector<u8>
     # live vars: $t0
  0: $t2 := 0
     # live vars: $t0, $t2
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
  2: label L0
     # live vars: $t0, $t1
  3: $t11 := copy($t0)
     # live vars: $t0, $t1, $t11
  4: $t4 := vector::length<u8>($t11)
     # live vars: $t0, $t1, $t4
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
  7: label L2
     # live vars: $t0, $t1
  8: $t12 := copy($t0)
     # live vars: $t0, $t1, $t12
  9: $t7 := vector::borrow<u8>($t12, $t1)
     # live vars: $t0, $t1, $t7
 10: $t6 := read_ref($t7)
     # live vars: $t0, $t1, $t6
 11: $t8 := 0
     # live vars: $t0, $t1, $t6, $t8
 12: $t5 := !=($t6, $t8)
     # live vars: $t0, $t1, $t5
 13: if ($t5) goto 14 else goto 17
     # live vars:
 14: label L5
     # live vars:
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
 17: label L6
     # live vars: $t0, $t1
 18: label L7
     # live vars: $t0, $t1
 19: $t10 := 1
     # live vars: $t0, $t1, $t10
 20: $t9 := +($t1, $t10)
     # live vars: $t0, $t9
 21: $t1 := copy($t9)
     # live vars: $t0, $t1
 22: goto 25
     # live vars:
 23: label L3
     # live vars:
 24: goto 27
     # live vars: $t0, $t1
 25: label L4
     # live vars: $t0, $t1
 26: goto 2
     # live vars:
 27: label L1
     # live vars:
 28: return ()
}


[variant baseline]
fun vectors::test_guess_directly() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_flips_directly($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_break_no_inline() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_with_break_without_inline($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_inline_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_flips($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_without_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_without_break_with_inline($t0)
     # live vars:
  7: return ()
}

============ after VisibilityChecker: ================

[variant baseline]
public fun vectors::guess_flips($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: &vector<u8>
     var $t17: &vector<u8>
     # live vars: $t0
  0: $t2 := borrow_local($t0)
     # live vars: $t2
  1: $t1 := copy($t2)
     # live vars: $t1
  2: $t4 := 0
     # live vars: $t1, $t4
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
  4: label L0
     # live vars: $t1, $t3
  5: $t16 := copy($t1)
     # live vars: $t1, $t3, $t16
  6: $t6 := vector::length<u8>($t16)
     # live vars: $t1, $t3, $t6
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
  8: if ($t5) goto 9 else goto 25
     # live vars: $t1, $t3
  9: label L2
     # live vars: $t1, $t3
 10: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
 11: $t9 := vector::borrow<u8>($t17, $t3)
     # live vars: $t1, $t3, $t9
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
 14: $t7 := !=($t8, $t10)
     # live vars: $t1, $t3, $t7
 15: if ($t7) goto 16 else goto 19
     # live vars:
 16: label L5
     # live vars:
 17: goto 29
     # live vars: $t1, $t3
 18: goto 20
     # live vars: $t1, $t3
 19: label L6
     # live vars: $t1, $t3
 20: label L7
     # live vars: $t1, $t3
 21: $t12 := 1
     # live vars: $t1, $t3, $t12
 22: $t11 := +($t3, $t12)
     # live vars: $t1, $t11
 23: $t3 := copy($t11)
     # live vars: $t1, $t3
 24: goto 27
     # live vars:
 25: label L3
     # live vars:
 26: goto 29
     # live vars: $t1, $t3
 27: label L4
     # live vars: $t1, $t3
 28: goto 4
     # live vars:
 29: label L1
     # live vars:
 30: $t14 := copy($t0)
     # live vars:
 31: $t13 := copy($t14)
     # live vars:
 32: $t15 := copy($t0)
     # live vars:
 33: return ()
}


[variant baseline]
public fun vectors::guess_flips_directly($t0: vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: &vector<u8>
     var $t6: bool
     var $t7: u8
     var $t8: &u8
     var $t9: &vector<u8>
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     # live vars: $t0
  0: $t2 := 0
     # live vars: $t0, $t2
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
  2: label L0
     # live vars: $t0, $t1
  3: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t5
  4: $t4 := vector::length<u8>($t5)
     # live vars: $t0, $t1, $t4
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
  7: label L2
     # live vars: $t0, $t1
  8: $t9 := borrow_local($t0)
     # live vars: $t0, $t1, $t9
  9: $t8 := vector::borrow<u8>($t9, $t1)
     # live vars: $t0, $t1, $t8
 10: $t7 := read_ref($t8)
     # live vars: $t0, $t1, $t7
 11: $t10 := 0
     # live vars: $t0, $t1, $t7, $t10
 12: $t6 := !=($t7, $t10)
     # live vars: $t0, $t1, $t6
 13: if ($t6) goto 14 else goto 17
     # live vars:
 14: label L5
     # live vars:
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
 17: label L6
     # live vars: $t0, $t1
 18: label L7
     # live vars: $t0, $t1
 19: $t12 := 1
     # live vars: $t0, $t1, $t12
 20: $t11 := +($t1, $t12)
     # live vars: $t0, $t11
 21: $t1 := copy($t11)
     # live vars: $t0, $t1
 22: goto 25
     # live vars:
 23: label L3
     # live vars:
 24: goto 27
     # live vars: $t0, $t1
 25: label L4
     # live vars: $t0, $t1
 26: goto 2
     # live vars:
 27: label L1
     # live vars:
 28: $t14 := copy($t0)
     # live vars:
 29: $t13 := copy($t14)
     # live vars:
 30: $t15 := copy($t0)
     # live vars:
 31: return ()
}


[variant baseline]
public fun vectors::guess_with_break_without_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: vector<u8>
     var $t3: vector<u8>
     var $t4: vector<u8>
     # live vars: $t0
  0: $t1 := borrow_local($t0)
     # live vars: $t1
  1: vectors::loops_with_break_no_inline($t1)
     # live vars:
  2: $t3 := copy($t0)
     # live vars:
  3: $t2 := copy($t3)
     # live vars:
  4: $t4 := copy($t0)
     # live vars:
  5: return ()
}


[variant baseline]
public fun vectors::guess_without_break_with_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: vector<u8>
     var $t17: &vector<u8>
     var $t18: &vector<u8>
     # live vars: $t0
  0: $t2 := borrow_local($t0)
     # live vars: $t2
  1: $t1 := copy($t2)
     # live vars: $t1
  2: $t4 := 0
     # live vars: $t1, $t4
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
  4: label L0
     # live vars: $t1, $t3
  5: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
  6: $t6 := vector::length<u8>($t17)
     # live vars: $t1, $t3, $t6
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
  8: if ($t5) goto 9 else goto 26
     # live vars: $t1, $t3
  9: label L2
     # live vars: $t1, $t3
 10: $t18 := copy($t1)
     # live vars: $t1, $t3, $t18
 11: $t9 := vector::borrow<u8>($t18, $t3)
     # live vars: $t1, $t3, $t9
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
 14: $t7 := ==($t8, $t10)
     # live vars: $t1, $t3, $t7
 15: if ($t7) goto 16 else goto 18
     # live vars: $t1, $t3
 16: label L5
     # live vars: $t1, $t3
 17: goto 21
     # live vars:
 18: label L6
     # live vars:
 19: $t11 := 3
     # live vars: $t11
 20: abort($t11)
     # live vars: $t1, $t3
 21: label L7
     # live vars: $t1, $t3
 22: $t13 := 1
     # live vars: $t1, $t3, $t13
 23: $t12 := +($t3, $t13)
     # live vars: $t1, $t12
 24: $t3 := copy($t12)
     # live vars: $t1, $t3
 25: goto 28
     # live vars:
 26: label L3
     # live vars:
 27: goto 30
     # live vars: $t1, $t3
 28: label L4
     # live vars: $t1, $t3
 29: goto 4
     # live vars:
 30: label L1
     # live vars:
 31: $t14 := copy($t0)
     # live vars:
 32: $t16 := copy($t0)
     # live vars:
 33: $t15 := copy($t16)
     # live vars:
 34: return ()
}


[variant baseline]
fun vectors::loops_with_break_no_inline($t0: &vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: bool
     var $t6: u8
     var $t7: &u8
     var $t8: u8
     var $t9: u64
     var $t10: u64
     var $t11: &vector<u8>
     var $t12: &vector<u8>
     # live vars: $t0
  0: $t2 := 0
     # live vars: $t0, $t2
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
  2: label L0
     # live vars: $t0, $t1
  3: $t11 := copy($t0)
     # live vars: $t0, $t1, $t11
  4: $t4 := vector::length<u8>($t11)
     # live vars: $t0, $t1, $t4
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
  7: label L2
     # live vars: $t0, $t1
  8: $t12 := copy($t0)
     # live vars: $t0, $t1, $t12
  9: $t7 := vector::borrow<u8>($t12, $t1)
     # live vars: $t0, $t1, $t7
 10: $t6 := read_ref($t7)
     # live vars: $t0, $t1, $t6
 11: $t8 := 0
     # live vars: $t0, $t1, $t6, $t8
 12: $t5 := !=($t6, $t8)
     # live vars: $t0, $t1, $t5
 13: if ($t5) goto 14 else goto 17
     # live vars:
 14: label L5
     # live vars:
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
 17: label L6
     # live vars: $t0, $t1
 18: label L7
     # live vars: $t0, $t1
 19: $t10 := 1
     # live vars: $t0, $t1, $t10
 20: $t9 := +($t1, $t10)
     # live vars: $t0, $t9
 21: $t1 := copy($t9)
     # live vars: $t0, $t1
 22: goto 25
     # live vars:
 23: label L3
     # live vars:
 24: goto 27
     # live vars: $t0, $t1
 25: label L4
     # live vars: $t0, $t1
 26: goto 2
     # live vars:
 27: label L1
     # live vars:
 28: return ()
}


[variant baseline]
fun vectors::test_guess_directly() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_flips_directly($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_break_no_inline() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_with_break_without_inline($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_inline_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_flips($t0)
     # live vars:
  7: return ()
}


[variant baseline]
fun vectors::test_guess_without_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
  0: $t2 := 0
     # live vars: $t2
  1: $t3 := 0
     # live vars: $t2, $t3
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
  5: $t0 := copy($t1)
     # live vars: $t0
  6: vectors::guess_without_break_with_inline($t0)
     # live vars:
  7: return ()
}

============ after MemorySafetyProcessor: ================

[variant baseline]
public fun vectors::guess_flips($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: &vector<u8>
     var $t17: &vector<u8>
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := borrow_local($t0)
     # live vars: $t2
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[]}
     # local_to_label: {$t0=L0,$t2=L1}
     # global_to_label: {}
     #
  1: $t1 := copy($t2)
     # live vars: $t1
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t1, $t4
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  4: label L0
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  5: $t16 := copy($t1)
     # live vars: $t1, $t3, $t16
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L1281],L1281=local($t16)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t16=L1281}
     # global_to_label: {}
     #
  6: $t6 := vector::length<u8>($t16)
     # live vars: $t1, $t3, $t6
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  8: if ($t5) goto 9 else goto 25
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  9: label L2
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 10: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L2561],L2561=local($t17)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t17=L2561}
     # global_to_label: {}
     #
 11: $t9 := vector::borrow<u8>($t17, $t3)
     # live vars: $t1, $t3, $t9
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L2561],L2561=local($t17)[call(false) -> L2816],L2816=local($t9)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t9=L2816,$t17=L2561}
     # global_to_label: {}
     #
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 14: $t7 := !=($t8, $t10)
     # live vars: $t1, $t3, $t7
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 15: if ($t7) goto 16 else goto 19
     # live vars:
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 16: label L5
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 17: goto 29
     # live vars: $t1, $t3
 18: goto 20
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 19: label L6
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 20: label L7
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 21: $t12 := 1
     # live vars: $t1, $t3, $t12
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 22: $t11 := +($t3, $t12)
     # live vars: $t1, $t11
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 23: $t3 := copy($t11)
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 24: goto 27
     # live vars:
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 25: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 26: goto 29
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 27: label L4
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 28: goto 4
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 29: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 30: $t14 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 31: $t13 := copy($t14)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 32: $t15 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 33: return ()
}


[variant baseline]
public fun vectors::guess_flips_directly($t0: vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: &vector<u8>
     var $t6: bool
     var $t7: u8
     var $t8: &u8
     var $t9: &vector<u8>
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: vector<u8>
     var $t14: vector<u8>
     var $t15: vector<u8>
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  2: label L0
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  3: $t5 := borrow_local($t0)
     # live vars: $t0, $t1, $t5
     # graph: {L768=local($t0)[borrow(false) -> L769],L769=local($t5)[]}
     # local_to_label: {$t0=L768,$t5=L769}
     # global_to_label: {}
     #
  4: $t4 := vector::length<u8>($t5)
     # live vars: $t0, $t1, $t4
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  7: label L2
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  8: $t9 := borrow_local($t0)
     # live vars: $t0, $t1, $t9
     # graph: {L768=local($t0)[borrow(false) -> L2049],L2049=local($t9)[]}
     # local_to_label: {$t0=L768,$t9=L2049}
     # global_to_label: {}
     #
  9: $t8 := vector::borrow<u8>($t9, $t1)
     # live vars: $t0, $t1, $t8
     # graph: {L768=local($t0)[borrow(false) -> L2049],L2049=local($t9)[call(false) -> L2304],L2304=local($t8)[]}
     # local_to_label: {$t0=L768,$t8=L2304,$t9=L2049}
     # global_to_label: {}
     #
 10: $t7 := read_ref($t8)
     # live vars: $t0, $t1, $t7
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 11: $t10 := 0
     # live vars: $t0, $t1, $t7, $t10
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 12: $t6 := !=($t7, $t10)
     # live vars: $t0, $t1, $t6
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 13: if ($t6) goto 14 else goto 17
     # live vars:
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 14: label L5
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 17: label L6
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 18: label L7
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 19: $t12 := 1
     # live vars: $t0, $t1, $t12
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 20: $t11 := +($t1, $t12)
     # live vars: $t0, $t11
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 21: $t1 := copy($t11)
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 22: goto 25
     # live vars:
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 23: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 24: goto 27
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 25: label L4
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 26: goto 2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 27: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 28: $t14 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 29: $t13 := copy($t14)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 30: $t15 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 31: return ()
}


[variant baseline]
public fun vectors::guess_with_break_without_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: vector<u8>
     var $t3: vector<u8>
     var $t4: vector<u8>
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t1 := borrow_local($t0)
     # live vars: $t1
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L1}
     # global_to_label: {}
     #
  1: vectors::loops_with_break_no_inline($t1)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t3 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t2 := copy($t3)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t4 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: return ()
}


[variant baseline]
public fun vectors::guess_without_break_with_inline($t0: vector<u8>) {
     var $t1: &vector<u8>
     var $t2: &vector<u8>
     var $t3: u64
     var $t4: u64
     var $t5: bool
     var $t6: u64
     var $t7: bool
     var $t8: u8
     var $t9: &u8
     var $t10: u8
     var $t11: u64
     var $t12: u64
     var $t13: u64
     var $t14: vector<u8>
     var $t15: vector<u8>
     var $t16: vector<u8>
     var $t17: &vector<u8>
     var $t18: &vector<u8>
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := borrow_local($t0)
     # live vars: $t2
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[]}
     # local_to_label: {$t0=L0,$t2=L1}
     # global_to_label: {}
     #
  1: $t1 := copy($t2)
     # live vars: $t1
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t1, $t4
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  3: $t3 := copy($t4)
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  4: label L0
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  5: $t17 := copy($t1)
     # live vars: $t1, $t3, $t17
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L1281],L1281=local($t17)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t17=L1281}
     # global_to_label: {}
     #
  6: $t6 := vector::length<u8>($t17)
     # live vars: $t1, $t3, $t6
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  7: $t5 := <($t3, $t6)
     # live vars: $t1, $t3, $t5
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  8: if ($t5) goto 9 else goto 26
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
  9: label L2
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 10: $t18 := copy($t1)
     # live vars: $t1, $t3, $t18
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L2561],L2561=local($t18)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t18=L2561}
     # global_to_label: {}
     #
 11: $t9 := vector::borrow<u8>($t18, $t3)
     # live vars: $t1, $t3, $t9
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[skip -> L2561],L2561=local($t18)[call(false) -> L2816],L2816=local($t9)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1,$t9=L2816,$t18=L2561}
     # global_to_label: {}
     #
 12: $t8 := read_ref($t9)
     # live vars: $t1, $t3, $t8
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 13: $t10 := 0
     # live vars: $t1, $t3, $t8, $t10
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 14: $t7 := ==($t8, $t10)
     # live vars: $t1, $t3, $t7
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 15: if ($t7) goto 16 else goto 18
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 16: label L5
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 17: goto 21
     # live vars:
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 18: label L6
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 19: $t11 := 3
     # live vars: $t11
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 20: abort($t11)
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 21: label L7
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 22: $t13 := 1
     # live vars: $t1, $t3, $t13
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 23: $t12 := +($t3, $t13)
     # live vars: $t1, $t12
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 24: $t3 := copy($t12)
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 25: goto 28
     # live vars:
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 26: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 27: goto 30
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 28: label L4
     # live vars: $t1, $t3
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t2)[skip -> L257],L257=local($t1)[]}
     # local_to_label: {$t0=L0,$t1=L257,$t2=L1}
     # global_to_label: {}
     #
 29: goto 4
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 30: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 31: $t14 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 32: $t16 := copy($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 33: $t15 := copy($t16)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 34: return ()
}


[variant baseline]
fun vectors::loops_with_break_no_inline($t0: &vector<u8>) {
     var $t1: u64
     var $t2: u64
     var $t3: bool
     var $t4: u64
     var $t5: bool
     var $t6: u8
     var $t7: &u8
     var $t8: u8
     var $t9: u64
     var $t10: u64
     var $t11: &vector<u8>
     var $t12: &vector<u8>
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t0, $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t1 := copy($t2)
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  2: label L0
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  3: $t11 := copy($t0)
     # live vars: $t0, $t1, $t11
     # graph: {L768=local($t0)[skip -> L769],L769=local($t11)[]}
     # local_to_label: {$t0=L768,$t11=L769}
     # global_to_label: {}
     #
  4: $t4 := vector::length<u8>($t11)
     # live vars: $t0, $t1, $t4
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  5: $t3 := <($t1, $t4)
     # live vars: $t0, $t1, $t3
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  6: if ($t3) goto 7 else goto 23
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  7: label L2
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
  8: $t12 := copy($t0)
     # live vars: $t0, $t1, $t12
     # graph: {L768=local($t0)[skip -> L2049],L2049=local($t12)[]}
     # local_to_label: {$t0=L768,$t12=L2049}
     # global_to_label: {}
     #
  9: $t7 := vector::borrow<u8>($t12, $t1)
     # live vars: $t0, $t1, $t7
     # graph: {L768=local($t0)[skip -> L2049],L2049=local($t12)[call(false) -> L2304],L2304=local($t7)[]}
     # local_to_label: {$t0=L768,$t7=L2304,$t12=L2049}
     # global_to_label: {}
     #
 10: $t6 := read_ref($t7)
     # live vars: $t0, $t1, $t6
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 11: $t8 := 0
     # live vars: $t0, $t1, $t6, $t8
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 12: $t5 := !=($t6, $t8)
     # live vars: $t0, $t1, $t5
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 13: if ($t5) goto 14 else goto 17
     # live vars:
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 14: label L5
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 15: goto 27
     # live vars: $t0, $t1
 16: goto 18
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 17: label L6
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 18: label L7
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 19: $t10 := 1
     # live vars: $t0, $t1, $t10
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 20: $t9 := +($t1, $t10)
     # live vars: $t0, $t9
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 21: $t1 := copy($t9)
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 22: goto 25
     # live vars:
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 23: label L3
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 24: goto 27
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 25: label L4
     # live vars: $t0, $t1
     # graph: {L768=local($t0)[]}
     # local_to_label: {$t0=L768}
     # global_to_label: {}
     #
 26: goto 2
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 27: label L1
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
 28: return ()
}


[variant baseline]
fun vectors::test_guess_directly() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t3 := 0
     # live vars: $t2, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: $t0 := copy($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  6: vectors::guess_flips_directly($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_break_no_inline() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t3 := 0
     # live vars: $t2, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: $t0 := copy($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  6: vectors::guess_with_break_without_inline($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  7: return ()
}


[variant baseline]
fun vectors::test_guess_with_inline_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t3 := 0
     # live vars: $t2, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: $t0 := copy($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  6: vectors::guess_flips($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  7: return ()
}


[variant baseline]
fun vectors::test_guess_without_break() {
     var $t0: vector<u8>
     var $t1: vector<u8>
     var $t2: u8
     var $t3: u8
     var $t4: u8
     var $t5: u8
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  0: $t2 := 0
     # live vars: $t2
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  1: $t3 := 0
     # live vars: $t2, $t3
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  2: $t4 := 0
     # live vars: $t2, $t3, $t4
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  3: $t5 := 0
     # live vars: $t2, $t3, $t4, $t5
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  4: $t1 := vector($t2, $t3, $t4, $t5)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  5: $t0 := copy($t1)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  6: vectors::guess_without_break_with_inline($t0)
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     #
  7: return ()
}
