============ initial bytecode ================

[variant baseline]
fun m::bar() {
  0: assume 1
  1: return ()
}


[variant baseline]
public fun m::foo($t0: &m::S): u8 {
     var $t1: u8
     var $t2: &m::E
     var $t3: &vector<m::E>
     var $t4: u64
     var $t5: &u8
  0: $t3 := borrow_field<m::S>.data($t0)
  1: $t4 := 0
  2: $t2 := vector::borrow<m::E>($t3, $t4)
  3: $t5 := borrow_field<m::E>.k($t2)
  4: $t1 := read_ref($t5)
  5: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::bar() {
     # live vars:
  0: assume 1
     # live vars:
  1: return ()
}


[variant baseline]
public fun m::foo($t0: &m::S): u8 {
     var $t1: u8
     var $t2: &m::E
     var $t3: &vector<m::E>
     var $t4: u64
     var $t5: &u8
     # live vars: $t0
  0: $t3 := borrow_field<m::S>.data($t0)
     # live vars: $t3
  1: $t4 := 0
     # live vars: $t3, $t4
  2: $t2 := vector::borrow<m::E>($t3, $t4)
     # live vars: $t2
  3: $t5 := borrow_field<m::E>.k($t2)
     # live vars: $t5
  4: $t1 := read_ref($t5)
     # live vars: $t1
  5: return $t1
}


============ disassembled file-format ==================
// Move bytecode v7
module 42.m {
struct E {
	k: u8
}
struct S {
	data: vector<E>
}

bar() /* def_idx: 0 */ {
B0:
	0: Ret
}
public foo(Arg0: &S): u8 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: &S)
	1: ImmBorrowField[0](S.data: vector<E>)
	2: LdU64(0)
	3: VecImmBorrow(3)
	4: ImmBorrowField[1](E.k: u8)
	5: ReadRef
	6: Ret
}
}
