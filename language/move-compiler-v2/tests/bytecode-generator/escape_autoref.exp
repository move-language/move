// ---- Model Dump
module 0x42::m {
    struct Object {
        inner: address,
    }
    struct ObjectCore {
        owner: address,
    }
    private fun make(): m::Object {
        Abort(0)
    }
    private fun owner_correct(o: m::Object): address {
        {
          let addr: address = select m::Object.inner(o);
          select m::ObjectCore.owner(BorrowGlobal(Immutable)<m::ObjectCore>(addr))
        }
    }
    private fun owner_read_ref_missing(o: m::Object): address {
        select m::ObjectCore.owner(BorrowGlobal(Immutable)<m::ObjectCore>(select m::Object.inner(o)))
    }
    private fun will_autoref(): address {
        select m::Object.inner(m::make())
    }
    spec fun $make(): m::Object {
        Abort(0)
    }
    spec fun $owner_correct(o: m::Object): address {
        {
          let addr: address = select m::Object.inner(o);
          select m::ObjectCore.owner(global<m::ObjectCore>(addr))
        }
    }
    spec fun $owner_read_ref_missing(o: m::Object): address {
        select m::ObjectCore.owner(global<m::ObjectCore>(select m::Object.inner(o)))
    }
    spec fun $will_autoref(): address {
        select m::Object.inner(m::$make())
    }
} // end 0x42::m

============ initial bytecode ================

[variant baseline]
fun m::make(): m::Object {
     var $t0: m::Object
     var $t1: u64
  0: $t1 := 0
  1: abort($t1)
  2: return $t0
}


[variant baseline]
fun m::owner_correct($t0: m::Object): address {
     var $t1: address
     var $t2: address
     var $t3: address
     var $t4: &m::Object
     var $t5: &address
     var $t6: &m::ObjectCore
     var $t7: &address
  0: $t4 := borrow_local($t0)
  1: $t5 := borrow_field<m::Object>.inner($t4)
  2: $t3 := read_ref($t5)
  3: $t2 := infer($t3)
  4: $t6 := borrow_global<m::ObjectCore>($t2)
  5: $t7 := borrow_field<m::ObjectCore>.owner($t6)
  6: $t1 := read_ref($t7)
  7: return $t1
}


[variant baseline]
fun m::owner_read_ref_missing($t0: m::Object): address {
     var $t1: address
     var $t2: &m::ObjectCore
     var $t3: address
     var $t4: &m::Object
     var $t5: &address
     var $t6: &address
  0: $t4 := borrow_local($t0)
  1: $t5 := borrow_field<m::Object>.inner($t4)
  2: $t3 := read_ref($t5)
  3: $t2 := borrow_global<m::ObjectCore>($t3)
  4: $t6 := borrow_field<m::ObjectCore>.owner($t2)
  5: $t1 := read_ref($t6)
  6: return $t1
}


[variant baseline]
fun m::will_autoref(): address {
     var $t0: address
     var $t1: m::Object
     var $t2: &m::Object
     var $t3: &address
  0: $t1 := m::make()
  1: $t2 := borrow_local($t1)
  2: $t3 := borrow_field<m::Object>.inner($t2)
  3: $t0 := read_ref($t3)
  4: return $t0
}
