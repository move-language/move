============ initial bytecode ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: &mut u64
     var $t3: &u64
  0: $t0 := 22
  1: $t1 := borrow_local($t0)
  2: $t2 := m::f($t1)
  3: $t1 := infer($t2)
  4: $t3 := borrow_local($t0)
  5: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # live vars: $t0
  0: $t1 := infer($t0)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: &mut u64
     var $t3: &u64
     # live vars:
  0: $t0 := 22
     # live vars: $t0
  1: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  2: $t2 := m::f($t1)
     # live vars: $t0, $t2
  3: $t1 := infer($t2)
     # live vars: $t0
  4: $t3 := borrow_local($t0)
     # live vars:
  5: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # live vars: $t0
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: $t1 := infer($t0)
     # live vars: $t1
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: &mut u64
     var $t3: &u64
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := 22
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  2: $t2 := m::f($t1)
     # live vars: $t0, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[call(true, 2) -> @200],@200=derived[]}
     # locals: {$t0=@100,$t2=@200}
     # globals: {}
     # derived-from: @200=$t1
     #
  3: $t1 := infer($t2)
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
  4: $t3 := borrow_local($t0)
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
  5: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
     # abort state: {returns}
     # live vars: $t0
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: $t1 := infer($t0)
     # abort state: {returns}
     # live vars: $t1
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: &mut u64
     var $t3: &u64
     # abort state: {returns,aborts}
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := 22
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  2: $t2 := m::f($t1)
     # abort state: {returns}
     # live vars: $t0, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[call(true, 2) -> @200],@200=derived[]}
     # locals: {$t0=@100,$t2=@200}
     # globals: {}
     # derived-from: @200=$t1
     #
  3: $t1 := infer($t2)
     # abort state: {returns}
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
  4: $t3 := borrow_local($t0)
     # abort state: {returns}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
  5: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::f($t0: &mut u64): &mut u64 {
     var $t1: &mut u64
  0: $t1 := move($t0)
  1: return $t1
}


[variant baseline]
fun m::g() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: &mut u64
     var $t3: &u64
  0: $t0 := 22
  1: $t1 := borrow_local($t0)
  2: $t2 := m::f($t1)
  3: $t1 := move($t2)
  4: drop($t1)
  5: $t3 := borrow_local($t0)
  6: drop($t3)
  7: return ()
}
