processed 5 tasks

task 0 'publish'. lines 1-130:



>>> V1 Compiler {
== BEGIN Bytecode ==
// Move bytecode v6
module cafe.vectors {


entry public entry_test_guess_flips_abort() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_abort(vector<u8>)
	2: Ret
}
entry public entry_test_guess_flips_break() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_break(vector<u8>)
	2: Ret
}
entry public entry_test_guess_flips_break2() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_break2(vector<u8>)
	2: Ret
}
entry public entry_test_guess_flips_continue() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_continue(vector<u8>)
	2: Ret
}
entry public entry_test_guess_flips_nocheck() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_nocheck(vector<u8>)
	2: Ret
}
entry public guess_flips_abort(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[2](loc1: u64)
	2: ImmBorrowLoc[0](Arg0: vector<u8>)
	3: StLoc[1](loc0: &vector<u8>)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(3)
	7: Lt
	8: BrFalse(27)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(3)
	13: ReadRef
	14: LdU8(0)
	15: Eq
	16: BrFalse(18)
B4:
	17: Branch(22)
B5:
	18: MoveLoc[1](loc0: &vector<u8>)
	19: Pop
	20: LdU64(3)
	21: Abort
B6:
	22: MoveLoc[2](loc1: u64)
	23: LdU64(1)
	24: Add
	25: StLoc[2](loc1: u64)
	26: Branch(4)
B7:
	27: MoveLoc[1](loc0: &vector<u8>)
	28: Pop
	29: CopyLoc[0](Arg0: vector<u8>)
	30: Pop
	31: MoveLoc[0](Arg0: vector<u8>)
	32: Pop
	33: Ret
}
entry public guess_flips_break(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[2](loc1: u64)
	2: ImmBorrowLoc[0](Arg0: vector<u8>)
	3: StLoc[1](loc0: &vector<u8>)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(3)
	7: Lt
	8: BrFalse(30)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(3)
	13: ReadRef
	14: LdU8(0)
	15: Neq
	16: BrFalse(20)
B4:
	17: MoveLoc[1](loc0: &vector<u8>)
	18: Pop
	19: Branch(25)
B5:
	20: MoveLoc[2](loc1: u64)
	21: LdU64(1)
	22: Add
	23: StLoc[2](loc1: u64)
	24: Branch(4)
B6:
	25: CopyLoc[0](Arg0: vector<u8>)
	26: Pop
	27: MoveLoc[0](Arg0: vector<u8>)
	28: Pop
	29: Ret
B7:
	30: MoveLoc[1](loc0: &vector<u8>)
	31: Pop
	32: Branch(25)
}
entry public guess_flips_break2(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[2](loc1: u64)
	2: ImmBorrowLoc[0](Arg0: vector<u8>)
	3: StLoc[1](loc0: &vector<u8>)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(3)
	7: Lt
	8: BrFalse(40)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(3)
	13: ReadRef
	14: LdU8(0)
	15: Neq
	16: BrFalse(20)
B4:
	17: MoveLoc[1](loc0: &vector<u8>)
	18: Pop
	19: Branch(35)
B5:
	20: MoveLoc[2](loc1: u64)
	21: LdU64(1)
	22: Add
	23: StLoc[2](loc1: u64)
	24: CopyLoc[1](loc0: &vector<u8>)
	25: CopyLoc[2](loc1: u64)
	26: VecImmBorrow(3)
	27: ReadRef
	28: LdU8(5)
	29: Eq
	30: BrFalse(34)
B6:
	31: MoveLoc[1](loc0: &vector<u8>)
	32: Pop
	33: Branch(35)
B7:
	34: Branch(4)
B8:
	35: CopyLoc[0](Arg0: vector<u8>)
	36: Pop
	37: MoveLoc[0](Arg0: vector<u8>)
	38: Pop
	39: Ret
B9:
	40: MoveLoc[1](loc0: &vector<u8>)
	41: Pop
	42: Branch(35)
}
entry public guess_flips_continue(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[2](loc1: u64)
	2: ImmBorrowLoc[0](Arg0: vector<u8>)
	3: StLoc[1](loc0: &vector<u8>)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(3)
	7: Lt
	8: BrFalse(23)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[1](loc0: &vector<u8>)
	11: CopyLoc[2](loc1: u64)
	12: VecImmBorrow(3)
	13: ReadRef
	14: LdU8(0)
	15: Neq
	16: BrFalse(18)
B4:
	17: Branch(4)
B5:
	18: MoveLoc[2](loc1: u64)
	19: LdU64(1)
	20: Add
	21: StLoc[2](loc1: u64)
	22: Branch(4)
B6:
	23: MoveLoc[1](loc0: &vector<u8>)
	24: Pop
	25: CopyLoc[0](Arg0: vector<u8>)
	26: Pop
	27: MoveLoc[0](Arg0: vector<u8>)
	28: Pop
	29: Ret
}
entry public guess_flips_nocheck(Arg0: vector<u8>) {
L0:	loc1: u64
B0:
	0: LdU64(0)
	1: StLoc[2](loc1: u64)
	2: ImmBorrowLoc[0](Arg0: vector<u8>)
	3: StLoc[1](loc0: &vector<u8>)
B1:
	4: CopyLoc[2](loc1: u64)
	5: CopyLoc[1](loc0: &vector<u8>)
	6: VecLen(3)
	7: Lt
	8: BrFalse(15)
B2:
	9: Branch(10)
B3:
	10: MoveLoc[2](loc1: u64)
	11: LdU64(1)
	12: Add
	13: StLoc[2](loc1: u64)
	14: Branch(4)
B4:
	15: MoveLoc[1](loc0: &vector<u8>)
	16: Pop
	17: CopyLoc[0](Arg0: vector<u8>)
	18: Pop
	19: MoveLoc[0](Arg0: vector<u8>)
	20: Pop
	21: Ret
}
test_guess_flips_abort() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_abort(vector<u8>)
	2: Ret
}
test_guess_flips_break() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_break(vector<u8>)
	2: Ret
}
test_guess_flips_break2() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_break2(vector<u8>)
	2: Ret
}
test_guess_flips_continue() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_continue(vector<u8>)
	2: Ret
}
test_guess_flips_nocheck() {
B0:
	0: LdConst[0](Vector(U8): [4, 0, 0, 0, 0])
	1: Call guess_flips_nocheck(vector<u8>)
	2: Ret
}
}
== END Bytecode ==
}
