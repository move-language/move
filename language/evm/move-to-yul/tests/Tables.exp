/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_Tables" {
    code {
        codecopy(0, dataoffset("A2_Tables_deployed"), datasize("A2_Tables_deployed"))
        return(0, datasize("A2_Tables_deployed"))
    }
    object "A2_Tables_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                default {}
            }
            $Abort(97)
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
        }
    }
}


!! Succeeded compiling Yul


!! Unit tests

// test of Tables::test_borrow_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_borrow_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_borrow_fail()
        return (0, 0)
        function A2_Tables_test_borrow_fail() {
            let tmp_$1, tmp_$3, entry_ref, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21
            let $locals := $Malloc(128)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t12 := 100
                    $t12 := 100
                    // abort($t12)
                    $Abort($t12)
                }
                case 3 {
                    // label L0
                    // $t13 := borrow_local($t6)
                    $t13 := $MakePtr(false, $locals)
                    // $t14 := 42
                    $t14 := 42
                    // $t2 := $t14
                    mstore(add($locals, 64), $t14)
                    // $t15 := borrow_local($t2)
                    $t15 := $MakePtr(false, add($locals, 88))
                    // $t16 := Table::borrow_mut<u64, u128>($t13, $t15)
                    $t16 := A2_Table_borrow_mut$u64_u128$($t13, $t15)
                    // $t17 := 1
                    $t17 := 1
                    // write_ref($t16, $t17)
                    $StoreU128($t16, $t17)
                    // $t18 := 0x42
                    $t18 := 0x42
                    // $t4 := Evm::sign($t18)
                    mstore(add($locals, 96), A2_Evm_sign($t18))
                    // $t19 := borrow_local($t4)
                    $t19 := $MakePtr(false, add($locals, 96))
                    // $t20 := move($t6)
                    $t20 := mload($locals)
                    // $t21 := pack Tables::S<u64, u128>($t20)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t20)
                        $t21 := $mem
                    }
                    // move_to<Tables::S<u64, u128>>($t21, $t19)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $LoadU256($t19))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t21
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 128)
                    leave
                }
                case 4 {
                    // $t6 := Table::empty<u64, u128>()
                    mstore($locals, A2_Table_empty$u64_u128$())
                    // $t7 := borrow_local($t6)
                    $t7 := $MakePtr(false, $locals)
                    // $t8 := 42
                    $t8 := 42
                    // $t0 := $t8
                    mstore(add($locals, 32), $t8)
                    // $t9 := borrow_local($t0)
                    $t9 := $MakePtr(false, add($locals, 56))
                    // $t10 := Table::contains<u64, u128>($t7, $t9)
                    $t10 := A2_Table_contains$u64_u128$($t7, $t9)
                    // $t11 := !($t10)
                    $t11 := $LogicalNot($t10)
                    // if ($t11) goto L0 else goto L1
                    switch $t11
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_Table_contains$u64_u128$(table_ref, key_ref) -> res {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_empty$u64_u128$() -> table {
            table := $NewTableHandle()
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_borrow_mut$u64_u128$(table_ref, key_ref) -> value_ref {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU128(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU128(offs, val)
          }
          default {
            $StorageStoreU128(offs, val)
          }
        }
        function $MemoryStoreU128(offs, val) {
          $MemoryStoreBytes(offs, 16, val)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_borrow_fail: Revert(Reverted) (used_gas=25325): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Tables::test_insert_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_insert_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_insert_fail()
        return (0, 0)
        function A2_Tables_test_insert_fail() {
            let tmp_$1, tmp_$3, tmp_$5, tmp_$7, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32
            let $locals := $Malloc(192)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t15 := 100
                    $t15 := 100
                    // abort($t15)
                    $Abort($t15)
                }
                case 3 {
                    // label L0
                    // $t16 := borrow_local($t9)
                    $t16 := $MakePtr(false, $locals)
                    // $t17 := 42
                    $t17 := 42
                    // $t2 := $t17
                    mstore(add($locals, 64), $t17)
                    // $t18 := borrow_local($t2)
                    $t18 := $MakePtr(false, add($locals, 88))
                    // $t19 := 1012
                    $t19 := 1012
                    // Table::insert<u64, u128>($t16, $t18, $t19)
                    A2_Table_insert$u64_u128$($t16, $t18, $t19)
                    // $t20 := borrow_local($t9)
                    $t20 := $MakePtr(false, $locals)
                    // $t21 := 42
                    $t21 := 42
                    // $t4 := $t21
                    mstore(add($locals, 96), $t21)
                    // $t22 := borrow_local($t4)
                    $t22 := $MakePtr(false, add($locals, 120))
                    // $t23 := Table::contains<u64, u128>($t20, $t22)
                    $t23 := A2_Table_contains$u64_u128$($t20, $t22)
                    // if ($t23) goto L2 else goto L3
                    switch $t23
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t9 := Table::empty<u64, u128>()
                    mstore($locals, A2_Table_empty$u64_u128$())
                    // $t10 := borrow_local($t9)
                    $t10 := $MakePtr(false, $locals)
                    // $t11 := 42
                    $t11 := 42
                    // $t0 := $t11
                    mstore(add($locals, 32), $t11)
                    // $t12 := borrow_local($t0)
                    $t12 := $MakePtr(false, add($locals, 56))
                    // $t13 := Table::contains<u64, u128>($t10, $t12)
                    $t13 := A2_Table_contains$u64_u128$($t10, $t12)
                    // $t14 := !($t13)
                    $t14 := $LogicalNot($t13)
                    // if ($t14) goto L0 else goto L1
                    switch $t14
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t24 := 101
                    $t24 := 101
                    // abort($t24)
                    $Abort($t24)
                }
                case 6 {
                    // label L2
                    // $t25 := borrow_local($t9)
                    $t25 := $MakePtr(false, $locals)
                    // $t26 := 42
                    $t26 := 42
                    // $t6 := $t26
                    mstore(add($locals, 128), $t26)
                    // $t27 := borrow_local($t6)
                    $t27 := $MakePtr(false, add($locals, 152))
                    // $t28 := 1013
                    $t28 := 1013
                    // Table::insert<u64, u128>($t25, $t27, $t28)
                    A2_Table_insert$u64_u128$($t25, $t27, $t28)
                    // $t29 := 0x42
                    $t29 := 0x42
                    // $t8 := Evm::sign($t29)
                    mstore(add($locals, 160), A2_Evm_sign($t29))
                    // $t30 := borrow_local($t8)
                    $t30 := $MakePtr(false, add($locals, 160))
                    // $t31 := move($t9)
                    $t31 := mload($locals)
                    // $t32 := pack Tables::S<u64, u128>($t31)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t31)
                        $t32 := $mem
                    }
                    // move_to<Tables::S<u64, u128>>($t32, $t30)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $LoadU256($t30))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t32
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 192)
                    leave
                }
            }
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_insert$u64_u128$(table_ref, key_ref, value) {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_107084805 := $NewLinkedStorageBase(0x661fc05)
            $StorageStoreU128($linked_dst_107084805, value)
            sstore(storage_key, $linked_dst_107084805)
        }
        function A2_Table_contains$u64_u128$(table_ref, key_ref) -> res {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_empty$u64_u128$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_insert_fail: Revert(Reverted) (used_gas=90854): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Tables::test_primitive
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_primitive" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_primitive()
        return (0, 0)
        function A2_Tables_test_primitive() {
            let tmp_$1, tmp_$3, tmp_$5, tmp_$7, tmp_$9, tmp_$11, tmp_$12, tmp_$14, tmp_$17, tmp_$19, tmp_$22, tmp_$24, tmp_$26, tmp_$28, t_ref, v, v_28, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108, $t109, $t110, $t111, $t112, $t113, $t114, $t115, $t116, $t117, $t118, $t119, $t120, $t121, $t122, $t123, $t124, $t125, $t126, $t127, $t128, $t129, $t130, $t131
            let $locals := $Malloc(576)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t40 := 100
                    $t40 := 100
                    // abort($t40)
                    $Abort($t40)
                }
                case 3 {
                    // label L0
                    // $t41 := borrow_local($t31)
                    $t41 := $MakePtr(false, $locals)
                    // $t42 := 42
                    $t42 := 42
                    // $t21 := $t42
                    mstore(add($locals, 64), $t42)
                    // $t43 := borrow_local($t21)
                    $t43 := $MakePtr(false, add($locals, 88))
                    // $t44 := 1012
                    $t44 := 1012
                    // Table::insert<u64, u128>($t41, $t43, $t44)
                    A2_Table_insert$u64_u128$($t41, $t43, $t44)
                    // $t45 := borrow_local($t31)
                    $t45 := $MakePtr(false, $locals)
                    // $t46 := 42
                    $t46 := 42
                    // $t25 := $t46
                    mstore(add($locals, 96), $t46)
                    // $t47 := borrow_local($t25)
                    $t47 := $MakePtr(false, add($locals, 120))
                    // $t48 := Table::contains<u64, u128>($t45, $t47)
                    $t48 := A2_Table_contains$u64_u128$($t45, $t47)
                    // if ($t48) goto L2 else goto L3
                    switch $t48
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t31 := Table::empty<u64, u128>()
                    mstore($locals, A2_Table_empty$u64_u128$())
                    // $t35 := borrow_local($t31)
                    $t35 := $MakePtr(false, $locals)
                    // $t36 := 42
                    $t36 := 42
                    // $t0 := $t36
                    mstore(add($locals, 32), $t36)
                    // $t37 := borrow_local($t0)
                    $t37 := $MakePtr(false, add($locals, 56))
                    // $t38 := Table::contains<u64, u128>($t35, $t37)
                    $t38 := A2_Table_contains$u64_u128$($t35, $t37)
                    // $t39 := !($t38)
                    $t39 := $LogicalNot($t38)
                    // if ($t39) goto L0 else goto L1
                    switch $t39
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t49 := 101
                    $t49 := 101
                    // abort($t49)
                    $Abort($t49)
                }
                case 6 {
                    // label L2
                    // $t50 := borrow_local($t31)
                    $t50 := $MakePtr(false, $locals)
                    // $t51 := 0
                    $t51 := 0
                    // $t27 := $t51
                    mstore(add($locals, 128), $t51)
                    // $t52 := borrow_local($t27)
                    $t52 := $MakePtr(false, add($locals, 152))
                    // $t53 := Table::contains<u64, u128>($t50, $t52)
                    $t53 := A2_Table_contains$u64_u128$($t50, $t52)
                    // $t54 := !($t53)
                    $t54 := $LogicalNot($t53)
                    // if ($t54) goto L4 else goto L5
                    switch $t54
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t55 := 102
                    $t55 := 102
                    // abort($t55)
                    $Abort($t55)
                }
                case 8 {
                    // label L4
                    // $t56 := borrow_local($t31)
                    $t56 := $MakePtr(false, $locals)
                    // $t57 := 42
                    $t57 := 42
                    // $t29 := $t57
                    mstore(add($locals, 160), $t57)
                    // $t58 := borrow_local($t29)
                    $t58 := $MakePtr(false, add($locals, 184))
                    // $t59 := Table::borrow<u64, u128>($t56, $t58)
                    $t59 := A2_Table_borrow$u64_u128$($t56, $t58)
                    // $t60 := read_ref($t59)
                    $t60 := $LoadU128($t59)
                    // $t61 := 1012
                    $t61 := 1012
                    // $t62 := ==($t60, $t61)
                    $t62 := $Eq($t60, $t61)
                    // if ($t62) goto L6 else goto L7
                    switch $t62
                    case 0  { $block := 9 }
                    default { $block := 10 }
                }
                case 9 {
                    // label L7
                    // $t63 := 103
                    $t63 := 103
                    // abort($t63)
                    $Abort($t63)
                }
                case 10 {
                    // label L6
                    // $t64 := borrow_local($t31)
                    $t64 := $MakePtr(false, $locals)
                    // $t65 := 43
                    $t65 := 43
                    // $t2 := $t65
                    mstore(add($locals, 192), $t65)
                    // $t66 := borrow_local($t2)
                    $t66 := $MakePtr(false, add($locals, 216))
                    // $t67 := 1013
                    $t67 := 1013
                    // Table::insert<u64, u128>($t64, $t66, $t67)
                    A2_Table_insert$u64_u128$($t64, $t66, $t67)
                    // $t68 := borrow_local($t31)
                    $t68 := $MakePtr(false, $locals)
                    // $t69 := 42
                    $t69 := 42
                    // $t4 := $t69
                    mstore(add($locals, 224), $t69)
                    // $t70 := borrow_local($t4)
                    $t70 := $MakePtr(false, add($locals, 248))
                    // $t71 := Table::contains<u64, u128>($t68, $t70)
                    $t71 := A2_Table_contains$u64_u128$($t68, $t70)
                    // if ($t71) goto L8 else goto L9
                    switch $t71
                    case 0  { $block := 11 }
                    default { $block := 12 }
                }
                case 11 {
                    // label L9
                    // $t72 := 104
                    $t72 := 104
                    // abort($t72)
                    $Abort($t72)
                }
                case 12 {
                    // label L8
                    // $t73 := borrow_local($t31)
                    $t73 := $MakePtr(false, $locals)
                    // $t74 := 0
                    $t74 := 0
                    // $t6 := $t74
                    mstore(add($locals, 256), $t74)
                    // $t75 := borrow_local($t6)
                    $t75 := $MakePtr(false, add($locals, 280))
                    // $t76 := Table::contains<u64, u128>($t73, $t75)
                    $t76 := A2_Table_contains$u64_u128$($t73, $t75)
                    // $t77 := !($t76)
                    $t77 := $LogicalNot($t76)
                    // if ($t77) goto L10 else goto L11
                    switch $t77
                    case 0  { $block := 13 }
                    default { $block := 14 }
                }
                case 13 {
                    // label L11
                    // $t78 := 105
                    $t78 := 105
                    // abort($t78)
                    $Abort($t78)
                }
                case 14 {
                    // label L10
                    // $t79 := borrow_local($t31)
                    $t79 := $MakePtr(false, $locals)
                    // $t80 := 43
                    $t80 := 43
                    // $t8 := $t80
                    mstore(add($locals, 288), $t80)
                    // $t81 := borrow_local($t8)
                    $t81 := $MakePtr(false, add($locals, 312))
                    // $t82 := Table::contains<u64, u128>($t79, $t81)
                    $t82 := A2_Table_contains$u64_u128$($t79, $t81)
                    // if ($t82) goto L12 else goto L13
                    switch $t82
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 15 {
                    // label L13
                    // $t83 := 106
                    $t83 := 106
                    // abort($t83)
                    $Abort($t83)
                }
                case 16 {
                    // label L12
                    // $t84 := borrow_local($t31)
                    $t84 := $MakePtr(false, $locals)
                    // $t85 := 43
                    $t85 := 43
                    // $t10 := $t85
                    mstore(add($locals, 320), $t85)
                    // $t86 := borrow_local($t10)
                    $t86 := $MakePtr(false, add($locals, 344))
                    // $t87 := Table::borrow<u64, u128>($t84, $t86)
                    $t87 := A2_Table_borrow$u64_u128$($t84, $t86)
                    // $t88 := read_ref($t87)
                    $t88 := $LoadU128($t87)
                    // $t89 := 1013
                    $t89 := 1013
                    // $t90 := ==($t88, $t89)
                    $t90 := $Eq($t88, $t89)
                    // if ($t90) goto L14 else goto L15
                    switch $t90
                    case 0  { $block := 17 }
                    default { $block := 18 }
                }
                case 17 {
                    // label L15
                    // $t91 := 107
                    $t91 := 107
                    // abort($t91)
                    $Abort($t91)
                }
                case 18 {
                    // label L14
                    // $t92 := borrow_local($t31)
                    $t92 := $MakePtr(false, $locals)
                    // $t93 := 42
                    $t93 := 42
                    // $t13 := $t93
                    mstore(add($locals, 352), $t93)
                    // $t94 := borrow_local($t13)
                    $t94 := $MakePtr(false, add($locals, 376))
                    // $t95 := Table::remove<u64, u128>($t92, $t94)
                    $t95 := A2_Table_remove$u64_u128$($t92, $t94)
                    // $t96 := 1012
                    $t96 := 1012
                    // $t97 := ==($t95, $t96)
                    $t97 := $Eq($t95, $t96)
                    // if ($t97) goto L16 else goto L17
                    switch $t97
                    case 0  { $block := 19 }
                    default { $block := 20 }
                }
                case 19 {
                    // label L17
                    // $t98 := 108
                    $t98 := 108
                    // abort($t98)
                    $Abort($t98)
                }
                case 20 {
                    // label L16
                    // $t99 := 0x42
                    $t99 := 0x42
                    // $t15 := Evm::sign($t99)
                    mstore(add($locals, 384), A2_Evm_sign($t99))
                    // $t100 := borrow_local($t15)
                    $t100 := $MakePtr(false, add($locals, 384))
                    // $t101 := move($t31)
                    $t101 := mload($locals)
                    // $t102 := pack Tables::S<u64, u128>($t101)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t101)
                        $t102 := $mem
                    }
                    // move_to<Tables::S<u64, u128>>($t102, $t100)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $LoadU256($t100))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t102
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // $t103 := 0x42
                    $t103 := 0x42
                    // $t104 := borrow_global<Tables::S<u64, u128>>($t103)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $t103)
                        if iszero($AlignedStorageLoad($base_offset)) {
                          $AbortBuiltin()
                        }
                        $t104 := $MakePtr(true, add($base_offset, 32))
                    }
                    // $t105 := borrow_field<Tables::S<u64, u128>>.t($t104)
                    $t105 := $t104
                    // $t106 := 42
                    $t106 := 42
                    // $t16 := $t106
                    mstore(add($locals, 416), $t106)
                    // $t107 := borrow_local($t16)
                    $t107 := $MakePtr(false, add($locals, 440))
                    // $t108 := Table::contains<u64, u128>($t105, $t107)
                    $t108 := A2_Table_contains$u64_u128$($t105, $t107)
                    // $t109 := !($t108)
                    $t109 := $LogicalNot($t108)
                    // if ($t109) goto L18 else goto L19
                    switch $t109
                    case 0  { $block := 21 }
                    default { $block := 22 }
                }
                case 21 {
                    // label L19
                    // destroy($t105)
                    // $t110 := 109
                    $t110 := 109
                    // abort($t110)
                    $Abort($t110)
                }
                case 22 {
                    // label L18
                    // $t111 := 43
                    $t111 := 43
                    // $t18 := $t111
                    mstore(add($locals, 448), $t111)
                    // $t112 := borrow_local($t18)
                    $t112 := $MakePtr(false, add($locals, 472))
                    // $t113 := Table::borrow<u64, u128>($t105, $t112)
                    $t113 := A2_Table_borrow$u64_u128$($t105, $t112)
                    // $t114 := read_ref($t113)
                    $t114 := $LoadU128($t113)
                    // $t115 := 1013
                    $t115 := 1013
                    // $t116 := ==($t114, $t115)
                    $t116 := $Eq($t114, $t115)
                    // if ($t116) goto L20 else goto L21
                    switch $t116
                    case 0  { $block := 23 }
                    default { $block := 24 }
                }
                case 23 {
                    // label L21
                    // $t117 := 110
                    $t117 := 110
                    // abort($t117)
                    $Abort($t117)
                }
                case 24 {
                    // label L20
                    // $t118 := 0x42
                    $t118 := 0x42
                    // $t119 := move_from<Tables::S<u64, u128>>($t118)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $t118)
                        if iszero($AlignedStorageLoad($base_offset)) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, false)
                        {
                            let $src := add($base_offset, 32)
                            let $dst
                            $dst := $Malloc(32)
                            mstore(add($dst, 0), $AlignedStorageLoad(add($src, 0)))
                            $AlignedStorageStore(add($src, 0), 0)
                            $t119 := $dst
                        }
                    }
                    // $t30 := unpack Tables::S<u64, u128>($t119)
                    mstore(add($locals, 480), $MemoryLoadU256(add($t119, 0)))
                    $Free($t119, 32)
                    // $t120 := borrow_local($t30)
                    $t120 := $MakePtr(false, add($locals, 480))
                    // $t121 := 43
                    $t121 := 43
                    // $t20 := $t121
                    mstore(add($locals, 512), $t121)
                    // $t122 := borrow_local($t20)
                    $t122 := $MakePtr(false, add($locals, 536))
                    // $t123 := Table::borrow<u64, u128>($t120, $t122)
                    $t123 := A2_Table_borrow$u64_u128$($t120, $t122)
                    // $t124 := read_ref($t123)
                    $t124 := $LoadU128($t123)
                    // $t125 := 1013
                    $t125 := 1013
                    // $t126 := ==($t124, $t125)
                    $t126 := $Eq($t124, $t125)
                    // if ($t126) goto L22 else goto L23
                    switch $t126
                    case 0  { $block := 25 }
                    default { $block := 26 }
                }
                case 25 {
                    // label L23
                    // $t127 := 111
                    $t127 := 111
                    // abort($t127)
                    $Abort($t127)
                }
                case 26 {
                    // label L22
                    // $t128 := 0x43
                    $t128 := 0x43
                    // $t23 := Evm::sign($t128)
                    mstore(add($locals, 544), A2_Evm_sign($t128))
                    // $t129 := borrow_local($t23)
                    $t129 := $MakePtr(false, add($locals, 544))
                    // $t130 := move($t30)
                    $t130 := mload(add($locals, 480))
                    // $t131 := pack Tables::S<u64, u128>($t130)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t130)
                        $t131 := $mem
                    }
                    // move_to<Tables::S<u64, u128>>($t131, $t129)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x8a475b1c, $LoadU256($t129))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t131
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 576)
                    leave
                }
            }
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_borrow$u64_u128$(table_ref, key_ref) -> value_ref {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_contains$u64_u128$(table_ref, key_ref) -> res {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_remove$u64_u128$(table_ref, key_ref) -> value {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let linked_src := sload(storage_key)
            if iszero(linked_src) {
              $AbortBuiltin()
            }
            value := $StorageLoadU128(linked_src)
            $AlignedStorageStore(linked_src, 0)
            sstore(storage_key, 0)
        }
        function A2_Table_insert$u64_u128$(table_ref, key_ref, value) {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_107084805 := $NewLinkedStorageBase(0x661fc05)
            $StorageStoreU128($linked_dst_107084805, value)
            sstore(storage_key, $linked_dst_107084805)
        }
        function A2_Table_empty$u64_u128$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $LoadU128(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU128(offs)
          }
          default {
            val := $StorageLoadU128(offs)
          }
        }
        function $MemoryLoadU128(offs) -> val {
          val := $MemoryLoadBytes(offs, 16)
        }
        function $StorageLoadU128(offs) -> val {
          val := $StorageLoadBytes(offs, 16)
        }
        function $StorageStoreU128(offs, val) {
          $StorageStoreBytes(offs, 16, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_primitive: Succeed(Stopped) (used_gas=190947): []

// test of Tables::test_remove_fail
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_remove_fail" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_remove_fail()
        return (0, 0)
        function A2_Tables_test_remove_fail() {
            let tmp_$1, value, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16
            let $locals := $Malloc(96)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t12 := 101
                    $t12 := 101
                    // abort($t12)
                    $Abort($t12)
                }
                case 3 {
                    // label L0
                    // $t13 := 0x42
                    $t13 := 0x42
                    // $t2 := Evm::sign($t13)
                    mstore(add($locals, 64), A2_Evm_sign($t13))
                    // $t14 := borrow_local($t2)
                    $t14 := $MakePtr(false, add($locals, 64))
                    // $t15 := move($t3)
                    $t15 := mload($locals)
                    // $t16 := pack Tables::S<u64, Tables::Balance>($t15)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t15)
                        $t16 := $mem
                    }
                    // move_to<Tables::S<u64, Tables::Balance>>($t16, $t14)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x6f98bffd, $LoadU256($t14))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t16
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 96)
                    leave
                }
                case 4 {
                    // $t3 := Table::empty<u64, Tables::Balance>()
                    mstore($locals, A2_Table_empty$u64_A2_Tables_Balance$())
                    // $t5 := borrow_local($t3)
                    $t5 := $MakePtr(false, $locals)
                    // $t6 := 42
                    $t6 := 42
                    // $t0 := $t6
                    mstore(add($locals, 32), $t6)
                    // $t7 := borrow_local($t0)
                    $t7 := $MakePtr(false, add($locals, 56))
                    // $t8 := Table::remove<u64, Tables::Balance>($t5, $t7)
                    $t8 := A2_Table_remove$u64_A2_Tables_Balance$($t5, $t7)
                    // $t9 := unpack Tables::Balance($t8)
                    $t9 := $MemoryLoadU256(add($t8, 0))
                    $Free($t8, 32)
                    // $t10 := U256::zero()
                    $t10 := A2_U256_zero()
                    // $t11 := ==($t9, $t10)
                    $t11 := $Eq($t9, $t10)
                    // if ($t11) goto L0 else goto L1
                    switch $t11
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
            }
        }

        function A2_U256_zero() -> $result {
            let $t0
            // $t0 := 0
            $t0 := 0
            // return $t0
            $result := $t0
        }

        function A2_Table_remove$u64_A2_Tables_Balance$(table_ref, key_ref) -> value {
            let key := $LoadU64(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let linked_src := sload(storage_key)
            if iszero(linked_src) {
              $AbortBuiltin()
            }
            value := $Malloc(32)
            mstore(add(value, 0), $AlignedStorageLoad(add(linked_src, 0)))
            $AlignedStorageStore(add(linked_src, 0), 0)
            $AlignedStorageStore(linked_src, 0)
            sstore(storage_key, 0)
        }
        function A2_Table_empty$u64_A2_Tables_Balance$() -> table {
            table := $NewTableHandle()
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_remove_fail: Revert(Reverted) (used_gas=24809): [255, 255, 255, 255, 255, 255, 255, 255]

// test of Tables::test_struct
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_struct" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_struct()
        return (0, 0)
        function A2_Tables_test_struct() {
            let tmp_$2, tmp_$3, tmp_$4, tmp_$6, tmp_$7, tmp_$8, tmp_$10, tmp_$11, tmp_$13, tmp_$14, tmp_$15, tmp_$17, tmp_$19, tmp_$20, tmp_$21, tmp_$23, tmp_$25, tmp_$28, entry_mut_ref, global_t, val_1, val_2, value, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108
            let $locals := $Malloc(384)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t45 := 101
                    $t45 := 101
                    // abort($t45)
                    $Abort($t45)
                }
                case 3 {
                    // label L0
                    // $t46 := borrow_local($t31)
                    $t46 := $MakePtr(false, $locals)
                    // $t47 := 0xab
                    $t47 := 0xab
                    // $t24 := $t47
                    mstore(add($locals, 96), $t47)
                    // $t48 := borrow_local($t24)
                    $t48 := $MakePtr(false, add($locals, 96))
                    // $t49 := Table::borrow<address, Tables::Balance>($t46, $t48)
                    $t49 := A2_Table_borrow$address_A2_Tables_Balance$($t46, $t48)
                    // $t50 := borrow_field<Tables::Balance>.value($t49)
                    $t50 := $t49
                    // $t51 := read_ref($t50)
                    $t51 := $LoadU256($t50)
                    // $t52 := ==($t51, $t35)
                    $t52 := $Eq($t51, $t35)
                    // if ($t52) goto L2 else goto L3
                    switch $t52
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t31 := Table::empty<address, Tables::Balance>()
                    mstore($locals, A2_Table_empty$address_A2_Tables_Balance$())
                    // $t35 := 3743106036130323098097120681749450326028
                    $t35 := 3743106036130323098097120681749450326028
                    // $t36 := 15312706511442230855851857334429569515566
                    $t36 := 15312706511442230855851857334429569515566
                    // $t37 := borrow_local($t31)
                    $t37 := $MakePtr(false, $locals)
                    // $t38 := 0xab
                    $t38 := 0xab
                    // $t0 := $t38
                    mstore(add($locals, 32), $t38)
                    // $t39 := borrow_local($t0)
                    $t39 := $MakePtr(false, add($locals, 32))
                    // $t40 := pack Tables::Balance($t35)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t35)
                        $t40 := $mem
                    }
                    // Table::insert<address, Tables::Balance>($t37, $t39, $t40)
                    A2_Table_insert$address_A2_Tables_Balance$($t37, $t39, $t40)
                    // $t41 := borrow_local($t31)
                    $t41 := $MakePtr(false, $locals)
                    // $t42 := 0xab
                    $t42 := 0xab
                    // $t22 := $t42
                    mstore(add($locals, 64), $t42)
                    // $t43 := borrow_local($t22)
                    $t43 := $MakePtr(false, add($locals, 64))
                    // $t44 := Table::contains<address, Tables::Balance>($t41, $t43)
                    $t44 := A2_Table_contains$address_A2_Tables_Balance$($t41, $t43)
                    // if ($t44) goto L0 else goto L1
                    switch $t44
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t53 := 102
                    $t53 := 102
                    // abort($t53)
                    $Abort($t53)
                }
                case 6 {
                    // label L2
                    // $t54 := 0x42
                    $t54 := 0x42
                    // $t26 := Evm::sign($t54)
                    mstore(add($locals, 128), A2_Evm_sign($t54))
                    // $t55 := borrow_local($t26)
                    $t55 := $MakePtr(false, add($locals, 128))
                    // $t56 := move($t31)
                    $t56 := mload($locals)
                    // $t57 := pack Tables::S<address, Tables::Balance>($t56)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t56)
                        $t57 := $mem
                    }
                    // move_to<Tables::S<address, Tables::Balance>>($t57, $t55)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x7dd56ec3, $LoadU256($t55))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t57
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // $t58 := 0x42
                    $t58 := 0x42
                    // $t59 := borrow_global<Tables::S<address, Tables::Balance>>($t58)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0x7dd56ec3, $t58)
                        if iszero($AlignedStorageLoad($base_offset)) {
                          $AbortBuiltin()
                        }
                        $t59 := $MakePtr(true, add($base_offset, 32))
                    }
                    // $t60 := borrow_field<Tables::S<address, Tables::Balance>>.t($t59)
                    $t60 := $t59
                    // $t61 := 0xcd
                    $t61 := 0xcd
                    // $t27 := $t61
                    mstore(add($locals, 160), $t61)
                    // $t62 := borrow_local($t27)
                    $t62 := $MakePtr(false, add($locals, 160))
                    // $t63 := pack Tables::Balance($t36)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t36)
                        $t63 := $mem
                    }
                    // Table::insert<address, Tables::Balance>($t60, $t62, $t63)
                    A2_Table_insert$address_A2_Tables_Balance$($t60, $t62, $t63)
                    // $t64 := 0xab
                    $t64 := 0xab
                    // $t1 := $t64
                    mstore(add($locals, 192), $t64)
                    // $t65 := borrow_local($t1)
                    $t65 := $MakePtr(false, add($locals, 192))
                    // $t66 := freeze_ref($t60)
                    $t66 := $t60
                    // $t67 := Table::borrow<address, Tables::Balance>($t66, $t65)
                    $t67 := A2_Table_borrow$address_A2_Tables_Balance$($t66, $t65)
                    // $t68 := borrow_field<Tables::Balance>.value($t67)
                    $t68 := $t67
                    // $t69 := read_ref($t68)
                    $t69 := $LoadU256($t68)
                    // $t70 := ==($t69, $t35)
                    $t70 := $Eq($t69, $t35)
                    // if ($t70) goto L4 else goto L5
                    switch $t70
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // destroy($t60)
                    // $t71 := 103
                    $t71 := 103
                    // abort($t71)
                    $Abort($t71)
                }
                case 8 {
                    // label L4
                    // $t72 := 0xcd
                    $t72 := 0xcd
                    // $t5 := $t72
                    mstore(add($locals, 224), $t72)
                    // $t73 := borrow_local($t5)
                    $t73 := $MakePtr(false, add($locals, 224))
                    // $t74 := freeze_ref($t60)
                    $t74 := $t60
                    // $t75 := Table::borrow<address, Tables::Balance>($t74, $t73)
                    $t75 := A2_Table_borrow$address_A2_Tables_Balance$($t74, $t73)
                    // $t76 := borrow_field<Tables::Balance>.value($t75)
                    $t76 := $t75
                    // $t77 := read_ref($t76)
                    $t77 := $LoadU256($t76)
                    // $t78 := ==($t77, $t36)
                    $t78 := $Eq($t77, $t36)
                    // if ($t78) goto L6 else goto L7
                    switch $t78
                    case 0  { $block := 9 }
                    default { $block := 10 }
                }
                case 9 {
                    // label L7
                    // destroy($t60)
                    // $t79 := 104
                    $t79 := 104
                    // abort($t79)
                    $Abort($t79)
                }
                case 10 {
                    // label L6
                    // $t80 := 0xcd
                    $t80 := 0xcd
                    // $t9 := $t80
                    mstore(add($locals, 256), $t80)
                    // $t81 := borrow_local($t9)
                    $t81 := $MakePtr(false, add($locals, 256))
                    // $t82 := Table::borrow_mut<address, Tables::Balance>($t60, $t81)
                    $t82 := A2_Table_borrow_mut$address_A2_Tables_Balance$($t60, $t81)
                    // $t83 := borrow_field<Tables::Balance>.value($t82)
                    $t83 := $t82
                    // $t84 := read_ref($t83)
                    $t84 := $LoadU256($t83)
                    // $t85 := U256::one()
                    $t85 := A2_U256_one()
                    // $t86 := -($t84, $t85)
                    $t86 := $Sub($t84, $t85)
                    // $t87 := borrow_field<Tables::Balance>.value($t82)
                    $t87 := $t82
                    // write_ref($t87, $t86)
                    $StoreU256($t87, $t86)
                    // $t88 := 0xcd
                    $t88 := 0xcd
                    // $t12 := $t88
                    mstore(add($locals, 288), $t88)
                    // $t89 := borrow_local($t12)
                    $t89 := $MakePtr(false, add($locals, 288))
                    // $t90 := freeze_ref($t60)
                    $t90 := $t60
                    // $t91 := Table::borrow<address, Tables::Balance>($t90, $t89)
                    $t91 := A2_Table_borrow$address_A2_Tables_Balance$($t90, $t89)
                    // $t92 := borrow_field<Tables::Balance>.value($t91)
                    $t92 := $t91
                    // $t93 := read_ref($t92)
                    $t93 := $LoadU256($t92)
                    // $t94 := 15312706511442230855851857334429569515565
                    $t94 := 15312706511442230855851857334429569515565
                    // $t95 := ==($t93, $t94)
                    $t95 := $Eq($t93, $t94)
                    // if ($t95) goto L8 else goto L9
                    switch $t95
                    case 0  { $block := 11 }
                    default { $block := 12 }
                }
                case 11 {
                    // label L9
                    // destroy($t60)
                    // $t96 := 105
                    $t96 := 105
                    // abort($t96)
                    $Abort($t96)
                }
                case 12 {
                    // label L8
                    // $t97 := 0xab
                    $t97 := 0xab
                    // $t16 := $t97
                    mstore(add($locals, 320), $t97)
                    // $t98 := borrow_local($t16)
                    $t98 := $MakePtr(false, add($locals, 320))
                    // $t99 := Table::remove<address, Tables::Balance>($t60, $t98)
                    $t99 := A2_Table_remove$address_A2_Tables_Balance$($t60, $t98)
                    // $t100 := unpack Tables::Balance($t99)
                    $t100 := $MemoryLoadU256(add($t99, 0))
                    $Free($t99, 32)
                    // $t101 := ==($t100, $t35)
                    $t101 := $Eq($t100, $t35)
                    // if ($t101) goto L10 else goto L11
                    switch $t101
                    case 0  { $block := 13 }
                    default { $block := 14 }
                }
                case 13 {
                    // label L11
                    // destroy($t60)
                    // $t102 := 106
                    $t102 := 106
                    // abort($t102)
                    $Abort($t102)
                }
                case 14 {
                    // label L10
                    // $t103 := 0xab
                    $t103 := 0xab
                    // $t18 := $t103
                    mstore(add($locals, 352), $t103)
                    // $t104 := borrow_local($t18)
                    $t104 := $MakePtr(false, add($locals, 352))
                    // $t105 := freeze_ref($t60)
                    $t105 := $t60
                    // $t106 := Table::contains<address, Tables::Balance>($t105, $t104)
                    $t106 := A2_Table_contains$address_A2_Tables_Balance$($t105, $t104)
                    // $t107 := !($t106)
                    $t107 := $LogicalNot($t106)
                    // if ($t107) goto L12 else goto L13
                    switch $t107
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 15 {
                    // label L13
                    // $t108 := 107
                    $t108 := 107
                    // abort($t108)
                    $Abort($t108)
                }
                case 16 {
                    // label L12
                    // return ()
                    $Free($locals, 384)
                    leave
                }
            }
        }

        function A2_Table_contains$address_A2_Tables_Balance$(table_ref, key_ref) -> res {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_remove$address_A2_Tables_Balance$(table_ref, key_ref) -> value {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let linked_src := sload(storage_key)
            if iszero(linked_src) {
              $AbortBuiltin()
            }
            value := $Malloc(32)
            mstore(add(value, 0), $AlignedStorageLoad(add(linked_src, 0)))
            $AlignedStorageStore(add(linked_src, 0), 0)
            $AlignedStorageStore(linked_src, 0)
            sstore(storage_key, 0)
        }
        function A2_Table_borrow$address_A2_Tables_Balance$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_U256_one() -> $result {
            let $t0
            // $t0 := 1
            $t0 := 1
            // return $t0
            $result := $t0
        }

        function A2_Table_borrow_mut$address_A2_Tables_Balance$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_insert$address_A2_Tables_Balance$(table_ref, key_ref, value) {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_2739064938 := $NewLinkedStorageBase(0xa342d06a)
            $AlignedStorageStore(add($linked_dst_2739064938, 0), mload(add(value, 0)))
            $Free(value, 32)
            sstore(storage_key, $linked_dst_2739064938)
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_empty$address_A2_Tables_Balance$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $Sub(x, y) -> r {
            if lt(x, y) { $AbortBuiltin() }
            r := sub(x, y)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_struct: Succeed(Stopped) (used_gas=151439): []

// test of Tables::test_table_of_tables
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_table_of_tables" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_table_of_tables()
        return (0, 0)
        function A2_Tables_test_table_of_tables() {
            let tmp_$2, tmp_$3, tmp_$6, tmp_$7, tmp_$10, tmp_$11, tmp_$12, tmp_$15, tmp_$16, tmp_$19, tmp_$20, tmp_$24, tmp_$25, tmp_$28, tmp_$29, tmp_$32, tmp_$33, tmp_$34, tmp_$37, tmp_$38, tmp_$41, tmp_$43, val, val_1, val_2, val_3, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108, $t109, $t110, $t111, $t112, $t113, $t114, $t115, $t116, $t117, $t118, $t119, $t120, $t121, $t122, $t123, $t124, $t125, $t126, $t127, $t128, $t129, $t130, $t131, $t132, $t133, $t134, $t135, $t136, $t137, $t138, $t139, $t140, $t141, $t142, $t143, $t144, $t145, $t146, $t147, $t148, $t149, $t150, $t151, $t152
            let $locals := $Malloc(832)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t76 := 101
                    $t76 := 101
                    // abort($t76)
                    $Abort($t76)
                }
                case 3 {
                    // label L0
                    // $t77 := borrow_local($t45)
                    $t77 := $MakePtr(false, add($locals, 128))
                    // $t78 := 0x34
                    $t78 := 0x34
                    // $t5 := $t78
                    mstore(add($locals, 288), $t78)
                    // $t79 := borrow_local($t5)
                    $t79 := $MakePtr(false, add($locals, 288))
                    // $t80 := Table::borrow<address, Table::Table<address, U256::U256>>($t77, $t79)
                    $t80 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t77, $t79)
                    // $t81 := 0xcd
                    $t81 := 0xcd
                    // $t4 := $t81
                    mstore(add($locals, 320), $t81)
                    // $t82 := borrow_local($t4)
                    $t82 := $MakePtr(false, add($locals, 320))
                    // $t83 := Table::contains<address, U256::U256>($t80, $t82)
                    $t83 := A2_Table_contains$address_A2_U256_U256$($t80, $t82)
                    // if ($t83) goto L2 else goto L3
                    switch $t83
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t45 := Table::empty<address, Table::Table<address, U256::U256>>()
                    mstore(add($locals, 128), A2_Table_empty$address_A2_Table_Table$address_A2_U256_U256$$())
                    // $t52 := 3743106036130323098097120681749450326028
                    $t52 := 3743106036130323098097120681749450326028
                    // $t53 := 15312706511442230855851857334429569515566
                    $t53 := 15312706511442230855851857334429569515566
                    // $t54 := 26542024619833200150143219379677920493647
                    $t54 := 26542024619833200150143219379677920493647
                    // $t46 := Table::empty<address, U256::U256>()
                    mstore($locals, A2_Table_empty$address_A2_U256_U256$())
                    // $t55 := borrow_local($t46)
                    $t55 := $MakePtr(false, $locals)
                    // $t56 := 0xab
                    $t56 := 0xab
                    // $t0 := $t56
                    mstore(add($locals, 32), $t56)
                    // $t57 := borrow_local($t0)
                    $t57 := $MakePtr(false, add($locals, 32))
                    // Table::insert<address, U256::U256>($t55, $t57, $t52)
                    A2_Table_insert$address_A2_U256_U256$($t55, $t57, $t52)
                    // $t47 := Table::empty<address, U256::U256>()
                    mstore(add($locals, 64), A2_Table_empty$address_A2_U256_U256$())
                    // $t58 := borrow_local($t47)
                    $t58 := $MakePtr(false, add($locals, 64))
                    // $t59 := 0xcd
                    $t59 := 0xcd
                    // $t22 := $t59
                    mstore(add($locals, 96), $t59)
                    // $t60 := borrow_local($t22)
                    $t60 := $MakePtr(false, add($locals, 96))
                    // Table::insert<address, U256::U256>($t58, $t60, $t53)
                    A2_Table_insert$address_A2_U256_U256$($t58, $t60, $t53)
                    // $t61 := borrow_local($t45)
                    $t61 := $MakePtr(false, add($locals, 128))
                    // $t62 := 0x12
                    $t62 := 0x12
                    // $t40 := $t62
                    mstore(add($locals, 160), $t62)
                    // $t63 := borrow_local($t40)
                    $t63 := $MakePtr(false, add($locals, 160))
                    // $t64 := move($t46)
                    $t64 := mload($locals)
                    // Table::insert<address, Table::Table<address, U256::U256>>($t61, $t63, $t64)
                    A2_Table_insert$address_A2_Table_Table$address_A2_U256_U256$$($t61, $t63, $t64)
                    // $t65 := borrow_local($t45)
                    $t65 := $MakePtr(false, add($locals, 128))
                    // $t66 := 0x34
                    $t66 := 0x34
                    // $t42 := $t66
                    mstore(add($locals, 192), $t66)
                    // $t67 := borrow_local($t42)
                    $t67 := $MakePtr(false, add($locals, 192))
                    // $t68 := move($t47)
                    $t68 := mload(add($locals, 64))
                    // Table::insert<address, Table::Table<address, U256::U256>>($t65, $t67, $t68)
                    A2_Table_insert$address_A2_Table_Table$address_A2_U256_U256$$($t65, $t67, $t68)
                    // $t69 := borrow_local($t45)
                    $t69 := $MakePtr(false, add($locals, 128))
                    // $t70 := 0x12
                    $t70 := 0x12
                    // $t1 := $t70
                    mstore(add($locals, 224), $t70)
                    // $t71 := borrow_local($t1)
                    $t71 := $MakePtr(false, add($locals, 224))
                    // $t72 := Table::borrow<address, Table::Table<address, U256::U256>>($t69, $t71)
                    $t72 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t69, $t71)
                    // $t73 := 0xab
                    $t73 := 0xab
                    // $t44 := $t73
                    mstore(add($locals, 256), $t73)
                    // $t74 := borrow_local($t44)
                    $t74 := $MakePtr(false, add($locals, 256))
                    // $t75 := Table::contains<address, U256::U256>($t72, $t74)
                    $t75 := A2_Table_contains$address_A2_U256_U256$($t72, $t74)
                    // if ($t75) goto L0 else goto L1
                    switch $t75
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t84 := 102
                    $t84 := 102
                    // abort($t84)
                    $Abort($t84)
                }
                case 6 {
                    // label L2
                    // $t85 := borrow_local($t45)
                    $t85 := $MakePtr(false, add($locals, 128))
                    // $t86 := 0x12
                    $t86 := 0x12
                    // $t9 := $t86
                    mstore(add($locals, 352), $t86)
                    // $t87 := borrow_local($t9)
                    $t87 := $MakePtr(false, add($locals, 352))
                    // $t88 := Table::borrow<address, Table::Table<address, U256::U256>>($t85, $t87)
                    $t88 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t85, $t87)
                    // $t89 := 0xab
                    $t89 := 0xab
                    // $t8 := $t89
                    mstore(add($locals, 384), $t89)
                    // $t90 := borrow_local($t8)
                    $t90 := $MakePtr(false, add($locals, 384))
                    // $t91 := Table::borrow<address, U256::U256>($t88, $t90)
                    $t91 := A2_Table_borrow$address_A2_U256_U256$($t88, $t90)
                    // $t92 := read_ref($t91)
                    $t92 := $LoadU256($t91)
                    // $t93 := ==($t92, $t52)
                    $t93 := $Eq($t92, $t52)
                    // if ($t93) goto L4 else goto L5
                    switch $t93
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t94 := 103
                    $t94 := 103
                    // abort($t94)
                    $Abort($t94)
                }
                case 8 {
                    // label L4
                    // $t95 := borrow_local($t45)
                    $t95 := $MakePtr(false, add($locals, 128))
                    // $t96 := 0x34
                    $t96 := 0x34
                    // $t14 := $t96
                    mstore(add($locals, 416), $t96)
                    // $t97 := borrow_local($t14)
                    $t97 := $MakePtr(false, add($locals, 416))
                    // $t98 := Table::borrow<address, Table::Table<address, U256::U256>>($t95, $t97)
                    $t98 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t95, $t97)
                    // $t99 := 0xcd
                    $t99 := 0xcd
                    // $t13 := $t99
                    mstore(add($locals, 448), $t99)
                    // $t100 := borrow_local($t13)
                    $t100 := $MakePtr(false, add($locals, 448))
                    // $t101 := Table::borrow<address, U256::U256>($t98, $t100)
                    $t101 := A2_Table_borrow$address_A2_U256_U256$($t98, $t100)
                    // $t102 := read_ref($t101)
                    $t102 := $LoadU256($t101)
                    // $t103 := ==($t102, $t53)
                    $t103 := $Eq($t102, $t53)
                    // if ($t103) goto L6 else goto L7
                    switch $t103
                    case 0  { $block := 9 }
                    default { $block := 10 }
                }
                case 9 {
                    // label L7
                    // $t104 := 104
                    $t104 := 104
                    // abort($t104)
                    $Abort($t104)
                }
                case 10 {
                    // label L6
                    // $t105 := borrow_local($t45)
                    $t105 := $MakePtr(false, add($locals, 128))
                    // $t106 := 0x12
                    $t106 := 0x12
                    // $t18 := $t106
                    mstore(add($locals, 480), $t106)
                    // $t107 := borrow_local($t18)
                    $t107 := $MakePtr(false, add($locals, 480))
                    // $t108 := Table::borrow_mut<address, Table::Table<address, U256::U256>>($t105, $t107)
                    $t108 := A2_Table_borrow_mut$address_A2_Table_Table$address_A2_U256_U256$$($t105, $t107)
                    // $t109 := 0xef
                    $t109 := 0xef
                    // $t17 := $t109
                    mstore(add($locals, 512), $t109)
                    // $t110 := borrow_local($t17)
                    $t110 := $MakePtr(false, add($locals, 512))
                    // Table::insert<address, U256::U256>($t108, $t110, $t54)
                    A2_Table_insert$address_A2_U256_U256$($t108, $t110, $t54)
                    // $t111 := borrow_local($t45)
                    $t111 := $MakePtr(false, add($locals, 128))
                    // $t112 := 0x12
                    $t112 := 0x12
                    // $t23 := $t112
                    mstore(add($locals, 544), $t112)
                    // $t113 := borrow_local($t23)
                    $t113 := $MakePtr(false, add($locals, 544))
                    // $t114 := Table::borrow<address, Table::Table<address, U256::U256>>($t111, $t113)
                    $t114 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t111, $t113)
                    // $t115 := 0xef
                    $t115 := 0xef
                    // $t21 := $t115
                    mstore(add($locals, 576), $t115)
                    // $t116 := borrow_local($t21)
                    $t116 := $MakePtr(false, add($locals, 576))
                    // $t117 := Table::borrow<address, U256::U256>($t114, $t116)
                    $t117 := A2_Table_borrow$address_A2_U256_U256$($t114, $t116)
                    // $t118 := read_ref($t117)
                    $t118 := $LoadU256($t117)
                    // $t119 := ==($t118, $t54)
                    $t119 := $Eq($t118, $t54)
                    // if ($t119) goto L8 else goto L9
                    switch $t119
                    case 0  { $block := 11 }
                    default { $block := 12 }
                }
                case 11 {
                    // label L9
                    // $t120 := 105
                    $t120 := 105
                    // abort($t120)
                    $Abort($t120)
                }
                case 12 {
                    // label L8
                    // $t121 := borrow_local($t45)
                    $t121 := $MakePtr(false, add($locals, 128))
                    // $t122 := 0x12
                    $t122 := 0x12
                    // $t27 := $t122
                    mstore(add($locals, 608), $t122)
                    // $t123 := borrow_local($t27)
                    $t123 := $MakePtr(false, add($locals, 608))
                    // $t124 := Table::borrow<address, Table::Table<address, U256::U256>>($t121, $t123)
                    $t124 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t121, $t123)
                    // $t125 := 0xab
                    $t125 := 0xab
                    // $t26 := $t125
                    mstore(add($locals, 640), $t125)
                    // $t126 := borrow_local($t26)
                    $t126 := $MakePtr(false, add($locals, 640))
                    // $t127 := Table::borrow<address, U256::U256>($t124, $t126)
                    $t127 := A2_Table_borrow$address_A2_U256_U256$($t124, $t126)
                    // $t128 := read_ref($t127)
                    $t128 := $LoadU256($t127)
                    // $t129 := ==($t128, $t52)
                    $t129 := $Eq($t128, $t52)
                    // if ($t129) goto L10 else goto L11
                    switch $t129
                    case 0  { $block := 13 }
                    default { $block := 14 }
                }
                case 13 {
                    // label L11
                    // $t130 := 106
                    $t130 := 106
                    // abort($t130)
                    $Abort($t130)
                }
                case 14 {
                    // label L10
                    // $t131 := borrow_local($t45)
                    $t131 := $MakePtr(false, add($locals, 128))
                    // $t132 := 0x34
                    $t132 := 0x34
                    // $t31 := $t132
                    mstore(add($locals, 672), $t132)
                    // $t133 := borrow_local($t31)
                    $t133 := $MakePtr(false, add($locals, 672))
                    // $t134 := Table::borrow_mut<address, Table::Table<address, U256::U256>>($t131, $t133)
                    $t134 := A2_Table_borrow_mut$address_A2_Table_Table$address_A2_U256_U256$$($t131, $t133)
                    // $t135 := 0xcd
                    $t135 := 0xcd
                    // $t30 := $t135
                    mstore(add($locals, 704), $t135)
                    // $t136 := borrow_local($t30)
                    $t136 := $MakePtr(false, add($locals, 704))
                    // $t137 := Table::remove<address, U256::U256>($t134, $t136)
                    $t137 := A2_Table_remove$address_A2_U256_U256$($t134, $t136)
                    // $t138 := ==($t137, $t53)
                    $t138 := $Eq($t137, $t53)
                    // if ($t138) goto L12 else goto L13
                    switch $t138
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 15 {
                    // label L13
                    // $t139 := 107
                    $t139 := 107
                    // abort($t139)
                    $Abort($t139)
                }
                case 16 {
                    // label L12
                    // $t140 := borrow_local($t45)
                    $t140 := $MakePtr(false, add($locals, 128))
                    // $t141 := 0x34
                    $t141 := 0x34
                    // $t36 := $t141
                    mstore(add($locals, 736), $t141)
                    // $t142 := borrow_local($t36)
                    $t142 := $MakePtr(false, add($locals, 736))
                    // $t143 := Table::borrow<address, Table::Table<address, U256::U256>>($t140, $t142)
                    $t143 := A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$($t140, $t142)
                    // $t144 := 0xcd
                    $t144 := 0xcd
                    // $t35 := $t144
                    mstore(add($locals, 768), $t144)
                    // $t145 := borrow_local($t35)
                    $t145 := $MakePtr(false, add($locals, 768))
                    // $t146 := Table::contains<address, U256::U256>($t143, $t145)
                    $t146 := A2_Table_contains$address_A2_U256_U256$($t143, $t145)
                    // $t147 := !($t146)
                    $t147 := $LogicalNot($t146)
                    // if ($t147) goto L14 else goto L15
                    switch $t147
                    case 0  { $block := 17 }
                    default { $block := 18 }
                }
                case 17 {
                    // label L15
                    // $t148 := 108
                    $t148 := 108
                    // abort($t148)
                    $Abort($t148)
                }
                case 18 {
                    // label L14
                    // $t149 := 0x42
                    $t149 := 0x42
                    // $t39 := Evm::sign($t149)
                    mstore(add($locals, 800), A2_Evm_sign($t149))
                    // $t150 := borrow_local($t39)
                    $t150 := $MakePtr(false, add($locals, 800))
                    // $t151 := move($t45)
                    $t151 := mload(add($locals, 128))
                    // $t152 := pack Tables::S<address, Table::Table<address, U256::U256>>($t151)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t151)
                        $t152 := $mem
                    }
                    // move_to<Tables::S<address, Table::Table<address, U256::U256>>>($t152, $t150)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0xc5110c9a, $LoadU256($t150))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t152
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 832)
                    leave
                }
            }
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_contains$address_A2_U256_U256$(table_ref, key_ref) -> res {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_borrow$address_A2_Table_Table$address_A2_U256_U256$$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_remove$address_A2_U256_U256$(table_ref, key_ref) -> value {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let linked_src := sload(storage_key)
            if iszero(linked_src) {
              $AbortBuiltin()
            }
            value := $StorageLoadU256(linked_src)
            $AlignedStorageStore(linked_src, 0)
            sstore(storage_key, 0)
        }
        function A2_Table_borrow_mut$address_A2_Table_Table$address_A2_U256_U256$$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_borrow$address_A2_U256_U256$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_insert$address_A2_U256_U256$(table_ref, key_ref, value) {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_2934085429 := $NewLinkedStorageBase(0xaee29735)
            $StorageStoreU256($linked_dst_2934085429, value)
            sstore(storage_key, $linked_dst_2934085429)
        }
        function A2_Table_insert$address_A2_Table_Table$address_A2_U256_U256$$(table_ref, key_ref, value) {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_3228464714 := $NewLinkedStorageBase(0xc06e764a)
            $StorageStoreU256($linked_dst_3228464714, value)
            sstore(storage_key, $linked_dst_3228464714)
        }
        function A2_Table_empty$address_A2_U256_U256$() -> table {
            table := $NewTableHandle()
        }
        function A2_Table_empty$address_A2_Table_Table$address_A2_U256_U256$$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_table_of_tables: Succeed(Stopped) (used_gas=289488): []

// test of Tables::test_u256
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_u256" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_u256()
        return (0, 0)
        function A2_Tables_test_u256() {
            let entry_mut_ref, val_1, val_2, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34
            let $locals := $Malloc(96)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t14 := 101
                    $t14 := 101
                    // abort($t14)
                    $Abort($t14)
                }
                case 3 {
                    // label L0
                    // $t15 := borrow_local($t3)
                    $t15 := $MakePtr(false, $locals)
                    // $t16 := borrow_local($t2)
                    $t16 := $MakePtr(false, add($locals, 32))
                    // $t17 := Table::borrow<U256::U256, U256::U256>($t15, $t16)
                    $t17 := A2_Table_borrow$A2_U256_U256_A2_U256_U256$($t15, $t16)
                    // $t18 := read_ref($t17)
                    $t18 := $LoadU256($t17)
                    // $t19 := 3743106036130323098097120681749450326028
                    $t19 := 3743106036130323098097120681749450326028
                    // $t20 := ==($t18, $t19)
                    $t20 := $Eq($t18, $t19)
                    // if ($t20) goto L2 else goto L3
                    switch $t20
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t3 := Table::empty<U256::U256, U256::U256>()
                    mstore($locals, A2_Table_empty$A2_U256_U256_A2_U256_U256$())
                    // $t6 := 26542024619833200150143219379677920493647
                    $t6 := 26542024619833200150143219379677920493647
                    // $t2 := $t6
                    mstore(add($locals, 32), $t6)
                    // $t7 := 3743106036130323098097120681749450326028
                    $t7 := 3743106036130323098097120681749450326028
                    // $t8 := 15312706511442230855851857334429569515566
                    $t8 := 15312706511442230855851857334429569515566
                    // $t9 := borrow_local($t3)
                    $t9 := $MakePtr(false, $locals)
                    // $t10 := borrow_local($t2)
                    $t10 := $MakePtr(false, add($locals, 32))
                    // Table::insert<U256::U256, U256::U256>($t9, $t10, $t7)
                    A2_Table_insert$A2_U256_U256_A2_U256_U256$($t9, $t10, $t7)
                    // $t11 := borrow_local($t3)
                    $t11 := $MakePtr(false, $locals)
                    // $t12 := borrow_local($t2)
                    $t12 := $MakePtr(false, add($locals, 32))
                    // $t13 := Table::contains<U256::U256, U256::U256>($t11, $t12)
                    $t13 := A2_Table_contains$A2_U256_U256_A2_U256_U256$($t11, $t12)
                    // if ($t13) goto L0 else goto L1
                    switch $t13
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t21 := 102
                    $t21 := 102
                    // abort($t21)
                    $Abort($t21)
                }
                case 6 {
                    // label L2
                    // $t22 := borrow_local($t3)
                    $t22 := $MakePtr(false, $locals)
                    // $t23 := borrow_local($t2)
                    $t23 := $MakePtr(false, add($locals, 32))
                    // $t24 := Table::borrow_mut<U256::U256, U256::U256>($t22, $t23)
                    $t24 := A2_Table_borrow_mut$A2_U256_U256_A2_U256_U256$($t22, $t23)
                    // write_ref($t24, $t8)
                    $StoreU256($t24, $t8)
                    // $t25 := borrow_local($t3)
                    $t25 := $MakePtr(false, $locals)
                    // $t26 := borrow_local($t2)
                    $t26 := $MakePtr(false, add($locals, 32))
                    // $t27 := Table::borrow<U256::U256, U256::U256>($t25, $t26)
                    $t27 := A2_Table_borrow$A2_U256_U256_A2_U256_U256$($t25, $t26)
                    // $t28 := read_ref($t27)
                    $t28 := $LoadU256($t27)
                    // $t29 := ==($t28, $t8)
                    $t29 := $Eq($t28, $t8)
                    // if ($t29) goto L4 else goto L5
                    switch $t29
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t30 := 103
                    $t30 := 103
                    // abort($t30)
                    $Abort($t30)
                }
                case 8 {
                    // label L4
                    // $t31 := 0x42
                    $t31 := 0x42
                    // $t0 := Evm::sign($t31)
                    mstore(add($locals, 64), A2_Evm_sign($t31))
                    // $t32 := borrow_local($t0)
                    $t32 := $MakePtr(false, add($locals, 64))
                    // $t33 := move($t3)
                    $t33 := mload($locals)
                    // $t34 := pack Tables::S<U256::U256, U256::U256>($t33)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t33)
                        $t34 := $mem
                    }
                    // move_to<Tables::S<U256::U256, U256::U256>>($t34, $t32)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0xa20c17a3, $LoadU256($t32))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t34
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // return ()
                    $Free($locals, 96)
                    leave
                }
            }
        }

        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_borrow$A2_U256_U256_A2_U256_U256$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_borrow_mut$A2_U256_U256_A2_U256_U256$(table_ref, key_ref) -> value_ref {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Table_contains$A2_U256_U256_A2_U256_U256$(table_ref, key_ref) -> res {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A2_Table_insert$A2_U256_U256_A2_U256_U256$(table_ref, key_ref, value) {
            let key := $LoadU256(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_2934085429 := $NewLinkedStorageBase(0xaee29735)
            $StorageStoreU256($linked_dst_2934085429, value)
            sstore(storage_key, $linked_dst_2934085429)
        }
        function A2_Table_empty$A2_U256_U256_A2_U256_U256$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
    }
}
===> Test result of Tables::test_u256: Succeed(Stopped) (used_gas=137324): []

// test of Tables::test_vector
/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "test_A2_Tables_test_vector" {
    code {
        mstore(0, memoryguard(160))
        A2_Tables_test_vector()
        return (0, 0)
        function A2_Tables_test_vector() {
            let tmp_$1, tmp_$4, tmp_$6, tmp_$8, tmp_$10, tmp_$11, tmp_$13, tmp_$15, tmp_$17, tmp_$19, s, v_mut_ref, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47, $t48, $t49, $t50, $t51, $t52, $t53, $t54, $t55, $t56, $t57, $t58, $t59, $t60, $t61, $t62, $t63, $t64, $t65, $t66, $t67, $t68, $t69, $t70, $t71, $t72, $t73, $t74, $t75, $t76, $t77, $t78, $t79, $t80, $t81, $t82, $t83, $t84, $t85, $t86, $t87, $t88, $t89, $t90, $t91, $t92, $t93, $t94, $t95, $t96, $t97, $t98, $t99, $t100, $t101, $t102, $t103, $t104, $t105, $t106, $t107, $t108, $t109, $t110, $t111, $t112, $t113, $t114, $t115
            let $locals := $Malloc(416)
            let $block := 4
            for {} true {} {
                switch $block
                case 2 {
                    // label L1
                    // $t34 := 101
                    $t34 := 101
                    // abort($t34)
                    $Abort($t34)
                }
                case 3 {
                    // label L0
                    // $t35 := borrow_local($t22)
                    $t35 := $MakePtr(false, $locals)
                    // $t36 := 0
                    $t36 := 0
                    // $t16 := $t36
                    mstore(add($locals, 96), $t36)
                    // $t37 := borrow_local($t16)
                    $t37 := $MakePtr(false, add($locals, 127))
                    // $t38 := Table::contains<u8, vector<address>>($t35, $t37)
                    $t38 := A2_Table_contains$u8_vec$address$$($t35, $t37)
                    // $t39 := !($t38)
                    $t39 := $LogicalNot($t38)
                    // if ($t39) goto L2 else goto L3
                    switch $t39
                    case 0  { $block := 5 }
                    default { $block := 6 }
                }
                case 4 {
                    // $t22 := Table::empty<u8, vector<address>>()
                    mstore($locals, A2_Table_empty$u8_vec$address$$())
                    // $t25 := borrow_local($t22)
                    $t25 := $MakePtr(false, $locals)
                    // $t26 := 42
                    $t26 := 42
                    // $t0 := $t26
                    mstore(add($locals, 32), $t26)
                    // $t27 := borrow_local($t0)
                    $t27 := $MakePtr(false, add($locals, 63))
                    // $t28 := 0x1012
                    $t28 := 0x1012
                    // $t29 := vector::singleton<address>($t28)
                    $t29 := A1_vector_singleton$address$($t28)
                    // Table::insert<u8, vector<address>>($t25, $t27, $t29)
                    A2_Table_insert$u8_vec$address$$($t25, $t27, $t29)
                    // $t30 := borrow_local($t22)
                    $t30 := $MakePtr(false, $locals)
                    // $t31 := 42
                    $t31 := 42
                    // $t14 := $t31
                    mstore(add($locals, 64), $t31)
                    // $t32 := borrow_local($t14)
                    $t32 := $MakePtr(false, add($locals, 95))
                    // $t33 := Table::contains<u8, vector<address>>($t30, $t32)
                    $t33 := A2_Table_contains$u8_vec$address$$($t30, $t32)
                    // if ($t33) goto L0 else goto L1
                    switch $t33
                    case 0  { $block := 2 }
                    default { $block := 3 }
                }
                case 5 {
                    // label L3
                    // $t40 := 102
                    $t40 := 102
                    // abort($t40)
                    $Abort($t40)
                }
                case 6 {
                    // label L2
                    // $t41 := borrow_local($t22)
                    $t41 := $MakePtr(false, $locals)
                    // $t42 := 42
                    $t42 := 42
                    // $t18 := $t42
                    mstore(add($locals, 128), $t42)
                    // $t43 := borrow_local($t18)
                    $t43 := $MakePtr(false, add($locals, 159))
                    // $t44 := Table::borrow<u8, vector<address>>($t41, $t43)
                    $t44 := A2_Table_borrow$u8_vec$address$$($t41, $t43)
                    // $t45 := vector::length<address>($t44)
                    $t45 := A1_vector_length$address$($t44)
                    // $t46 := 1
                    $t46 := 1
                    // $t47 := ==($t45, $t46)
                    $t47 := $Eq($t45, $t46)
                    // if ($t47) goto L4 else goto L5
                    switch $t47
                    case 0  { $block := 7 }
                    default { $block := 8 }
                }
                case 7 {
                    // label L5
                    // $t48 := 103
                    $t48 := 103
                    // abort($t48)
                    $Abort($t48)
                }
                case 8 {
                    // label L4
                    // $t49 := borrow_local($t22)
                    $t49 := $MakePtr(false, $locals)
                    // $t50 := 42
                    $t50 := 42
                    // $t20 := $t50
                    mstore(add($locals, 160), $t50)
                    // $t51 := borrow_local($t20)
                    $t51 := $MakePtr(false, add($locals, 191))
                    // $t52 := Table::borrow<u8, vector<address>>($t49, $t51)
                    $t52 := A2_Table_borrow$u8_vec$address$$($t49, $t51)
                    // $t53 := 0
                    $t53 := 0
                    // $t54 := vector::borrow<address>($t52, $t53)
                    $t54 := A1_vector_borrow$address$($t52, $t53)
                    // $t55 := read_ref($t54)
                    $t55 := $LoadU256($t54)
                    // $t56 := 0x1012
                    $t56 := 0x1012
                    // $t57 := ==($t55, $t56)
                    $t57 := $Eq($t55, $t56)
                    // if ($t57) goto L6 else goto L7
                    switch $t57
                    case 0  { $block := 9 }
                    default { $block := 10 }
                }
                case 9 {
                    // label L7
                    // $t58 := 104
                    $t58 := 104
                    // abort($t58)
                    $Abort($t58)
                }
                case 10 {
                    // label L6
                    // $t59 := 0x42
                    $t59 := 0x42
                    // $t2 := Evm::sign($t59)
                    mstore(add($locals, 192), A2_Evm_sign($t59))
                    // $t60 := borrow_local($t2)
                    $t60 := $MakePtr(false, add($locals, 192))
                    // $t61 := move($t22)
                    $t61 := mload($locals)
                    // $t62 := pack Tables::S<u8, vector<address>>($t61)
                    {
                        let $mem := $Malloc(32)
                        $MemoryStoreU256(add($mem, 0), $t61)
                        $t62 := $mem
                    }
                    // move_to<Tables::S<u8, vector<address>>>($t62, $t60)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0xa0362133, $LoadU256($t60))
                        if $AlignedStorageLoad($base_offset) {
                          $AbortBuiltin()
                        }
                        $AlignedStorageStore($base_offset, true)
                        {
                            let $dst := add($base_offset, 32)
                            let $src := $t62
                            $AlignedStorageStore(add($dst, 0), mload(add($src, 0)))
                            $Free($src, 32)
                        }
                    }
                    // $t63 := 0x42
                    $t63 := 0x42
                    // $t64 := borrow_global<Tables::S<u8, vector<address>>>($t63)
                    {
                        let $base_offset := $MakeTypeStorageBase(0, 0xa0362133, $t63)
                        if iszero($AlignedStorageLoad($base_offset)) {
                          $AbortBuiltin()
                        }
                        $t64 := $MakePtr(true, add($base_offset, 32))
                    }
                    // $t65 := borrow_field<Tables::S<u8, vector<address>>>.t($t64)
                    $t65 := $t64
                    // $t66 := 42
                    $t66 := 42
                    // $t3 := $t66
                    mstore(add($locals, 224), $t66)
                    // $t67 := borrow_local($t3)
                    $t67 := $MakePtr(false, add($locals, 255))
                    // $t68 := Table::borrow_mut<u8, vector<address>>($t65, $t67)
                    $t68 := A2_Table_borrow_mut$u8_vec$address$$($t65, $t67)
                    // $t69 := 0x1013
                    $t69 := 0x1013
                    // vector::push_back<address>($t68, $t69)
                    A1_vector_push_back$address$($t68, $t69)
                    // $t70 := borrow_field<Tables::S<u8, vector<address>>>.t($t64)
                    $t70 := $t64
                    // $t71 := 42
                    $t71 := 42
                    // $t5 := $t71
                    mstore(add($locals, 256), $t71)
                    // $t72 := borrow_local($t5)
                    $t72 := $MakePtr(false, add($locals, 287))
                    // $t73 := Table::borrow<u8, vector<address>>($t70, $t72)
                    $t73 := A2_Table_borrow$u8_vec$address$$($t70, $t72)
                    // $t74 := vector::length<address>($t73)
                    $t74 := A1_vector_length$address$($t73)
                    // $t75 := 2
                    $t75 := 2
                    // $t76 := ==($t74, $t75)
                    $t76 := $Eq($t74, $t75)
                    // if ($t76) goto L8 else goto L9
                    switch $t76
                    case 0  { $block := 11 }
                    default { $block := 12 }
                }
                case 11 {
                    // label L9
                    // destroy($t64)
                    // $t77 := 105
                    $t77 := 105
                    // abort($t77)
                    $Abort($t77)
                }
                case 12 {
                    // label L8
                    // $t78 := borrow_field<Tables::S<u8, vector<address>>>.t($t64)
                    $t78 := $t64
                    // $t79 := 42
                    $t79 := 42
                    // $t7 := $t79
                    mstore(add($locals, 288), $t79)
                    // $t80 := borrow_local($t7)
                    $t80 := $MakePtr(false, add($locals, 319))
                    // $t81 := Table::borrow<u8, vector<address>>($t78, $t80)
                    $t81 := A2_Table_borrow$u8_vec$address$$($t78, $t80)
                    // $t82 := 1
                    $t82 := 1
                    // $t83 := vector::borrow<address>($t81, $t82)
                    $t83 := A1_vector_borrow$address$($t81, $t82)
                    // $t84 := read_ref($t83)
                    $t84 := $LoadU256($t83)
                    // $t85 := 0x1013
                    $t85 := 0x1013
                    // $t86 := ==($t84, $t85)
                    $t86 := $Eq($t84, $t85)
                    // if ($t86) goto L10 else goto L11
                    switch $t86
                    case 0  { $block := 13 }
                    default { $block := 14 }
                }
                case 13 {
                    // label L11
                    // destroy($t64)
                    // $t87 := 106
                    $t87 := 106
                    // abort($t87)
                    $Abort($t87)
                }
                case 14 {
                    // label L10
                    // $t88 := borrow_field<Tables::S<u8, vector<address>>>.t($t64)
                    $t88 := $t64
                    // $t89 := 42
                    $t89 := 42
                    // $t9 := $t89
                    mstore(add($locals, 320), $t89)
                    // $t90 := borrow_local($t9)
                    $t90 := $MakePtr(false, add($locals, 351))
                    // $t23 := Table::remove<u8, vector<address>>($t88, $t90)
                    mstore(add($locals, 352), A2_Table_remove$u8_vec$address$$($t88, $t90))
                    // $t91 := borrow_local($t23)
                    $t91 := $MakePtr(false, add($locals, 352))
                    // $t92 := vector::length<address>($t91)
                    $t92 := A1_vector_length$address$($t91)
                    // $t93 := 2
                    $t93 := 2
                    // $t94 := ==($t92, $t93)
                    $t94 := $Eq($t92, $t93)
                    // if ($t94) goto L12 else goto L13
                    switch $t94
                    case 0  { $block := 15 }
                    default { $block := 16 }
                }
                case 15 {
                    // label L13
                    // destroy($t64)
                    // $t95 := 107
                    $t95 := 107
                    // abort($t95)
                    $Abort($t95)
                }
                case 16 {
                    // label L12
                    // $t96 := borrow_local($t23)
                    $t96 := $MakePtr(false, add($locals, 352))
                    // $t97 := 0
                    $t97 := 0
                    // $t98 := vector::borrow<address>($t96, $t97)
                    $t98 := A1_vector_borrow$address$($t96, $t97)
                    // $t99 := read_ref($t98)
                    $t99 := $LoadU256($t98)
                    // $t100 := 0x1012
                    $t100 := 0x1012
                    // $t101 := ==($t99, $t100)
                    $t101 := $Eq($t99, $t100)
                    // if ($t101) goto L14 else goto L15
                    switch $t101
                    case 0  { $block := 17 }
                    default { $block := 18 }
                }
                case 17 {
                    // label L15
                    // destroy($t64)
                    // $t102 := 108
                    $t102 := 108
                    // abort($t102)
                    $Abort($t102)
                }
                case 18 {
                    // label L14
                    // $t103 := borrow_local($t23)
                    $t103 := $MakePtr(false, add($locals, 352))
                    // $t104 := 1
                    $t104 := 1
                    // $t105 := vector::borrow<address>($t103, $t104)
                    $t105 := A1_vector_borrow$address$($t103, $t104)
                    // $t106 := read_ref($t105)
                    $t106 := $LoadU256($t105)
                    // $t107 := 0x1013
                    $t107 := 0x1013
                    // $t108 := ==($t106, $t107)
                    $t108 := $Eq($t106, $t107)
                    // if ($t108) goto L16 else goto L17
                    switch $t108
                    case 0  { $block := 19 }
                    default { $block := 20 }
                }
                case 19 {
                    // label L17
                    // destroy($t64)
                    // $t109 := 109
                    $t109 := 109
                    // abort($t109)
                    $Abort($t109)
                }
                case 20 {
                    // label L16
                    // $t110 := borrow_field<Tables::S<u8, vector<address>>>.t($t64)
                    $t110 := $t64
                    // $t111 := 42
                    $t111 := 42
                    // $t12 := $t111
                    mstore(add($locals, 384), $t111)
                    // $t112 := borrow_local($t12)
                    $t112 := $MakePtr(false, add($locals, 415))
                    // $t113 := Table::contains<u8, vector<address>>($t110, $t112)
                    $t113 := A2_Table_contains$u8_vec$address$$($t110, $t112)
                    // $t114 := !($t113)
                    $t114 := $LogicalNot($t113)
                    // if ($t114) goto L18 else goto L19
                    switch $t114
                    case 0  { $block := 21 }
                    default { $block := 22 }
                }
                case 21 {
                    // label L19
                    // $t115 := 110
                    $t115 := 110
                    // abort($t115)
                    $Abort($t115)
                }
                case 22 {
                    // label L18
                    // return ()
                    $Free($locals, 416)
                    leave
                }
            }
        }

        function A2_Table_contains$u8_vec$address$$(table_ref, key_ref) -> res {
            let key := $LoadU8(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            res := $LogicalNot(iszero(word))
        }
        function A1_vector_borrow$address$(v_ref, i) -> e_ptr {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            if $GtEq(i, size) { $AbortBuiltin() }
            e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
        }
        function A1_vector_length$address$(v_ref) -> len {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            len := $LoadU64(v_ptr)
        }
        function A2_Table_remove$u8_vec$address$$(table_ref, key_ref) -> value {
            let key := $LoadU8(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let linked_src := sload(storage_key)
            if iszero(linked_src) {
              $AbortBuiltin()
            }
            let vector_linked_src := $StorageLoadU256(linked_src)
            $AlignedStorageStore(linked_src, 0)
            linked_src := vector_linked_src
            let $size_1833323706 := $StorageLoadU64(linked_src)
            let $capacity_1833323706 := $ClosestGreaterPowerOfTwo($size_1833323706)
            value := $Malloc(add(32, mul($capacity_1833323706, 32)))
            let $data_size_1833323706 := mul($size_1833323706, 32)
            mstore(value, $AlignedStorageLoad(linked_src))
            $MemoryStoreU64(add(value, 8), $capacity_1833323706)
            let $data_src_1833323706 := add(linked_src, 32)
            let $data_dst_1833323706 := add(value, 32)
            for { let $offs_1833323706 := 0 } lt($offs_1833323706, $data_size_1833323706) { $offs_1833323706 := add($offs_1833323706, 32)} {
                mstore(add($data_dst_1833323706, $offs_1833323706), $AlignedStorageLoad(add($data_src_1833323706, $offs_1833323706)))
                $AlignedStorageStore(add($data_src_1833323706, $offs_1833323706), 0)
            }
            $AlignedStorageStore(linked_src, 0)
            sstore(storage_key, 0)
        }
        function A2_Table_borrow$u8_vec$address$$(table_ref, key_ref) -> value_ref {
            let key := $LoadU8(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A1_vector_push_back$address$(v_ref, e) {
            let v_offs := $LoadU256(v_ref)
            let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
            let size := $LoadU64(v_ptr)
            let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
            $StoreU256(e_ptr, e)
            size := add(size, 1)
            $StoreU64(v_ptr, size)
            let capacity := $LoadU64($IndexPtr(v_ptr, 8))
            if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                $StoreU256(v_ref, new_v_offs)
            }
        }
        function A2_Table_borrow_mut$u8_vec$address$$(table_ref, key_ref) -> value_ref {
            let key := $LoadU8(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let value_offs := sload(storage_key)
            if iszero(value_offs) {
              $AbortBuiltin()
            }
            value_ref := $MakePtr(true, value_offs)
        }
        function A2_Evm_sign(addr) -> signer {
          signer := addr
        }
        function A2_Table_insert$u8_vec$address$$(table_ref, key_ref, value) {
            let key := $LoadU8(key_ref)
            let table_handle := $LoadU256(table_ref)
            let storage_key := $StorageKey(table_handle, key)
            let word := sload(storage_key)
            if $LogicalNot(iszero(word)) {
              $AbortBuiltin()
            }
            let $linked_dst_1833323706 := $NewLinkedStorageBase(0x6d464cba)
            let $size_1833323706 := $MemoryLoadU64(value)
            let $data_size_1833323706 := mul($size_1833323706, 32)
            $AlignedStorageStore($linked_dst_1833323706, mload(value))
            let $data_src_1833323706 := add(value, 32)
            let $data_dst_1833323706 := add($linked_dst_1833323706, 32)
            for { let $offs_1833323706 := 0 } lt($offs_1833323706, $data_size_1833323706) { $offs_1833323706 := add($offs_1833323706, 32)} {
                $AlignedStorageStore(add($data_dst_1833323706, $offs_1833323706), mload(add($data_src_1833323706, $offs_1833323706)))
                $Free(value, add($data_size_1833323706, 32))
            }
            let vector_ref_dst := $NewLinkedStorageBase(0x6d464cba)
            $AlignedStorageStore(vector_ref_dst, $linked_dst_1833323706)
            sstore(storage_key, vector_ref_dst)
        }
        function A1_vector_singleton$address$(e) -> $result {
            let $t2, $t3
            let $locals := $Malloc(32)
            // $t1 := vector::empty<#0>()
            mstore($locals, A1_vector_empty$address$())
            // $t2 := borrow_local($t1)
            $t2 := $MakePtr(false, $locals)
            // vector::push_back<#0>($t2, $t0)
            A1_vector_push_back$address$($t2, e)
            // $t3 := move($t1)
            $t3 := mload($locals)
            // return $t3
            $result := $t3
            $Free($locals, 32)
        }

        function A1_vector_empty$address$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function A2_Table_empty$u8_vec$address$$() -> table {
            table := $NewTableHandle()
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MakePtr(is_storage, offs) -> ptr {
          ptr := or(is_storage, shl(1, offs))
        }
        function $IsStoragePtr(ptr) -> b {
          b := and(ptr, 0x1)
        }
        function $OffsetPtr(ptr) -> offs {
          offs := shr(1, ptr)
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $ExtractBytes(word, start, size) -> bytes {
           switch size
           case 1 {
              // use the faster byte primitive
              bytes := byte(start, word)
           }
           default {
              // As we have big endian, we need to right shift the value from
              // where the highest byte starts in the word (32 - start), minus
              // the size.
              let shift_bits := shl(3, sub(sub(32, start), size))
              bytes := and(shr(shift_bits, word), $MaskForSize(size))
           }
        }
        function $InjectBytes(word, start, size, bytes) -> new_word {
           let shift_bits := shl(3, sub(sub(32, start), size))
           // Blend out the bits which we inject
           let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
           word := and(word, neg_mask)
           // Overlay the bits we inject
           new_word := or(word, shl(shift_bits, bytes))
        }
        function $ToWordOffs(offs) -> word_offs, byte_offset {
          word_offs := shr(5, offs)
          byte_offset := and(offs, 0x1F)
        }
        function $OverflowBytes(byte_offset, size) -> overflow_bytes {
          let available_bytes := sub(32, byte_offset)
          switch gt(size, available_bytes)
          case 0 {
            overflow_bytes := 0
          }
          default {
            overflow_bytes := sub(size, available_bytes)
          }
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageLoadBytes(offs, size) -> val {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          val := $ExtractBytes(sload(key), byte_offs, size)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          if $LogicalNot(iszero(overflow_bytes)) {
            key := $StorageKey(0, add(word_offs, 1))
            let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
            val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
          }
        }
        function $StorageStoreBytes(offs, size, bytes) {
          let word_offs, byte_offs := $ToWordOffs(offs)
          let key := $StorageKey(0, word_offs)
          let overflow_bytes := $OverflowBytes(byte_offs, size)
          switch overflow_bytes
          case 0 {
            sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
          }
          default {
            // Shift the higher bytes to the right
            let used_bytes := sub(size, overflow_bytes)
            let higher_bytes := shr(used_bytes, bytes)
            let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
            sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
            key := $StorageKey(0, add(word_offs, 1))
            sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
          }
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $IndexPtr(ptr, offs) -> new_ptr {
          new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
        }
        function $NewTableHandle() -> handle {
          let key := $StorageKey(1, 0)
          handle := sload(key)
          if iszero(handle) {
             // no tables have been allocated in this contract, need to initialize the counter
             // to the number of storage groups already statically allocated
             handle := 2
          }
          sstore(key, add(handle, 1))
        }

        function $LoadU8(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU8(offs)
          }
          default {
            val := $StorageLoadU8(offs)
          }
        }
        function $MemoryLoadU8(offs) -> val {
          val := $MemoryLoadBytes(offs, 1)
        }
        function $StorageLoadU8(offs) -> val {
          val := $StorageLoadBytes(offs, 1)
        }
        function $LoadU64(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU64(offs)
          }
          default {
            val := $StorageLoadU64(offs)
          }
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $StorageLoadU64(offs) -> val {
          val := $StorageLoadBytes(offs, 8)
        }
        function $StoreU64(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU64(offs, val)
          }
          default {
            $StorageStoreU64(offs, val)
          }
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $StorageStoreU64(offs, val) {
          $StorageStoreBytes(offs, 8, val)
        }
        function $LoadU256(ptr) -> val {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            val := $MemoryLoadU256(offs)
          }
          default {
            val := $StorageLoadU256(offs)
          }
        }
        function $MemoryLoadU256(offs) -> val {
          val := $MemoryLoadBytes(offs, 32)
        }
        function $StorageLoadU256(offs) -> val {
          val := $StorageLoadBytes(offs, 32)
        }
        function $StoreU256(ptr, val) {
          let offs := $OffsetPtr(ptr)
          switch $IsStoragePtr(ptr)
          case 0 {
            $MemoryStoreU256(offs, val)
          }
          default {
            $StorageStoreU256(offs, val)
          }
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $StorageStoreU256(offs, val) {
          $StorageStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
        function $CopyMemory(src, dst, size) {
          let num_words, overflow_bytes := $ToWordOffs(size)
          let i := 0
          for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
            mstore(add(dst, i), mload(add(src, i)))
          }
          if overflow_bytes {
            let mask := $MaskForSize(sub(32, overflow_bytes))
            let overflow_offs := mul(num_words, 32)
            let dst_word := and(mload(add(dst, overflow_offs)), mask)
            let src_word := and(mload(add(src, overflow_offs)), not(mask))
            mstore(add(dst, overflow_offs), or(dst_word, src_word))
          }
        }
        function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
            let new_capacity := mul(capacity, 2)
            let data_size := add(32, mul(capacity, type_size))
            let new_data_size := add(32, mul(new_capacity, type_size))
            new_v_offs := $Malloc(new_data_size)
            $CopyMemory(v_offs, new_v_offs, data_size)
            // update capacity at new location
            $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
            $Free(v_offs, data_size)
        }
        function $GtEq(x, y) -> r {
            r := or(gt(x, y), eq(x, y))
        }
        function $Eq(x, y) -> r {
            r := eq(x, y)
        }
        function $LogicalNot(x) -> r {
            r := iszero(x)
        }
        function $ClosestGreaterPowerOfTwo(x) -> r {
            r := or(r, shr(1, x))
            r := or(r, shr(2, r))
            r := or(r, shr(4, r))
            r := or(r, shr(8, r))
            r := or(r, shr(16, r))
            r := or(r, shr(32, r))
            r := add(x, 1)
        }
    }
}
===> Test result of Tables::test_vector: Succeed(Stopped) (used_gas=177564): []
