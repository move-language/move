//# publish
module 0x1.Token {
    import 0x1.signer;

    struct T has key {v: u64}

    public new(v: u64): Self.T {
    label b0:
        return T{v: move(v)};
    }

    public value(this: &Self.T): u64 {
        let vref: &u64;
    label b0:
        vref = &copy(this).T::v;
        _ = move(this);
        return *move(vref);
    }

    public has(addr: address): bool {
        let yes: bool;
    label b0:
        yes = exists<T>(move(addr));
        return move(yes);
    }

    public publish(account: &signer, t: Self.T) {
    label b0:
        move_to<T>(move(account), move(t));
        return;
    }

    public test(account: &signer) acquires T {
        let z: Self.T;
        let addr1: address;
        let struct1: &mut Self.T;
        let imms1: &Self.T;
        let struct1_original_balance: u64;
    label b0:
        z = Self.new(0);
        Self.publish(copy(account), move(z));

        addr1 = signer.address_of(copy(account));
        struct1 = borrow_global_mut<T>(move(addr1));
        imms1 = freeze(move(struct1));

        struct1_original_balance = Self.value(move(imms1));
        assert(copy(struct1_original_balance) == 0, 42);

        return;
    }
}

//# run --signers 0x1
import 0x1.Token;
main(account: signer) {
label b0:
    Token.test(&account);
    return;
}
