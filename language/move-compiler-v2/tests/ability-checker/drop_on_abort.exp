============ initial bytecode ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
  0: $t4 := borrow_local($t0)
  1: $t3 := vector::length<#0>($t4)
  2: $t5 := 1
  3: $t2 := >($t3, $t5)
  4: if ($t2) goto 5 else goto 9
  5: label L0
  6: $t6 := 1
  7: abort($t6)
  8: goto 10
  9: label L1
 10: label L2
 11: $t1 := pack m::Option<#0>($t0)
 12: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
     # live vars: $t0
  0: $t4 := borrow_local($t0)
     # live vars: $t0, $t4
  1: $t3 := vector::length<#0>($t4)
     # live vars: $t0, $t3
  2: $t5 := 1
     # live vars: $t0, $t3, $t5
  3: $t2 := >($t3, $t5)
     # live vars: $t0, $t2
  4: if ($t2) goto 5 else goto 9
     # live vars: $t0
  5: label L0
     # live vars:
  6: $t6 := 1
     # live vars: $t6
  7: abort($t6)
     # live vars: $t0
  8: goto 10
     # live vars: $t0
  9: label L1
     # live vars: $t0
 10: label L2
     # live vars: $t0
 11: $t1 := pack m::Option<#0>($t0)
     # live vars: $t1
 12: return $t1
}

============ after MemorySafetyProcessor: ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  0: $t4 := borrow_local($t0)
     # live vars: $t0, $t4
     # graph: {L0=local($t0)[borrow(false) -> L1],L1=local($t4)[]}
     # local_to_label: {$t0=L0,$t4=L1}
     # global_to_label: {}
     # moved: {}
     #
  1: $t3 := vector::length<#0>($t4)
     # live vars: $t0, $t3
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t4}
     #
  2: $t5 := 1
     # live vars: $t0, $t3, $t5
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t4}
     #
  3: $t2 := >($t3, $t5)
     # live vars: $t0, $t2
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
  4: if ($t2) goto 5 else goto 9
     # live vars: $t0
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
  5: label L0
     # live vars:
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
  6: $t6 := 1
     # live vars: $t6
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
  7: abort($t6)
     # live vars: $t0
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {}
     #
  8: goto 10
     # live vars: $t0
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
  9: label L1
     # live vars: $t0
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
 10: label L2
     # live vars: $t0
     # graph: {L0=local($t0)[]}
     # local_to_label: {$t0=L0}
     # global_to_label: {}
     # moved: {$t3,$t4,$t5}
     #
 11: $t1 := pack m::Option<#0>($t0)
     # live vars: $t1
     # graph: {}
     # local_to_label: {}
     # global_to_label: {}
     # moved: {$t0,$t3,$t4,$t5}
     #
 12: return $t1
}

============ after ExplicitDrop: ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
  0: $t4 := borrow_local($t0)
  1: $t3 := vector::length<#0>($t4)
  2: $t5 := 1
  3: $t2 := >($t3, $t5)
  4: if ($t2) goto 5 else goto 10
  5: label L0
  6: drop($t0)
  7: $t6 := 1
  8: abort($t6)
  9: goto 11
 10: label L1
 11: label L2
 12: $t1 := pack m::Option<#0>($t0)
 13: return $t1
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: $t4 := borrow_local($t0)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t3 := vector::length<#0>($t4)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  2: $t5 := 1
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  3: $t2 := >($t3, $t5)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  4: if ($t2) goto 5 else goto 10
     # abort state before: {aborts}
     # abort state after : {aborts}
  5: label L0
     # abort state before: {aborts}
     # abort state after : {aborts}
  6: drop($t0)
     # abort state before: {aborts}
     # abort state after : {aborts}
  7: $t6 := 1
     # abort state before: {aborts}
     # abort state after : {}
  8: abort($t6)
     # abort state before: {returns}
     # abort state after : {returns}
  9: goto 11
     # abort state before: {returns}
     # abort state after : {returns}
 10: label L1
     # abort state before: {returns}
     # abort state after : {returns}
 11: label L2
     # abort state before: {returns}
     # abort state after : {returns}
 12: $t1 := pack m::Option<#0>($t0)
     # abort state before: {returns}
     # abort state after : {}
 13: return $t1
}

============ after AbilityChecker: ================

[variant baseline]
public fun m::from_vec<#0>($t0: vector<#0>): m::Option<#0> {
     var $t1: m::Option<#0>
     var $t2: bool
     var $t3: u64
     var $t4: &vector<#0>
     var $t5: u64
     var $t6: u64
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  0: $t4 := borrow_local($t0)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  1: $t3 := vector::length<#0>($t4)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  2: $t5 := 1
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  3: $t2 := >($t3, $t5)
     # abort state before: {returns,aborts}
     # abort state after : {returns,aborts}
  4: if ($t2) goto 5 else goto 10
     # abort state before: {aborts}
     # abort state after : {aborts}
  5: label L0
     # abort state before: {aborts}
     # abort state after : {aborts}
  6: drop($t0)
     # abort state before: {aborts}
     # abort state after : {aborts}
  7: $t6 := 1
     # abort state before: {aborts}
     # abort state after : {}
  8: abort($t6)
     # abort state before: {returns}
     # abort state after : {returns}
  9: goto 11
     # abort state before: {returns}
     # abort state after : {returns}
 10: label L1
     # abort state before: {returns}
     # abort state after : {returns}
 11: label L2
     # abort state before: {returns}
     # abort state after : {returns}
 12: $t1 := pack m::Option<#0>($t0)
     # abort state before: {returns}
     # abort state after : {}
 13: return $t1
}
