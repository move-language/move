============ initial bytecode ================

[variant baseline]
fun m::cyclic($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t2)
  2: $t0 := infer($t3)
  3: $t1 := infer($t0)
  4: return $t1
}

============ after VariableCoalescingAnnotator: ================

[variant baseline]
fun m::cyclic($t0: u64): u64 {
     var $t1: u64
     var $t2: u64
     var $t3: u64
     # live vars: $t0
     # events: b:$t0, b:$t2
  0: $t2 := move($t0)
     # live vars: $t2
     # events: e:$t2, b:$t3
  1: $t3 := move($t2)
     # live vars: $t3
     # events: e:$t3
  2: $t0 := move($t3)
     # live vars: $t0
     # events: e:$t0, b:$t1
  3: $t1 := move($t0)
     # live vars: $t1
     # events: e:$t1
  4: return $t1
}

============ after VariableCoalescingTransformer: ================

[variant baseline]
fun m::cyclic($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: u64
     var $t3: u64 [unused]
  0: $t2 := move($t0)
  1: $t2 := move($t2)
  2: $t0 := move($t2)
  3: $t0 := move($t0)
  4: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module c0ffee.m {


cyclic(Arg0: u64): u64 /* def_idx: 0 */ {
L1:	loc0: u64
B0:
	0: MoveLoc[0](Arg0: u64)
	1: StLoc[1](loc0: u64)
	2: MoveLoc[1](loc0: u64)
	3: StLoc[0](Arg0: u64)
	4: MoveLoc[0](Arg0: u64)
	5: Ret
}
}
============ bytecode verification succeeded ========
