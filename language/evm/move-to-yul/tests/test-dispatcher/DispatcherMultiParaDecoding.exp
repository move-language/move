/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x1132a93c
                {
                    // test_static_array_string_static_array_string(string,uint8[2],string,uint8[2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2, param_3 := abi_decode_tuple_$string_uint8_2__string_uint8_2_$_$vec$u8$_vec$u8$_vec$u8$_vec$u8$$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_static_array_string_static_array_string(param_0, param_1, param_2, param_3)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64_uint8$_$u64_u8$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1b27dd62
                {
                    // test_string_length_sum(string,string)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_string_length_sum(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xfd03176e
                {
                    // test_u8_array_2_uint64(uint8[2],uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint8_2__uint64$_$vec$u8$_u64$(4, calldatasize())
                    let ret_0 := A2_M_test_u8_array_2_uint_64(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u8$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa1e082ab
                {
                    // test_u8_array_uint64_u8_array_uint64(uint8[2],uint64,uint8[2],uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2, param_3 := abi_decode_tuple_$uint8_2__uint64_uint8_2__uint64$_$vec$u8$_u64_vec$u8$_u64$(4, calldatasize())
                    let ret_0 := A2_M_test_u8_array_uint64_u8_array_uint64(param_0, param_1, param_2, param_3)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8$_$u8$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x1483ff3b
                {
                    // test_uint64_u8_array_3_uint64(uint64,uint8[3],uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$uint64_uint8_3__uint64$_$u64_vec$u8$_u64$(4, calldatasize())
                    let ret_0, ret_1 := A2_M_test_u8_uint_64_array_2(param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_uint8$_$u8_u8$(memPos, ret_0, ret_1)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_static_array_string_static_array_string(str_1, array_1, str_2, array_2) -> $result0, $result1 {
                let len_array_1, len_array_2, len_str_1, len_str_2, len_sum, val_1, val_2, val_3, val_4, val_sum, $t14, $t15, $t16, $t17, $t18, $t19, $t20, $t21, $t22, $t23, $t24, $t25, $t26, $t27, $t28, $t29, $t30, $t31, $t32, $t33, $t34, $t35, $t36, $t37, $t38, $t39, $t40, $t41, $t42, $t43, $t44, $t45, $t46, $t47
                let $locals := $Malloc(128)
                mstore($locals, str_1)
                mstore(add($locals, 64), array_1)
                mstore(add($locals, 32), str_2)
                mstore(add($locals, 96), array_2)
                // $t14 := borrow_local($t0)
                $t14 := $MakePtr(false, $locals)
                // $t15 := vector::length<u8>($t14)
                $t15 := A1_vector_length$u8$($t14)
                // $t16 := borrow_local($t2)
                $t16 := $MakePtr(false, add($locals, 32))
                // $t17 := vector::length<u8>($t16)
                $t17 := A1_vector_length$u8$($t16)
                // $t18 := borrow_local($t1)
                $t18 := $MakePtr(false, add($locals, 64))
                // $t19 := vector::length<u8>($t18)
                $t19 := A1_vector_length$u8$($t18)
                // $t20 := borrow_local($t3)
                $t20 := $MakePtr(false, add($locals, 96))
                // $t21 := vector::length<u8>($t20)
                $t21 := A1_vector_length$u8$($t20)
                // $t22 := +($t15, $t17)
                $t22 := $AddU64($t15, $t17)
                // $t23 := +($t22, $t19)
                $t23 := $AddU64($t22, $t19)
                // $t24 := +($t23, $t21)
                $t24 := $AddU64($t23, $t21)
                // $t25 := borrow_local($t0)
                $t25 := $MakePtr(false, $locals)
                // $t26 := 1
                $t26 := 1
                // $t27 := -($t15, $t26)
                $t27 := $Sub($t15, $t26)
                // $t28 := vector::borrow<u8>($t25, $t27)
                $t28 := A1_vector_borrow$u8$($t25, $t27)
                // $t29 := read_ref($t28)
                $t29 := $LoadU8($t28)
                // $t30 := borrow_local($t2)
                $t30 := $MakePtr(false, add($locals, 32))
                // $t31 := 1
                $t31 := 1
                // $t32 := -($t17, $t31)
                $t32 := $Sub($t17, $t31)
                // $t33 := vector::borrow<u8>($t30, $t32)
                $t33 := A1_vector_borrow$u8$($t30, $t32)
                // $t34 := read_ref($t33)
                $t34 := $LoadU8($t33)
                // $t35 := borrow_local($t1)
                $t35 := $MakePtr(false, add($locals, 64))
                // $t36 := 1
                $t36 := 1
                // $t37 := -($t19, $t36)
                $t37 := $Sub($t19, $t36)
                // $t38 := vector::borrow<u8>($t35, $t37)
                $t38 := A1_vector_borrow$u8$($t35, $t37)
                // $t39 := read_ref($t38)
                $t39 := $LoadU8($t38)
                // $t40 := borrow_local($t3)
                $t40 := $MakePtr(false, add($locals, 96))
                // $t41 := 1
                $t41 := 1
                // $t42 := -($t21, $t41)
                $t42 := $Sub($t21, $t41)
                // $t43 := vector::borrow<u8>($t40, $t42)
                $t43 := A1_vector_borrow$u8$($t40, $t42)
                // $t44 := read_ref($t43)
                $t44 := $LoadU8($t43)
                // $t45 := +($t29, $t34)
                $t45 := $AddU8($t29, $t34)
                // $t46 := +($t45, $t39)
                $t46 := $AddU8($t45, $t39)
                // $t47 := +($t46, $t44)
                $t47 := $AddU8($t46, $t44)
                // return ($t24, $t47)
                $result0 := $t24
                $result1 := $t47
                $Free($locals, 128)
            }

            function A2_M_test_string_length_sum(str_1, str_2) -> $result {
                let $t2, $t3, $t4, $t5, $t6
                let $locals := $Malloc(64)
                mstore($locals, str_1)
                mstore(add($locals, 32), str_2)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::length<u8>($t2)
                $t3 := A1_vector_length$u8$($t2)
                // $t4 := borrow_local($t1)
                $t4 := $MakePtr(false, add($locals, 32))
                // $t5 := vector::length<u8>($t4)
                $t5 := A1_vector_length$u8$($t4)
                // $t6 := +($t3, $t5)
                $t6 := $AddU64($t3, $t5)
                // return $t6
                $result := $t6
                $Free($locals, 64)
            }

            function A2_M_test_u8_array_2_uint_64(v, idx) -> $result {
                let $t2, $t3, $t4
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t2 := borrow_local($t0)
                $t2 := $MakePtr(false, $locals)
                // $t3 := vector::borrow<u8>($t2, $t1)
                $t3 := A1_vector_borrow$u8$($t2, idx)
                // $t4 := read_ref($t3)
                $t4 := $LoadU8($t3)
                // return $t4
                $result := $t4
                $Free($locals, 32)
            }

            function A2_M_test_u8_array_uint64_u8_array_uint64(v_1, idx_1, v_2, idx_2) -> $result {
                let $t4, $t5, $t6, $t7, $t8, $t9, $t10
                let $locals := $Malloc(64)
                mstore($locals, v_1)
                mstore(add($locals, 32), v_2)
                // $t4 := borrow_local($t0)
                $t4 := $MakePtr(false, $locals)
                // $t5 := vector::borrow<u8>($t4, $t1)
                $t5 := A1_vector_borrow$u8$($t4, idx_1)
                // $t6 := read_ref($t5)
                $t6 := $LoadU8($t5)
                // $t7 := borrow_local($t2)
                $t7 := $MakePtr(false, add($locals, 32))
                // $t8 := vector::borrow<u8>($t7, $t3)
                $t8 := A1_vector_borrow$u8$($t7, idx_2)
                // $t9 := read_ref($t8)
                $t9 := $LoadU8($t8)
                // $t10 := +($t6, $t9)
                $t10 := $AddU8($t6, $t9)
                // return $t10
                $result := $t10
                $Free($locals, 64)
            }

            function A2_M_test_u8_uint_64_array_2(idx_1, v, idx_2) -> $result0, $result1 {
                let $t3, $t4, $t5, $t6, $t7, $t8
                let $locals := $Malloc(32)
                mstore($locals, v)
                // $t3 := borrow_local($t1)
                $t3 := $MakePtr(false, $locals)
                // $t4 := vector::borrow<u8>($t3, $t0)
                $t4 := A1_vector_borrow$u8$($t3, idx_1)
                // $t5 := read_ref($t4)
                $t5 := $LoadU8($t4)
                // $t6 := borrow_local($t1)
                $t6 := $MakePtr(false, $locals)
                // $t7 := vector::borrow<u8>($t6, $t2)
                $t7 := A1_vector_borrow$u8$($t6, idx_2)
                // $t8 := read_ref($t7)
                $t8 := $LoadU8($t7)
                // return ($t5, $t8)
                $result0 := $t5
                $result1 := $t8
                $Free($locals, 32)
            }

            function A1_vector_borrow$u8$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 1)))
            }
            function A1_vector_length$u8$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function abi_encode_tuple_$uint8_uint8$_$u8_u8$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint8(value_0, add(headStart, 0))
                abi_encode_uint8(value_1, add(headStart, 32))
            }
            function abi_encode_uint8(value, pos) {
                mstore(pos, cleanup_uint8(value))
            }
            function cleanup_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$uint64_uint8_3__uint64$_$u64_vec$u8$_u64$(headStart, dataEnd) -> value_0, value_1, value_2 {
                if slt(sub(dataEnd, headStart), 160) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint8_3__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value_2 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_uint8_3__vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 3
                let size := 35
                array := abi_decode_available_length__uint8_3__vec$u8$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_3__vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_decode_uint8(offset, end) -> value {
                value := calldataload(offset)
                validator_uint8(value)
            }
            function validator_uint8(value) {
                if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8$_$u8$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint8(value_0, add(headStart, 0))
            }
            function abi_decode_tuple_$uint8_2__uint64_uint8_2__uint64$_$vec$u8$_u64_vec$u8$_u64$(headStart, dataEnd) -> value_0, value_1, value_2, value_3 {
                if slt(sub(dataEnd, headStart), 192) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_1 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 96
                    value_2 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 160
                    value_3 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8_2__vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 34
                array := abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_decode_tuple_$uint8_2__uint64$_$vec$u8$_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_1 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint64$_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint64(value_0, add(headStart, 0))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function abi_decode_tuple_$string_string$_$vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 32))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_1 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_string_vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__string(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__string(src, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                if gt(add(src, sub(size, 32)), end) { $Abort(93) }
                $CopyFromCallDataToMemory(src, dst, length)
            }
            function abi_encode_tuple_$uint64_uint8$_$u64_u8$(headStart ,value_0, value_1) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint64(value_0, add(headStart, 0))
                abi_encode_uint8(value_1, add(headStart, 32))
            }
            function abi_decode_tuple_$string_uint8_2__string_uint8_2_$_$vec$u8$_vec$u8$_vec$u8$_vec$u8$$(headStart, dataEnd) -> value_0, value_1, value_2, value_3 {
                if slt(sub(dataEnd, headStart), 192) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := calldataload(add(headStart, 96))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_2 := abi_decode_string_vec$u8$(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 128
                    value_3 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $LoadU8(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU8(offs)
              }
              default {
                val := $StorageLoadU8(offs)
              }
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $StorageLoadU8(offs) -> val {
              val := $StorageLoadBytes(offs, 1)
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $CopyFromCallDataToMemory(src, dst, length) {
                calldatacopy(dst, src, length)
                mstore(add(dst, length), 0)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $AddU8(x, y) -> r {
                if lt(sub(0xff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
        }
    }
}


!! Succeeded compiling Yul
