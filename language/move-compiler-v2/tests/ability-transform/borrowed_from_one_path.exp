============ initial bytecode ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
  0: $t5 := 0
  1: $t4 := ==($t0, $t5)
  2: if ($t4) goto 3 else goto 8
  3: label L0
  4: $t7 := 0x1
  5: $t6 := borrow_global<m::R>($t7)
  6: $t3 := borrow_field<m::R>.data($t6)
  7: goto 10
  8: label L1
  9: $t3 := infer($t1)
 10: label L2
 11: $t9 := 0
 12: $t8 := vector::borrow<u64>($t3, $t9)
 13: $t2 := read_ref($t8)
 14: return $t2
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # live vars: $t0, $t1
  0: $t5 := 0
     # live vars: $t0, $t1, $t5
  1: $t4 := ==($t0, $t5)
     # live vars: $t1, $t4
  2: if ($t4) goto 3 else goto 8
     # live vars: $t1
  3: label L0
     # live vars:
  4: $t7 := 0x1
     # live vars: $t7
  5: $t6 := borrow_global<m::R>($t7)
     # live vars: $t6
  6: $t3 := borrow_field<m::R>.data($t6)
     # live vars: $t3
  7: goto 10
     # live vars: $t1
  8: label L1
     # live vars: $t1
  9: $t3 := infer($t1)
     # live vars: $t3
 10: label L2
     # live vars: $t3
 11: $t9 := 0
     # live vars: $t3, $t9
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # live vars: $t8
 13: $t2 := read_ref($t8)
     # live vars: $t2
 14: return $t2
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  0: $t5 := 0
     # live vars: $t0, $t1, $t5
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  1: $t4 := ==($t0, $t5)
     # live vars: $t1, $t4
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  2: if ($t4) goto 3 else goto 8
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  3: label L0
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  4: $t7 := 0x1
     # live vars: $t7
     # graph: {}
     # locals: {}
     # globals: {}
     #
  5: $t6 := borrow_global<m::R>($t7)
     # live vars: $t6
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[]}
     # locals: {$t6=@501}
     # globals: {m::R=@500}
     #
  6: $t3 := borrow_field<m::R>.data($t6)
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
  7: goto 10
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  8: label L1
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  9: $t3 := infer($t1)
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 10: label L2
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 11: $t9 := 0
     # live vars: $t3, $t9
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # live vars: $t8
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[call(false, 12) -> @C00],@C00=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t8=@C00}
     # globals: {m::R=@500}
     # derived-from: @601=$t6,@C00=$t3
     #
 13: $t2 := read_ref($t8)
     # live vars: $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
 14: return $t2
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  0: $t5 := 0
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t5
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  1: $t4 := ==($t0, $t5)
     # abort state: {returns,aborts}
     # live vars: $t1, $t4
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  2: if ($t4) goto 3 else goto 8
     # abort state: {returns,aborts}
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  3: label L0
     # abort state: {returns,aborts}
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  4: $t7 := 0x1
     # abort state: {returns,aborts}
     # live vars: $t7
     # graph: {}
     # locals: {}
     # globals: {}
     #
  5: $t6 := borrow_global<m::R>($t7)
     # abort state: {returns,aborts}
     # live vars: $t6
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[]}
     # locals: {$t6=@501}
     # globals: {m::R=@500}
     #
  6: $t3 := borrow_field<m::R>.data($t6)
     # abort state: {returns,aborts}
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
  7: goto 10
     # abort state: {returns,aborts}
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  8: label L1
     # abort state: {returns,aborts}
     # live vars: $t1
     # graph: {@1000000=external[borrow(false) -> @2000000],@2000000=derived[]}
     # locals: {$t1=@2000000}
     # globals: {}
     #
  9: $t3 := infer($t1)
     # abort state: {returns,aborts}
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 10: label L2
     # abort state: {returns,aborts}
     # live vars: $t3
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 11: $t9 := 0
     # abort state: {returns,aborts}
     # live vars: $t3, $t9
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t3=@601}
     # globals: {m::R=@500}
     # derived-from: @601=$t6
     #
 12: $t8 := vector::borrow<u64>($t3, $t9)
     # abort state: {returns}
     # live vars: $t8
     # graph: {@500=global<m::R>[borrow_global(false, 5) -> @501],@501=derived[borrow_field(false) -> @601],@601=derived[call(false, 12) -> @C00],@C00=derived[],@1000000=external[borrow(false) -> @601]}
     # locals: {$t8=@C00}
     # globals: {m::R=@500}
     # derived-from: @601=$t6,@C00=$t3
     #
 13: $t2 := read_ref($t8)
     # abort state: {returns}
     # live vars: $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
 14: return $t2
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::f($t0: u8, $t1: &vector<u64>): u64 {
     var $t2: u64
     var $t3: &vector<u64>
     var $t4: bool
     var $t5: u8
     var $t6: &m::R
     var $t7: address
     var $t8: &u64
     var $t9: u64
  0: $t5 := 0
  1: $t4 := ==($t0, $t5)
  2: if ($t4) goto 3 else goto 9
  3: label L0
  4: drop($t1)
  5: $t7 := 0x1
  6: $t6 := borrow_global<m::R>($t7)
  7: $t3 := borrow_field<m::R>.data($t6)
  8: goto 11
  9: label L1
 10: $t3 := move($t1)
 11: label L2
 12: $t9 := 0
 13: $t8 := vector::borrow<u64>($t3, $t9)
 14: $t2 := read_ref($t8)
 15: return $t2
}
