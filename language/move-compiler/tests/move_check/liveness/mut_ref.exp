error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:18:16
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
14 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
18 │         some(x);
   │                ^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/liveness/mut_ref.move:24:9
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'copy' ability would need to be added here
   ·
22 │         let r = R { v: 0 };
   │                 ---------- The type '0x42::m::R' does not have the ability 'copy'
23 │         let x = &mut r;
24 │         *x; // Expected ok because x is only read; ability analysis will check whether read is ok
   │         ^^ Invalid dereference. Dereference requires the 'copy' ability

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/liveness/mut_ref.move:24:9
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
22 │         let r = R { v: 0 };
   │                 ---------- The type '0x42::m::R' does not have the ability 'drop'
23 │         let x = &mut r;
24 │         *x; // Expected ok because x is only read; ability analysis will check whether read is ok
   │         ^^ Cannot ignore values without the 'drop' ability. The value must be used

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:26:16
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
22 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
26 │         some(x);
   │                ^ Invalid return

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/liveness/mut_ref.move:33:9
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'copy' ability would need to be added here
   ·
30 │         let r = R { v: 0 };
   │                 ---------- The type '0x42::m::R' does not have the ability 'copy'
   ·
33 │         *x; // Same as f1aok
   │         ^^ Invalid dereference. Dereference requires the 'copy' ability

error[E05001]: ability constraint not satisfied
   ┌─ tests/move_check/liveness/mut_ref.move:33:9
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
30 │         let r = R { v: 0 };
   │                 ---------- The type '0x42::m::R' does not have the ability 'drop'
   ·
33 │         *x; // Same as f1aok
   │         ^^ Cannot ignore values without the 'drop' ability. The value must be used

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:34:16
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
30 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
34 │         some(x);
   │                ^ Invalid return

error[E07005]: invalid transfer of references
   ┌─ tests/move_check/liveness/mut_ref.move:41:9
   │
41 │         some2(x, x); // expected error because multiple use
   │         ^^^^^^^^^^^
   │         │     │
   │         │     It is still being mutably borrowed by this reference
   │         Invalid usage of reference as function argument. Cannot transfer a mutable reference that is being borrowed

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:41:20
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
39 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
40 │         let x = &mut r;
41 │         some2(x, x); // expected error because multiple use
   │                    ^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:49:16
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
45 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
49 │         some(x);
   │                ^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:56:16
   │
 3 │     struct R has key {
   │            - To satisfy the constraint, the 'drop' ability would need to be added here
   ·
53 │         let r = R { v: 0 };
   │             -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │             │    
   │             The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·
56 │         some(x);
   │                ^ Invalid return

error[E06001]: unused value without 'drop'
   ┌─ tests/move_check/liveness/mut_ref.move:63:9
   │  
 3 │       struct R has key {
   │              - To satisfy the constraint, the 'drop' ability would need to be added here
   ·  
60 │           let r = R { v: 0 };
   │               -   ---------- The type '0x42::m::R' does not have the ability 'drop'
   │               │    
   │               The local variable 'r' still contains a value. The value does not have the 'drop' ability and must be consumed before the function returns
   ·  
63 │ ╭         if (cond) {
64 │ │             some(x);
65 │ │             some(y)
66 │ │         } else {
67 │ │             some(y);
68 │ │             some(x);
69 │ │         }
   │ ╰─────────^ Invalid return

error[E07005]: invalid transfer of references
   ┌─ tests/move_check/liveness/mut_ref.move:64:13
   │
62 │         let y = x; // expected error because of implicit copy
   │                 - It is still being mutably borrowed by this reference
63 │         if (cond) {
64 │             some(x);
   │             ^^^^^^^ Invalid usage of reference as function argument. Cannot transfer a mutable reference that is being borrowed

