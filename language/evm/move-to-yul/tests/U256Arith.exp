/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_U256Arith" {
    code {
        codecopy(0, dataoffset("A2_U256Arith_deployed"), datasize("A2_U256Arith_deployed"))
        return(0, datasize("A2_U256Arith_deployed"))
    }
    object "A2_U256Arith_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x4f2be91f
                {
                    // add()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_add()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf9fa48c3
                {
                    // div()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_div()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb5165b60
                {
                    // eq()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_eq()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x4e507d6a
                {
                    // ge()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_ge()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xaf0ab80a
                {
                    // gt()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_gt()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xdcc78377
                {
                    // le()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_le()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xa22ca2a6
                {
                    // lt()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_lt()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x2986e054
                {
                    // mod()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_mod()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x58931c46
                {
                    // mul()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_mul()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x83a93813
                {
                    // ne()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_ne()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$bool$_$bool$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xcad85866
                {
                    // shl()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_shl()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb87f777a
                {
                    // shr()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_shr()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xc54124be
                {
                    // sub()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let ret_0 := A2_U256Arith_sub()
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x5c32cfdd
                {
                    // cast(uint128,uint128)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$uint128_uint128$_$u128_u128$(4, calldatasize())
                    let ret_0 := A2_U256Arith_cast(param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256$_$A2_U256_U256$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_U256Arith_add() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := +($t2, $t3)
                $t4 := $AddU256($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_div() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := /($t2, $t3)
                $t4 := $Div($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_eq() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := ==($t2, $t3)
                $t4 := $Eq($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_ge() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := >=($t2, $t3)
                $t4 := $GtEq($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_gt() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := >($t2, $t3)
                $t4 := $Gt($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_le() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := <=($t2, $t3)
                $t4 := $LtEq($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_lt() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := <($t2, $t3)
                $t4 := $Lt($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_mod() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := %($t2, $t3)
                $t4 := $Mod($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_mul() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := *($t2, $t3)
                $t4 := $MulU256($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_ne() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := !=($t2, $t3)
                $t4 := $Neq($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_shl() -> $result {
                let $t0, $t1, $t2
                // $t0 := 2041694201525630780780247644590609268738
                $t0 := 2041694201525630780780247644590609268738
                // $t1 := 127
                $t1 := 127
                // $t2 := <<($t0, $t1)
                $t2 := $ShlU256($t0, $t1)
                // return $t2
                $result := $t2
            }

            function A2_U256Arith_shr() -> $result {
                let $t0, $t1, $t2
                // $t0 := 2041694201525630780780247644590609268738
                $t0 := 2041694201525630780780247644590609268738
                // $t1 := 127
                $t1 := 127
                // $t2 := >>($t0, $t1)
                $t2 := $Shr($t0, $t1)
                // return $t2
                $result := $t2
            }

            function A2_U256Arith_sub() -> $result {
                let x, y, $t2, $t3, $t4
                // $t2 := 2041694201525630780780247644590609268738
                $t2 := 2041694201525630780780247644590609268738
                // $t3 := 1701411834604692317316873037158841057281
                $t3 := 1701411834604692317316873037158841057281
                // $t4 := -($t2, $t3)
                $t4 := $Sub($t2, $t3)
                // return $t4
                $result := $t4
            }

            function A2_U256Arith_cast(x, y) -> $result {
                let $t2
                // $t2 := (u256)($t0, $t1)
                $t2 := $CastU256(x, y)
                // return $t2
                $result := $t2
            }

            function abi_encode_tuple_$uint256$_$A2_U256_U256$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint256(value_0, add(headStart, 0))
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$uint128_uint128$_$u128_u128$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint128(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$bool$_$bool$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_bool(value_0, add(headStart, 0))
            }
            function abi_encode_bool(value, pos) {
                mstore(pos, cleanup_bool(value))
            }
            function cleanup_bool(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU256(x, y) -> r {
                if lt(sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $MulU256(x, y) -> r {
                if gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x)) { $AbortBuiltin() }
                r := mul(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Div(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := div(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $ShlU256(x, y) -> r {
                r := and(shl(y, x), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $LtEq(x, y) -> r {
                r := or(lt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
            function $Neq(x, y) -> r {
                r := $LogicalNot(eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
            function $CastU256(hi, lo) -> r {
                if gt(hi, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                if gt(lo, 0xffffffffffffffffffffffffffffffff) { $AbortBuiltin() }
                r := add(shl(128, hi), lo)
            }
        }
    }
}


!! Succeeded compiling Yul
