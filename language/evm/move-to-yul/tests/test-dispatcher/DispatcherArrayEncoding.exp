/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x52044bf1
                {
                    // test_u64(uint64[2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64_2_$_$vec$u64$$(4, calldatasize())
                    let ret_0 := A2_M_test_array_u64(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64_2_$_$vec$u64$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf03cf98d
                {
                    // test_u8(uint8[2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8_2_$_$vec$u8$$(4, calldatasize())
                    let ret_0 := A2_M_test_array_u8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_2_$_$vec$u8$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xaae0ca0b
                {
                    // test_uint72_u128(uint72[][2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint72___2_$_$vec$vec$u128$$$(4, calldatasize())
                    let ret_0 := A2_M_test_array_uint72_u128(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint72___2_$_$vec$vec$u128$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xecefc49c
                {
                    // test_u8(uint8[2][2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8_2__2_$_$vec$vec$u8$$$(4, calldatasize())
                    let ret_0 := A2_M_test_one_elem_para_array_2_array_2_u8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_2__2_$_$vec$vec$u8$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x4c976153
                {
                    // test_u256(uint256[][2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint256___2_$_$vec$vec$A2_U256_U256$$$(4, calldatasize())
                    let ret_0 := A2_M_test_one_elem_para_array_2_array_dynamic_u256(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint256___2_$_$vec$vec$A2_U256_U256$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x3b09967a
                {
                    // test_u8(uint8[][2])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8___2_$_$vec$vec$u8$$$(4, calldatasize())
                    let ret_0 := A2_M_test_one_elem_para_array_2_array_dynamic_u8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8___2_$_$vec$vec$u8$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x43ed1d2f
                {
                    // test_u8(uint8[2][])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint8_2___$_$vec$vec$u8$$$(4, calldatasize())
                    let ret_0 := A2_M_test_one_elem_para_array_dynamic_array_2_u8(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint8_2___$_$vec$vec$u8$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x14fda38d
                {
                    // test_u128(uint128[][])
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint128____$_$vec$vec$u128$$$(4, calldatasize())
                    let ret_0 := A2_M_test_one_elem_para_array_dynamic_array_u128(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint128____$_$vec$vec$u128$$$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_test_array_u64(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_array_u8(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_array_uint72_u128(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_one_elem_para_array_2_array_2_u8(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_one_elem_para_array_2_array_dynamic_u256(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_one_elem_para_array_2_array_dynamic_u8(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_one_elem_para_array_dynamic_array_2_u8(v) -> $result {
                // return $t0
                $result := v
            }

            function A2_M_test_one_elem_para_array_dynamic_array_u128(v) -> $result {
                // return $t0
                $result := v
            }

            function abi_encode_tuple_$uint128____$_$vec$vec$u128$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint128_____vec$vec$u128$$(value_0,  tail)
            }
            function abi_encode_uint128_____vec$vec$u128$$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_uint128___vec$u128$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_uint128___vec$u128$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_uint128___vec$u128$(value, pos)
            }
            function abi_encode_uint128___vec$u128$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 16))
                for { let src := start } lt(src, srcEnd) { src := add(src, 16) }
                {
                    let v := $MemoryLoadU128(src)
                    pos := abi_encode_uint128_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint128_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint128(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint128(value, pos) {
                mstore(pos, cleanup_uint128(value))
            }
            function cleanup_uint128(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$uint128____$_$vec$vec$u128$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint128_____vec$vec$u128$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint128_____vec$vec$u128$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__uint128_____vec$vec$u128$$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint128_____vec$vec$u128$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_uint128___vec$u128$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint128___vec$u128$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(16, length), 32)
                array := abi_decode_available_length__uint128___vec$u128$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint128___vec$u128$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint128(elementPos, end)
                    $MemoryStoreU128(dst, value)
                    dst := add(dst, 16)
                }
            }
            function abi_decode_uint128(offset, end) -> value {
                value := calldataload(offset)
                validator_uint128(value)
            }
            function validator_uint128(value) {
                if iszero(eq(value, cleanup_uint128(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8_2___$_$vec$vec$u8$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint8_2____vec$vec$u8$$(value_0,  tail)
            }
            function abi_encode_uint8_2____vec$vec$u8$$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let v := $MemoryLoadU256(src)
                    pos := abi_encode_uint8_2__vec$u8$_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint8_2__vec$u8$_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint8_2__vec$u8$(value, pos)
                updated_pos := add(pos, 64)
            }
            function abi_encode_uint8_2__vec$u8$(value, pos)  {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 1))
                for { let src := start } lt(src, srcEnd) { src := add(src, 1) }
                {
                    let v := $MemoryLoadU8(src)
                    pos := abi_encode_uint8_with_updated_pos(v, pos)
                }
            }
            function abi_encode_uint8_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint8(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint8(value, pos) {
                mstore(pos, cleanup_uint8(value))
            }
            function cleanup_uint8(value) -> cleaned {
                cleaned := and(value, 0xff)
            }
            function abi_decode_tuple_$uint8_2___$_$vec$vec$u8$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint8_2____vec$vec$u8$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8_2____vec$vec$u8$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__uint8_2____vec$vec$u8$$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint8_2____vec$vec$u8$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 64))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 64) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8_2__vec$u8$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint8_2__vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 34
                array := abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_2__vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_decode_uint8(offset, end) -> value {
                value := calldataload(offset)
                validator_uint8(value)
            }
            function validator_uint8(value) {
                if iszero(eq(value, cleanup_uint8(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8___2_$_$vec$vec$u8$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint8___2__vec$vec$u8$$(value_0,  tail)
            }
            function abi_encode_uint8___2__vec$vec$u8$$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_uint8___vec$u8$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_uint8___vec$u8$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_uint8___vec$u8$(value, pos)
            }
            function abi_encode_uint8___vec$u8$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 1))
                for { let src := start } lt(src, srcEnd) { src := add(src, 1) }
                {
                    let v := $MemoryLoadU8(src)
                    pos := abi_encode_uint8_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_decode_tuple_$uint8___2_$_$vec$vec$u8$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint8___2__vec$vec$u8$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8___2__vec$vec$u8$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__uint8___2__vec$vec$u8$$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8___2__vec$vec$u8$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_uint8___vec$u8$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint8___vec$u8$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(1, length), 32)
                array := abi_decode_available_length__uint8___vec$u8$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint8___vec$u8$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8(elementPos, end)
                    $MemoryStoreU8(dst, value)
                    dst := add(dst, 1)
                }
            }
            function abi_encode_tuple_$uint256___2_$_$vec$vec$A2_U256_U256$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint256___2__vec$vec$A2_U256_U256$$(value_0,  tail)
            }
            function abi_encode_uint256___2__vec$vec$A2_U256_U256$$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_uint256___vec$A2_U256_U256$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_uint256___vec$A2_U256_U256$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_uint256___vec$A2_U256_U256$(value, pos)
            }
            function abi_encode_uint256___vec$A2_U256_U256$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let v := $MemoryLoadU256(src)
                    pos := abi_encode_uint256_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint256_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint256(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint256(value, pos) {
                mstore(pos, cleanup_uint256(value))
            }
            function cleanup_uint256(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_decode_tuple_$uint256___2_$_$vec$vec$A2_U256_U256$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint256___2__vec$vec$A2_U256_U256$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint256___2__vec$vec$A2_U256_U256$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__uint256___2__vec$vec$A2_U256_U256$$(offset, length, size, end)
            }
            function abi_decode_available_length__uint256___2__vec$vec$A2_U256_U256$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_uint256___vec$A2_U256_U256$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint256___vec$A2_U256_U256$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(32, length), 32)
                array := abi_decode_available_length__uint256___vec$A2_U256_U256$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint256___vec$A2_U256_U256$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint256(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint256(offset, end) -> value {
                value := calldataload(offset)
                validator_uint256(value)
            }
            function validator_uint256(value) {
                if iszero(eq(value, cleanup_uint256(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8_2__2_$_$vec$vec$u8$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 128)
                abi_encode_uint8_2__2__vec$vec$u8$$(value_0, add(headStart, 0))
            }
            function abi_encode_uint8_2__2__vec$vec$u8$$(value, pos)  {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let v := $MemoryLoadU256(src)
                    pos := abi_encode_uint8_2__vec$u8$_with_updated_pos(v, pos)
                }
            }
            function abi_decode_tuple_$uint8_2__2_$_$vec$vec$u8$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 128) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8_2__2__vec$vec$u8$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint8_2__2__vec$vec$u8$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__uint8_2__2__vec$vec$u8$$(offset, length, size, end)
            }
            function abi_decode_available_length__uint8_2__2__vec$vec$u8$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 64))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 64) }
                {
                    let elementPos := src
                    let value := abi_decode_uint8_2__vec$u8$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_encode_tuple_$uint72___2_$_$vec$vec$u128$$$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                mstore(add(headStart, 0), sub(tail, headStart))
                tail := abi_encode_uint72___2__vec$vec$u128$$(value_0,  tail)
            }
            function abi_encode_uint72___2__vec$vec$u128$$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let headStart := pos
                let tail := add(pos, mul(length, 0x20))
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 32))
                for { let src := start } lt(src, srcEnd) { src := add(src, 32) }
                {
                    mstore(pos, sub(tail, headStart))
                    let v := $MemoryLoadU256(src)
                    tail := abi_encode_uint72___vec$u128$_with_updated_pos(v, tail)
                    pos := add(pos, 0x20)
                }
                pos := tail
                end := pos
            }
            function abi_encode_uint72___vec$u128$_with_updated_pos(value, pos) -> updated_pos{
                updated_pos := abi_encode_uint72___vec$u128$(value, pos)
            }
            function abi_encode_uint72___vec$u128$(value, pos) -> end {
                let length := $MemoryLoadU64(value)
                mstore(pos, length)
                pos := add(pos, 0x20)
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 16))
                for { let src := start } lt(src, srcEnd) { src := add(src, 16) }
                {
                    let v := $MemoryLoadU128(src)
                    pos := abi_encode_uint72_with_updated_pos(v, pos)
                }
                end := pos
            }
            function abi_encode_uint72_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint72(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint72(value, pos) {
                mstore(pos, cleanup_uint72(value))
            }
            function cleanup_uint72(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffff)
            }
            function abi_decode_tuple_$uint72___2_$_$vec$vec$u128$$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := calldataload(add(headStart, 0))
                    if gt(offset, 0xffffffffffffffff) { $Abort(96) }
                    value_0 := abi_decode_uint72___2__vec$vec$u128$$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint72___2__vec$vec$u128$$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 96
                array := abi_decode_available_length__uint72___2__vec$vec$u128$$(offset, length, size, end)
            }
            function abi_decode_available_length__uint72___2__vec$vec$u128$$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let innerOffset := calldataload(src)
                    if gt(innerOffset, 0xffffffffffffffff) { $Abort(94) }
                    let elementPos := add(offset, innerOffset)
                    let value := abi_decode_uint72___vec$u128$(elementPos, end)
                    $MemoryStoreU256(dst, value)
                    dst := add(dst, 32)
                }
            }
            function abi_decode_uint72___vec$u128$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := calldataload(offset)
                let size := add(mul(16, length), 32)
                array := abi_decode_available_length__uint72___vec$u128$(add(offset, 0x20), length, size, end)
            }
            function abi_decode_available_length__uint72___vec$u128$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint72(elementPos, end)
                    $MemoryStoreU128(dst, value)
                    dst := add(dst, 16)
                }
            }
            function abi_decode_uint72(offset, end) -> value {
                value := calldataload(offset)
                validator_uint72(value)
            }
            function validator_uint72(value) {
                if iszero(eq(value, cleanup_uint72(value))) { $Abort(95) }
            }
            function abi_encode_tuple_$uint8_2_$_$vec$u8$$(headStart ,value_0) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint8_2__vec$u8$(value_0, add(headStart, 0))
            }
            function abi_decode_tuple_$uint8_2_$_$vec$u8$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint8_2__vec$u8$(add(headStart, offset), dataEnd)
                }
            }
            function abi_encode_tuple_$uint64_2_$_$vec$u64$$(headStart ,value_0) -> tail {
                tail := add(headStart, 64)
                abi_encode_uint64_2__vec$u64$(value_0, add(headStart, 0))
            }
            function abi_encode_uint64_2__vec$u64$(value, pos)  {
                let length := $MemoryLoadU64(value)
                if iszero(eq(length, 2)) { $Abort(92) }
                let start := add(value, 32)
                let srcEnd := add(start, mul(length, 8))
                for { let src := start } lt(src, srcEnd) { src := add(src, 8) }
                {
                    let v := $MemoryLoadU64(src)
                    pos := abi_encode_uint64_with_updated_pos(v, pos)
                }
            }
            function abi_encode_uint64_with_updated_pos(value, pos) -> updated_pos{
                abi_encode_uint64(value, pos)
                updated_pos := add(pos, 32)
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_decode_tuple_$uint64_2_$_$vec$u64$$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64_2__vec$u64$(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64_2__vec$u64$(offset, end) -> array {
                if iszero(slt(add(offset, 0x1f), end)) { $Abort(94) }
                let length := 2
                let size := 48
                array := abi_decode_available_length__uint64_2__vec$u64$(offset, length, size, end)
            }
            function abi_decode_available_length__uint64_2__vec$u64$(offset, length, size, end) -> array {
                array := $Malloc($CheckMemorySize(size))
                $MemoryStoreU64(array, length)
                $MemoryStoreU64(add(array, 8), $ClosestGreaterPowerOfTwo(length))
                let dst := add(array, 32)
                let srcEnd := add(offset, mul(length, 32))
                if gt(srcEnd, end) { $Abort(94) }
                for { let src := offset } lt(src, srcEnd) { src := add(src, 32) }
                {
                    let elementPos := src
                    let value := abi_decode_uint64(elementPos, end)
                    $MemoryStoreU64(dst, value)
                    dst := add(dst, 8)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $MemoryLoadU8(offs) -> val {
              val := $MemoryLoadBytes(offs, 1)
            }
            function $MemoryStoreU8(offs, val) {
              // Shortcut via special instruction
              mstore8(offs, val)
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $MemoryLoadU128(offs) -> val {
              val := $MemoryLoadBytes(offs, 16)
            }
            function $MemoryStoreU128(offs, val) {
              $MemoryStoreBytes(offs, 16, val)
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $CheckMemorySize(len) -> checked_len {
                if gt(len, 0xffffffffffffffff) { $AbortBuiltin() }
                checked_len := len
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $ClosestGreaterPowerOfTwo(x) -> r {
                r := or(r, shr(1, x))
                r := or(r, shr(2, r))
                r := or(r, shr(4, r))
                r := or(r, shr(8, r))
                r := or(r, shr(16, r))
                r := or(r, shr(32, r))
                r := add(x, 1)
            }
        }
    }
}


!! Succeeded compiling Yul
