============ initial bytecode ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: bool
     var $t3: u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
  0: $t0 := 1
  1: $t1 := borrow_local($t0)
  2: $t2 := true
  3: label L0
  4: if ($t2) goto 5 else goto 11
  5: label L2
  6: $t3 := 2
  7: write_ref($t1, $t3)
  8: $t4 := false
  9: $t2 := infer($t4)
 10: goto 13
 11: label L3
 12: goto 15
 13: label L4
 14: goto 3
 15: label L1
 16: $t6 := 2
 17: $t5 := ==($t0, $t6)
 18: if ($t5) goto 19 else goto 21
 19: label L5
 20: goto 24
 21: label L6
 22: $t7 := 0
 23: abort($t7)
 24: label L7
 25: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: bool
     var $t3: u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
     # live vars:
  0: $t0 := 1
     # live vars: $t0
  1: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
  2: $t2 := true
     # live vars: $t0, $t1, $t2
  3: label L0
     # live vars: $t0, $t1, $t2
  4: if ($t2) goto 5 else goto 11
     # live vars: $t0, $t1
  5: label L2
     # live vars: $t0, $t1
  6: $t3 := 2
     # live vars: $t0, $t1, $t3
  7: write_ref($t1, $t3)
     # live vars: $t0, $t1
  8: $t4 := false
     # live vars: $t0, $t1, $t4
  9: $t2 := infer($t4)
     # live vars: $t0, $t1, $t2
 10: goto 13
     # live vars: $t0, $t1
 11: label L3
     # live vars: $t0
 12: goto 15
     # live vars: $t0, $t1, $t2
 13: label L4
     # live vars: $t0, $t1, $t2
 14: goto 3
     # live vars: $t0
 15: label L1
     # live vars: $t0
 16: $t6 := 2
     # live vars: $t0, $t6
 17: $t5 := ==($t0, $t6)
     # live vars: $t5
 18: if ($t5) goto 19 else goto 21
     # live vars:
 19: label L5
     # live vars:
 20: goto 24
     # live vars:
 21: label L6
     # live vars:
 22: $t7 := 0
     # live vars: $t7
 23: abort($t7)
     # live vars:
 24: label L7
     # live vars:
 25: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: bool
     var $t3: u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := 1
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := borrow_local($t0)
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  2: $t2 := true
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  3: label L0
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  4: if ($t2) goto 5 else goto 11
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  5: label L2
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  6: $t3 := 2
     # live vars: $t0, $t1, $t3
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  7: write_ref($t1, $t3)
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  8: $t4 := false
     # live vars: $t0, $t1, $t4
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  9: $t2 := infer($t4)
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 10: goto 13
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 11: label L3
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 12: goto 15
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 13: label L4
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 14: goto 3
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 15: label L1
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 16: $t6 := 2
     # live vars: $t0, $t6
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 17: $t5 := ==($t0, $t6)
     # live vars: $t5
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 18: if ($t5) goto 19 else goto 21
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 19: label L5
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 20: goto 24
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 21: label L6
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 22: $t7 := 0
     # live vars: $t7
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 23: abort($t7)
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 24: label L7
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 25: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: bool
     var $t3: u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
     # abort state: {returns,aborts}
     # live vars:
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t0 := 1
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t1 := borrow_local($t0)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  2: $t2 := true
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  3: label L0
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  4: if ($t2) goto 5 else goto 11
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  5: label L2
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  6: $t3 := 2
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t3
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  7: write_ref($t1, $t3)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  8: $t4 := false
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t4
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
  9: $t2 := infer($t4)
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 10: goto 13
     # abort state: {returns,aborts}
     # live vars: $t0, $t1
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 11: label L3
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 12: goto 15
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 13: label L4
     # abort state: {returns,aborts}
     # live vars: $t0, $t1, $t2
     # graph: {@100=local($t0)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t0=@100,$t1=@101}
     # globals: {}
     #
 14: goto 3
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 15: label L1
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 16: $t6 := 2
     # abort state: {returns,aborts}
     # live vars: $t0, $t6
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 17: $t5 := ==($t0, $t6)
     # abort state: {returns,aborts}
     # live vars: $t5
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 18: if ($t5) goto 19 else goto 21
     # abort state: {returns}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 19: label L5
     # abort state: {returns}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 20: goto 24
     # abort state: {aborts}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 21: label L6
     # abort state: {aborts}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 22: $t7 := 0
     # abort state: {aborts}
     # live vars: $t7
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 23: abort($t7)
     # abort state: {returns}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 24: label L7
     # abort state: {returns}
     # live vars:
     # graph: {@100=local($t0)[]}
     # locals: {$t0=@100}
     # globals: {}
     #
 25: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
fun m::drop_after_loop() {
     var $t0: u64
     var $t1: &mut u64
     var $t2: bool
     var $t3: u64
     var $t4: bool
     var $t5: bool
     var $t6: u64
     var $t7: u64
  0: $t0 := 1
  1: $t1 := borrow_local($t0)
  2: $t2 := true
  3: label L0
  4: if ($t2) goto 5 else goto 11
  5: label L2
  6: $t3 := 2
  7: write_ref($t1, $t3)
  8: $t4 := false
  9: $t2 := move($t4)
 10: goto 14
 11: label L3
 12: drop($t1)
 13: goto 16
 14: label L4
 15: goto 3
 16: label L1
 17: $t6 := 2
 18: $t5 := ==($t0, $t6)
 19: if ($t5) goto 20 else goto 22
 20: label L5
 21: goto 25
 22: label L6
 23: $t7 := 0
 24: abort($t7)
 25: label L7
 26: return ()
}
