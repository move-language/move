============ initial bytecode ================

[variant baseline]
fun m::foo($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
  0: $t3 := +($t0, $t1)
  1: $t5 := 1
  2: $t4 := +($t3, $t5)
  3: $t7 := 1
  4: $t6 := +($t4, $t7)
  5: $t2 := infer($t6)
  6: return $t2
}

============ after uninitialized_use_checker: ================

[variant baseline]
fun m::foo($t0: u64, $t1: u64): u64 {
     var $t2: u64
     var $t3: u64
     var $t4: u64
     var $t5: u64
     var $t6: u64
     var $t7: u64
     # before: { no: $t2, $t3, $t4, $t5, $t6, $t7 }, after: { no: $t2, $t4, $t5, $t6, $t7 }
  0: $t3 := +($t0, $t1)
     # before: { no: $t2, $t4, $t5, $t6, $t7 }, after: { no: $t2, $t4, $t6, $t7 }
  1: $t5 := 1
     # before: { no: $t2, $t4, $t6, $t7 }, after: { no: $t2, $t6, $t7 }
  2: $t4 := +($t3, $t5)
     # before: { no: $t2, $t6, $t7 }, after: { no: $t2, $t6 }
  3: $t7 := 1
     # before: { no: $t2, $t6 }, after: { no: $t2 }
  4: $t6 := +($t4, $t7)
     # before: { no: $t2 }, after: all initialized
  5: $t2 := infer($t6)
     # before: all initialized, after: all initialized
  6: return $t2
}
