/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A3_AccountStateMachine" {
    code {
        mstore(0, memoryguard(160))
        let $new_value := A3_AccountStateMachine_init()
        {
            let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
            if $AlignedStorageLoad($base_offset) {
              $AbortBuiltin()
            }
            $AlignedStorageStore($base_offset, true)
            {
                let $dst := add($base_offset, 32)
                let $src := $new_value
                {
                    let $linked_src_37500119 := mload(add($src, 0))
                    let $linked_dst_37500119 := $NewLinkedStorageBase(0x23c34d7)
                    let $size_37500119 := $MemoryLoadU64($linked_src_37500119)
                    let $data_size_37500119 := mul($size_37500119, 32)
                    $AlignedStorageStore($linked_dst_37500119, mload($linked_src_37500119))
                    let $data_src_37500119 := add($linked_src_37500119, 32)
                    let $data_dst_37500119 := add($linked_dst_37500119, 32)
                    for { let $offs_37500119 := 0 } lt($offs_37500119, $data_size_37500119) { $offs_37500119 := add($offs_37500119, 32)} {
                        {
                            let $linked_src_1341933877 := mload(add($offs_37500119, $data_src_37500119))
                            let $linked_dst_1341933877 := $NewLinkedStorageBase(0x4ffc4935)
                            $AlignedStorageStore(add($linked_dst_1341933877, 0), mload(add($linked_src_1341933877, 0)))
                            $Free($linked_src_1341933877, 32)
                            $AlignedStorageStore(add($data_dst_37500119, $offs_37500119), $linked_dst_1341933877)
                        }
                        $Free($linked_src_37500119, add($data_size_37500119, 32))
                    }
                    $AlignedStorageStore(add($dst, 0), $linked_dst_37500119)
                }
                $AlignedStorageStore(add($dst, 32), mload(add($src, 32)))
                $Free($src, 48)
            }
        }
        codecopy(0, dataoffset("A3_AccountStateMachine_deployed"), datasize("A3_AccountStateMachine_deployed"))
        return(0, datasize("A3_AccountStateMachine_deployed"))
        function A3_AccountStateMachine_init() -> $result {
            let $t0, $t1, $t2, $t3
            // $t0 := 0
            $t0 := 0
            // $t1 := 0
            $t1 := 0
            // $t2 := vector::empty<AccountStateMachine::PendingTransfer>()
            $t2 := A1_vector_empty$A3_AccountStateMachine_PendingTransfer$()
            // $t3 := pack AccountStateMachine::Account($t0, $t1, $t2)
            {
                let $mem := $Malloc(48)
                $MemoryStoreU64(add($mem, 32), $t0)
                $MemoryStoreU64(add($mem, 40), $t1)
                $MemoryStoreU256(add($mem, 0), $t2)
                $t3 := $mem
            }
            // return $t3
            $result := $t3
        }

        function A1_vector_empty$A3_AccountStateMachine_PendingTransfer$() -> vector {
            vector := $Malloc(96)
            $MemoryStoreU64(add(vector, 8), 2)
        }
        function $Abort(code) {
            mstore(0, code)
            revert(24, 8) // TODO: store code as a string?
        }
        function $AbortBuiltin() {
            $Abort(sub(0, 1))
        }
        function $Malloc(size) -> offs {
            offs := mload(0)
            // pad to word size
            mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
        }
        function $Free(offs, size) {
        }
        function $MaskForSize(size) -> mask {
          mask := sub(shl(shl(3, size), 1), 1)
        }
        function $MemoryLoadBytes(offs, size) -> val {
          // Lower bit where the value in the higher bytes ends
          let bit_end := shl(3, sub(32, size))
          val := shr(bit_end, mload(offs))
        }
        function $MemoryStoreBytes(offs, size, val) {
          let bit_end := shl(3, sub(32, size))
          let mask := shl(bit_end, $MaskForSize(size))
          mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
        }
        function $StorageKey(group, word) -> key {
          mstore(32, word)
          mstore(64, shl(224, group))
          key := keccak256(32, 36)
        }
        function $MakeTypeStorageBase(category, type_hash, id) -> offs {
          offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
        }
        function $NewLinkedStorageBase(type_hash) -> offs {
          let key := $StorageKey(1, 1)
          let handle := sload(key)
          sstore(key, add(handle, 1))
          offs := $MakeTypeStorageBase(1, type_hash, handle)
        }
        function $MemoryLoadU64(offs) -> val {
          val := $MemoryLoadBytes(offs, 8)
        }
        function $MemoryStoreU64(offs, val) {
          $MemoryStoreBytes(offs, 8, val)
        }
        function $MemoryStoreU256(offs, val) {
          $MemoryStoreBytes(offs, 32, val)
        }
        function $AlignedStorageLoad(offs) -> val {
          let word_offs := shr(5, offs)
          val := sload($StorageKey(0, word_offs))
        }
        function $AlignedStorageStore(offs, val) {
          let word_offs := shr(5, offs)
          sstore($StorageKey(0, word_offs), val)
        }
    }
    object "A3_AccountStateMachine_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x3cecd719
                {
                    // cleanup()
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_cleanup($MakePtr(true, add($base_offset, 32)))
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x13765838
                {
                    // deposit(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_deposit($MakePtr(true, add($base_offset, 32)), param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x750f0acc
                {
                    // withdraw(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_withdraw($MakePtr(true, add($base_offset, 32)), param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x2bcc3f98
                {
                    // xfer(address,uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1 := abi_decode_tuple_$address_uint64$_$address_u64$(4, calldatasize())
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_xfer($MakePtr(true, add($base_offset, 32)), param_0, param_1)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x02852d52
                {
                    // xfer_deposit(uint64,address,uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0, param_1, param_2 := abi_decode_tuple_$uint64_address_uint64$_$u64_address_u64$(4, calldatasize())
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_xfer_deposit($MakePtr(true, add($base_offset, 32)), param_0, param_1, param_2)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x8c38542c
                {
                    // xfer_finish(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    let $base_offset := $MakeTypeStorageBase(0, 0x330750a9, address())
                    if iszero($AlignedStorageLoad($base_offset)) {
                      $AbortBuiltin()
                    }
                    A3_AccountStateMachine_xfer_finish($MakePtr(true, add($base_offset, 32)), param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A3_AccountStateMachine_cleanup(this) {
                let tmp_$1, i, p, pending, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16, $t17, $t18, $t19
                let $block := 3
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L6
                        // $t7 := freeze_ref($t5)
                        $t7 := $t5
                        // $t8 := vector::length<AccountStateMachine::PendingTransfer>($t7)
                        $t8 := A1_vector_length$A3_AccountStateMachine_PendingTransfer$($t7)
                        // $t9 := <($t2, $t8)
                        $t9 := $Lt(i, $t8)
                        // if ($t9) goto L1 else goto L0
                        switch $t9
                        case 0  { $block := 5 }
                        default { $block := 4 }
                    }
                    case 3 {
                        // $t5 := borrow_field<AccountStateMachine::Account>.pending($t0)
                        $t5 := this
                        // $t6 := 0
                        $t6 := 0
                        // $t2 := $t6
                        i := $t6
                        // goto L6
                        $block := 2
                    }
                    case 4 {
                        // label L1
                        // goto L2
                        $block := 6
                    }
                    case 5 {
                        // label L0
                        // destroy($t5)
                        // return ()
                        leave
                    }
                    case 6 {
                        // label L2
                        // $t10 := freeze_ref($t5)
                        $t10 := $t5
                        // $t11 := vector::borrow<AccountStateMachine::PendingTransfer>($t10, $t2)
                        $t11 := A1_vector_borrow$A3_AccountStateMachine_PendingTransfer$($t10, i)
                        // $t12 := Actor::virtual_time()
                        $t12 := A1_Actor_virtual_time()
                        // $t13 := borrow_field<AccountStateMachine::PendingTransfer>.initiated_at($t11)
                        $t13 := $t11
                        // $t14 := read_ref($t13)
                        $t14 := $LoadU128($t13)
                        // $t15 := -($t12, $t14)
                        $t15 := $Sub($t12, $t14)
                        // $t16 := 100000000
                        $t16 := 100000000
                        // $t17 := >=($t15, $t16)
                        $t17 := $GtEq($t15, $t16)
                        // if ($t17) goto L4 else goto L3
                        switch $t17
                        case 0  { $block := 8 }
                        default { $block := 7 }
                    }
                    case 7 {
                        // label L4
                        // $t18 := vector::remove<AccountStateMachine::PendingTransfer>($t5, $t2)
                        $t18 := A1_vector_remove$A3_AccountStateMachine_PendingTransfer$($t5, i)
                        // destroy($t18)
                        $Free($t18, 32)
                        // goto L5
                        $block := 9
                    }
                    case 8 {
                        // label L3
                        // $t19 := 1
                        $t19 := 1
                        // $t2 := +($t2, $t19)
                        i := $AddU64(i, $t19)
                        // goto L5
                        $block := 9
                    }
                    case 9 {
                        // label L5
                        // goto L6
                        $block := 2
                    }
                }
            }

            function A3_AccountStateMachine_deposit(this, v) {
                let $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // destroy($t0)
                        // $t7 := 1
                        $t7 := 1
                        // abort($t7)
                        $Abort($t7)
                    }
                    case 4 {
                        // $t2 := 43
                        $t2 := 43
                        // $t3 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t3 := $IndexPtr(this, 32)
                        // $t4 := read_ref($t3)
                        $t4 := $LoadU64($t3)
                        // $t5 := -($t2, $t4)
                        $t5 := $Sub($t2, $t4)
                        // $t6 := >=($t5, $t1)
                        $t6 := $GtEq($t5, v)
                        // if ($t6) goto L1 else goto L0
                        switch $t6
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t8 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t8 := $IndexPtr(this, 32)
                        // $t9 := read_ref($t8)
                        $t9 := $LoadU64($t8)
                        // $t10 := +($t9, $t1)
                        $t10 := $AddU64($t9, v)
                        // $t11 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t11 := $IndexPtr(this, 32)
                        // write_ref($t11, $t10)
                        $StoreU64($t11, $t10)
                        // return ()
                        leave
                    }
                }
            }

            function A3_AccountStateMachine_withdraw(this, v) {
                let $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // destroy($t0)
                        // $t5 := 2
                        $t5 := 2
                        // abort($t5)
                        $Abort($t5)
                    }
                    case 4 {
                        // $t2 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t2 := $IndexPtr(this, 32)
                        // $t3 := read_ref($t2)
                        $t3 := $LoadU64($t2)
                        // $t4 := >=($t3, $t1)
                        $t4 := $GtEq($t3, v)
                        // if ($t4) goto L1 else goto L0
                        switch $t4
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t6 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t6 := $IndexPtr(this, 32)
                        // $t7 := read_ref($t6)
                        $t7 := $LoadU64($t6)
                        // $t8 := -($t7, $t1)
                        $t8 := $Sub($t7, v)
                        // $t9 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t9 := $IndexPtr(this, 32)
                        // write_ref($t9, $t8)
                        $StoreU64($t9, $t8)
                        // return ()
                        leave
                    }
                }
            }

            function A3_AccountStateMachine_xfer(this, dest, v) {
                let xfer_id, $t4, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // destroy($t0)
                        // $t7 := 1
                        $t7 := 1
                        // abort($t7)
                        $Abort($t7)
                    }
                    case 4 {
                        // $t4 := borrow_field<AccountStateMachine::Account>.value($t0)
                        $t4 := $IndexPtr(this, 32)
                        // $t5 := read_ref($t4)
                        $t5 := $LoadU64($t4)
                        // $t6 := >=($t5, $t2)
                        $t6 := $GtEq($t5, v)
                        // if ($t6) goto L1 else goto L0
                        switch $t6
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t8 := AccountStateMachine::new_xfer_id($t0)
                        $t8 := A3_AccountStateMachine_new_xfer_id(this)
                        // $t9 := borrow_field<AccountStateMachine::Account>.pending($t0)
                        $t9 := this
                        // $t10 := Actor::virtual_time()
                        $t10 := A1_Actor_virtual_time()
                        // $t11 := pack AccountStateMachine::PendingTransfer($t8, $t2, $t10)
                        {
                            let $mem := $Malloc(32)
                            $MemoryStoreU64(add($mem, 16), $t8)
                            $MemoryStoreU64(add($mem, 24), v)
                            $MemoryStoreU128(add($mem, 0), $t10)
                            $t11 := $mem
                        }
                        // vector::push_back<AccountStateMachine::PendingTransfer>($t9, $t11)
                        A1_vector_push_back$A3_AccountStateMachine_PendingTransfer$($t9, $t11)
                        // $t12 := Actor::self()
                        $t12 := A1_Actor_self()
                        // AccountStateMachine::send_xfer_deposit($t1, $t2, $t12, $t8)
                        A3_AccountStateMachine_send_xfer_deposit(dest, v, $t12, $t8)
                        // return ()
                        leave
                    }
                }
            }

            function A3_AccountStateMachine_xfer_deposit(this, v, caller_, xfer_id) {
                // AccountStateMachine::deposit($t0, $t1)
                A3_AccountStateMachine_deposit(this, v)
                // AccountStateMachine::send_xfer_finish($t2, $t3)
                A3_AccountStateMachine_send_xfer_finish(caller_, xfer_id)
                // return ()
            }

            function A3_AccountStateMachine_xfer_finish(this, xfer_id) {
                let tmp_$2, amount, i, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12
                // $t5 := freeze_ref($t0)
                $t5 := this
                // $t6 := AccountStateMachine::find_xfer($t5, $t1)
                $t6 := A3_AccountStateMachine_find_xfer($t5, xfer_id)
                // $t7 := borrow_field<AccountStateMachine::Account>.pending($t0)
                $t7 := this
                // $t8 := vector::borrow<AccountStateMachine::PendingTransfer>($t7, $t6)
                $t8 := A1_vector_borrow$A3_AccountStateMachine_PendingTransfer$($t7, $t6)
                // $t9 := borrow_field<AccountStateMachine::PendingTransfer>.amount($t8)
                $t9 := $IndexPtr($t8, 24)
                // $t10 := read_ref($t9)
                $t10 := $LoadU64($t9)
                // $t11 := borrow_field<AccountStateMachine::Account>.pending($t0)
                $t11 := this
                // $t12 := vector::remove<AccountStateMachine::PendingTransfer>($t11, $t6)
                $t12 := A1_vector_remove$A3_AccountStateMachine_PendingTransfer$($t11, $t6)
                // destroy($t12)
                $Free($t12, 32)
                // AccountStateMachine::withdraw($t0, $t10)
                A3_AccountStateMachine_withdraw(this, $t10)
                // return ()
            }

            function A1_vector_remove$A3_AccountStateMachine_PendingTransfer$(v, i) -> $result {
                let tmp_$2, tmp_$3, len, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // destroy($t0)
                        // $t8 := 131072
                        $t8 := 131072
                        // abort($t8)
                        $Abort($t8)
                    }
                    case 3 {
                        // label L0
                        // $t9 := 1
                        $t9 := 1
                        // $t10 := -($t6, $t9)
                        $t10 := $Sub($t6, $t9)
                        // goto L5
                        $block := 5
                    }
                    case 4 {
                        // $t5 := freeze_ref($t0)
                        $t5 := v
                        // $t6 := vector::length<#0>($t5)
                        $t6 := A1_vector_length$A3_AccountStateMachine_PendingTransfer$($t5)
                        // $t7 := >=($t1, $t6)
                        $t7 := $GtEq(i, $t6)
                        // if ($t7) goto L1 else goto L0
                        switch $t7
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L5
                        // $t11 := <($t1, $t10)
                        $t11 := $Lt(i, $t10)
                        // if ($t11) goto L3 else goto L2
                        switch $t11
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        // label L3
                        // goto L4
                        $block := 8
                    }
                    case 7 {
                        // label L2
                        // $t15 := vector::pop_back<#0>($t0)
                        $t15 := A1_vector_pop_back$A3_AccountStateMachine_PendingTransfer$(v)
                        // return $t15
                        $result := $t15
                        leave
                    }
                    case 8 {
                        // label L4
                        // $t12 := copy($t1)
                        $t12 := i
                        // $t13 := 1
                        $t13 := 1
                        // $t14 := +($t1, $t13)
                        $t14 := $AddU64(i, $t13)
                        // $t1 := $t14
                        i := $t14
                        // vector::swap<#0>($t0, $t12, $t14)
                        A1_vector_swap$A3_AccountStateMachine_PendingTransfer$(v, $t12, $t14)
                        // goto L5
                        $block := 5
                    }
                }
            }

            function A1_vector_swap$A3_AccountStateMachine_PendingTransfer$(v_ref, i, j) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if or($GtEq(i, size), $GtEq(j, size)) { $AbortBuiltin() }
                let i_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
                let j_ptr := $IndexPtr(v_ptr, add(32, mul(j, 32)))
                let i_val := $LoadU256(i_ptr)
                let j_val := $LoadU256(j_ptr)
                $StoreU256(i_ptr, j_val)
                $StoreU256(j_ptr, i_val)
            }
            function A1_vector_pop_back$A3_AccountStateMachine_PendingTransfer$(v_ref) -> e {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if iszero(size) { $AbortBuiltin() }
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(sub(size, 1), 32)))
                e := $LoadU256(e_ptr)
                if $IsStoragePtr(e_ptr) {
                    let e_offs := $OffsetPtr(e_ptr)
                    let linked_src := $AlignedStorageLoad(e_offs)
                    e := $Malloc(32)
                    mstore(add(e, 0), $AlignedStorageLoad(add(linked_src, 0)))
                    $AlignedStorageStore(add(linked_src, 0), 0)
                    $AlignedStorageStore(e_offs, 0)
                }
                $StoreU64(v_ptr, sub(size, 1))
            }
            function A1_vector_length$A3_AccountStateMachine_PendingTransfer$(v_ref) -> len {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                len := $LoadU64(v_ptr)
            }
            function A1_vector_borrow$A3_AccountStateMachine_PendingTransfer$(v_ref, i) -> e_ptr {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                if $GtEq(i, size) { $AbortBuiltin() }
                e_ptr := $IndexPtr(v_ptr, add(32, mul(i, 32)))
                let e := $LoadU256(e_ptr)
                e_ptr := $MakePtr($IsStoragePtr(v_ref), e)
            }
            function A3_AccountStateMachine_find_xfer(this, xfer_id) -> $result {
                let tmp_$2, i, pending, $t5, $t6, $t7, $t8, $t9, $t10, $t11, $t12, $t13, $t14, $t15, $t16
                let $block := 3
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L6
                        // $t7 := vector::length<AccountStateMachine::PendingTransfer>($t5)
                        $t7 := A1_vector_length$A3_AccountStateMachine_PendingTransfer$($t5)
                        // $t8 := <($t3, $t7)
                        $t8 := $Lt(i, $t7)
                        // if ($t8) goto L1 else goto L0
                        switch $t8
                        case 0  { $block := 5 }
                        default { $block := 4 }
                    }
                    case 3 {
                        // $t5 := borrow_field<AccountStateMachine::Account>.pending($t0)
                        $t5 := this
                        // $t6 := 0
                        $t6 := 0
                        // $t3 := $t6
                        i := $t6
                        // goto L6
                        $block := 2
                    }
                    case 4 {
                        // label L1
                        // goto L2
                        $block := 6
                    }
                    case 5 {
                        // label L0
                        // $t12 := false
                        $t12 := false
                        // $t2 := $t12
                        tmp_$2 := $t12
                        // goto L3
                        $block := 7
                    }
                    case 6 {
                        // label L2
                        // $t9 := vector::borrow<AccountStateMachine::PendingTransfer>($t5, $t3)
                        $t9 := A1_vector_borrow$A3_AccountStateMachine_PendingTransfer$($t5, i)
                        // $t10 := borrow_field<AccountStateMachine::PendingTransfer>.xfer_id($t9)
                        $t10 := $IndexPtr($t9, 16)
                        // $t11 := read_ref($t10)
                        $t11 := $LoadU64($t10)
                        // $t2 := !=($t11, $t1)
                        tmp_$2 := $Neq($t11, xfer_id)
                        // goto L3
                        $block := 7
                    }
                    case 7 {
                        // label L3
                        // if ($t2) goto L5 else goto L4
                        switch tmp_$2
                        case 0  { $block := 9 }
                        default { $block := 8 }
                    }
                    case 8 {
                        // label L5
                        // $t13 := 1
                        $t13 := 1
                        // $t3 := +($t3, $t13)
                        i := $AddU64(i, $t13)
                        // goto L6
                        $block := 2
                    }
                    case 9 {
                        // label L4
                        // $t14 := vector::length<AccountStateMachine::PendingTransfer>($t5)
                        $t14 := A1_vector_length$A3_AccountStateMachine_PendingTransfer$($t5)
                        // $t15 := <($t3, $t14)
                        $t15 := $Lt(i, $t14)
                        // if ($t15) goto L8 else goto L7
                        switch $t15
                        case 0  { $block := 11 }
                        default { $block := 10 }
                    }
                    case 10 {
                        // label L8
                        // goto L9
                        $block := 12
                    }
                    case 11 {
                        // label L7
                        // $t16 := 3
                        $t16 := 3
                        // abort($t16)
                        $Abort($t16)
                    }
                    case 12 {
                        // label L9
                        // return $t3
                        $result := i
                        leave
                    }
                }
            }

            function A3_AccountStateMachine_send_xfer_finish(actor,xfer_id) {
                let $t2 := 0x6a51b363524e1e502dbe8698bec5f165b6cf490a68c4ee9063f2c2f0653ff0dd
                let $t3 := 0x09d2fda8
                {
                    let $t4 := mload(0)
                    let $t5 := abi_encode_tuple_$address_uint64_uint64$_$address_u64_u64$($t4, actor,$t3,xfer_id)
                    log1($t4, sub($t5, $t4), $t2)
                    mstore(0, $t5)
                }
            }
            function A3_AccountStateMachine_send_xfer_deposit(actor,v,caller_,xfer_id) {
                let $t4 := 0x5163aa8ed9d57dbb55d2433f534c881e8fec62da43488c756dbd1ac604ce9c1b
                let $t5 := 0x8eeea8a2
                {
                    let $t6 := mload(0)
                    let $t7 := abi_encode_tuple_$address_uint64_uint64_address_uint64$_$address_u64_u64_address_u64$($t6, actor,$t5,v,caller_,xfer_id)
                    log1($t6, sub($t7, $t6), $t4)
                    mstore(0, $t7)
                }
            }
            function A1_Actor_self() -> addr {
              addr := address()
            }
            function A1_vector_push_back$A3_AccountStateMachine_PendingTransfer$(v_ref, e) {
                let v_offs := $LoadU256(v_ref)
                let v_ptr := $MakePtr($IsStoragePtr(v_ref), v_offs)
                let size := $LoadU64(v_ptr)
                let e_ptr := $IndexPtr(v_ptr, add(32, mul(size, 32)))
                $StoreU256(e_ptr, e)
                if $IsStoragePtr(e_ptr) {
                    let e_offs := $OffsetPtr(e_ptr)
                    let $linked_dst_1341933877 := $NewLinkedStorageBase(0x4ffc4935)
                    $AlignedStorageStore(add($linked_dst_1341933877, 0), mload(add(e, 0)))
                    $Free(e, 32)
                    $AlignedStorageStore(e_offs, $linked_dst_1341933877)
                }
                size := add(size, 1)
                $StoreU64(v_ptr, size)
                let capacity := $LoadU64($IndexPtr(v_ptr, 8))
                if and(iszero($IsStoragePtr(v_ptr)), eq(size, capacity)) {
                    let new_v_offs := $ResizeVector(v_offs, capacity, 32)
                    $StoreU256(v_ref, new_v_offs)
                }
            }
            function A1_Actor_virtual_time() -> virtual_time {
                virtual_time := timestamp()
            }
            function A3_AccountStateMachine_new_xfer_id(this) -> $result {
                let counter, xfer_id, $t3, $t4, $t5, $t6, $t7
                // $t3 := borrow_field<AccountStateMachine::Account>.xfer_id_counter($t0)
                $t3 := $IndexPtr(this, 40)
                // $t4 := read_ref($t3)
                $t4 := $LoadU64($t3)
                // $t5 := read_ref($t3)
                $t5 := $LoadU64($t3)
                // $t6 := 1
                $t6 := 1
                // $t7 := +($t5, $t6)
                $t7 := $AddU64($t5, $t6)
                // write_ref($t3, $t7)
                $StoreU64($t3, $t7)
                // return $t4
                $result := $t4
            }

            function abi_encode_tuple_$address_uint64_uint64_address_uint64$_$address_u64_u64_address_u64$(headStart ,value_0, value_1, value_2, value_3, value_4) -> tail {
                tail := add(headStart, 160)
                abi_encode_address(value_0, add(headStart, 0))
                abi_encode_uint64(value_1, add(headStart, 32))
                abi_encode_uint64(value_2, add(headStart, 64))
                abi_encode_address(value_3, add(headStart, 96))
                abi_encode_uint64(value_4, add(headStart, 128))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_encode_address(value, pos) {
                mstore(pos, cleanup_address(value))
            }
            function cleanup_address(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)
            }
            function abi_encode_tuple_$address_uint64_uint64$_$address_u64_u64$(headStart ,value_0, value_1, value_2) -> tail {
                tail := add(headStart, 96)
                abi_encode_address(value_0, add(headStart, 0))
                abi_encode_uint64(value_1, add(headStart, 32))
                abi_encode_uint64(value_2, add(headStart, 64))
            }
            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$uint64$_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function abi_decode_tuple_$uint64_address_uint64$_$u64_address_u64$(headStart, dataEnd) -> value_0, value_1, value_2 {
                if slt(sub(dataEnd, headStart), 96) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 64
                    value_2 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_address(offset, end) -> value {
                value := calldataload(offset)
                validator_address(value)
            }
            function validator_address(value) {
                if iszero(eq(value, cleanup_address(value))) { $Abort(95) }
            }
            function abi_decode_tuple_$address_uint64$_$address_u64$(headStart, dataEnd) -> value_0, value_1 {
                if slt(sub(dataEnd, headStart), 64) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_address(add(headStart, offset), dataEnd)
                }
                {
                    let offset := 32
                    value_1 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $Malloc(size) -> offs {
                offs := mload(0)
                // pad to word size
                mstore(0, add(offs, shl(5, shr(5, add(size, 31)))))
            }
            function $Free(offs, size) {
            }
            function $MakePtr(is_storage, offs) -> ptr {
              ptr := or(is_storage, shl(1, offs))
            }
            function $IsStoragePtr(ptr) -> b {
              b := and(ptr, 0x1)
            }
            function $OffsetPtr(ptr) -> offs {
              offs := shr(1, ptr)
            }
            function $MaskForSize(size) -> mask {
              mask := sub(shl(shl(3, size), 1), 1)
            }
            function $ExtractBytes(word, start, size) -> bytes {
               switch size
               case 1 {
                  // use the faster byte primitive
                  bytes := byte(start, word)
               }
               default {
                  // As we have big endian, we need to right shift the value from
                  // where the highest byte starts in the word (32 - start), minus
                  // the size.
                  let shift_bits := shl(3, sub(sub(32, start), size))
                  bytes := and(shr(shift_bits, word), $MaskForSize(size))
               }
            }
            function $InjectBytes(word, start, size, bytes) -> new_word {
               let shift_bits := shl(3, sub(sub(32, start), size))
               // Blend out the bits which we inject
               let neg_mask := not(shl(shift_bits, $MaskForSize(size)))
               word := and(word, neg_mask)
               // Overlay the bits we inject
               new_word := or(word, shl(shift_bits, bytes))
            }
            function $ToWordOffs(offs) -> word_offs, byte_offset {
              word_offs := shr(5, offs)
              byte_offset := and(offs, 0x1F)
            }
            function $OverflowBytes(byte_offset, size) -> overflow_bytes {
              let available_bytes := sub(32, byte_offset)
              switch gt(size, available_bytes)
              case 0 {
                overflow_bytes := 0
              }
              default {
                overflow_bytes := sub(size, available_bytes)
              }
            }
            function $MemoryLoadBytes(offs, size) -> val {
              // Lower bit where the value in the higher bytes ends
              let bit_end := shl(3, sub(32, size))
              val := shr(bit_end, mload(offs))
            }
            function $MemoryStoreBytes(offs, size, val) {
              let bit_end := shl(3, sub(32, size))
              let mask := shl(bit_end, $MaskForSize(size))
              mstore(offs, or(and(mload(offs), not(mask)), shl(bit_end, val)))
            }
            function $StorageLoadBytes(offs, size) -> val {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              val := $ExtractBytes(sload(key), byte_offs, size)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              if $LogicalNot(iszero(overflow_bytes)) {
                key := $StorageKey(0, add(word_offs, 1))
                let extra_bytes := $ExtractBytes(sload(key), 0, overflow_bytes)
                val := or(shl(shl(3, overflow_bytes), val), extra_bytes)
              }
            }
            function $StorageStoreBytes(offs, size, bytes) {
              let word_offs, byte_offs := $ToWordOffs(offs)
              let key := $StorageKey(0, word_offs)
              let overflow_bytes := $OverflowBytes(byte_offs, size)
              switch overflow_bytes
              case 0 {
                sstore(key, $InjectBytes(sload(key), byte_offs, size, bytes))
              }
              default {
                // Shift the higher bytes to the right
                let used_bytes := sub(size, overflow_bytes)
                let higher_bytes := shr(used_bytes, bytes)
                let lower_bytes := and(bytes, $MaskForSize(overflow_bytes))
                sstore(key, $InjectBytes(sload(key), byte_offs, used_bytes, higher_bytes))
                key := $StorageKey(0, add(word_offs, 1))
                sstore(key, $InjectBytes(sload(key), 0, overflow_bytes, lower_bytes))
              }
            }
            function $StorageKey(group, word) -> key {
              mstore(32, word)
              mstore(64, shl(224, group))
              key := keccak256(32, 36)
            }
            function $MakeTypeStorageBase(category, type_hash, id) -> offs {
              offs := or(shl(252, category), or(shl(220, type_hash), shl(60, id)))
            }
            function $NewLinkedStorageBase(type_hash) -> offs {
              let key := $StorageKey(1, 1)
              let handle := sload(key)
              sstore(key, add(handle, 1))
              offs := $MakeTypeStorageBase(1, type_hash, handle)
            }
            function $IndexPtr(ptr, offs) -> new_ptr {
              new_ptr := $MakePtr($IsStoragePtr(ptr), add($OffsetPtr(ptr), offs))
            }
            function $LoadU64(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU64(offs)
              }
              default {
                val := $StorageLoadU64(offs)
              }
            }
            function $MemoryLoadU64(offs) -> val {
              val := $MemoryLoadBytes(offs, 8)
            }
            function $StorageLoadU64(offs) -> val {
              val := $StorageLoadBytes(offs, 8)
            }
            function $StoreU64(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU64(offs, val)
              }
              default {
                $StorageStoreU64(offs, val)
              }
            }
            function $MemoryStoreU64(offs, val) {
              $MemoryStoreBytes(offs, 8, val)
            }
            function $StorageStoreU64(offs, val) {
              $StorageStoreBytes(offs, 8, val)
            }
            function $LoadU128(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU128(offs)
              }
              default {
                val := $StorageLoadU128(offs)
              }
            }
            function $MemoryLoadU128(offs) -> val {
              val := $MemoryLoadBytes(offs, 16)
            }
            function $StorageLoadU128(offs) -> val {
              val := $StorageLoadBytes(offs, 16)
            }
            function $MemoryStoreU128(offs, val) {
              $MemoryStoreBytes(offs, 16, val)
            }
            function $LoadU256(ptr) -> val {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                val := $MemoryLoadU256(offs)
              }
              default {
                val := $StorageLoadU256(offs)
              }
            }
            function $MemoryLoadU256(offs) -> val {
              val := $MemoryLoadBytes(offs, 32)
            }
            function $StorageLoadU256(offs) -> val {
              val := $StorageLoadBytes(offs, 32)
            }
            function $StoreU256(ptr, val) {
              let offs := $OffsetPtr(ptr)
              switch $IsStoragePtr(ptr)
              case 0 {
                $MemoryStoreU256(offs, val)
              }
              default {
                $StorageStoreU256(offs, val)
              }
            }
            function $MemoryStoreU256(offs, val) {
              $MemoryStoreBytes(offs, 32, val)
            }
            function $StorageStoreU256(offs, val) {
              $StorageStoreBytes(offs, 32, val)
            }
            function $AlignedStorageLoad(offs) -> val {
              let word_offs := shr(5, offs)
              val := sload($StorageKey(0, word_offs))
            }
            function $AlignedStorageStore(offs, val) {
              let word_offs := shr(5, offs)
              sstore($StorageKey(0, word_offs), val)
            }
            function $CopyMemory(src, dst, size) {
              let num_words, overflow_bytes := $ToWordOffs(size)
              let i := 0
              for { } lt(i, mul(num_words, 32)) { i := add(i, 32) } {
                mstore(add(dst, i), mload(add(src, i)))
              }
              if overflow_bytes {
                let mask := $MaskForSize(sub(32, overflow_bytes))
                let overflow_offs := mul(num_words, 32)
                let dst_word := and(mload(add(dst, overflow_offs)), mask)
                let src_word := and(mload(add(src, overflow_offs)), not(mask))
                mstore(add(dst, overflow_offs), or(dst_word, src_word))
              }
            }
            function $ResizeVector(v_offs, capacity, type_size) -> new_v_offs {
                let new_capacity := mul(capacity, 2)
                let data_size := add(32, mul(capacity, type_size))
                let new_data_size := add(32, mul(new_capacity, type_size))
                new_v_offs := $Malloc(new_data_size)
                $CopyMemory(v_offs, new_v_offs, data_size)
                // update capacity at new location
                $MemoryStoreU64(add(new_v_offs, 8), new_capacity)
                $Free(v_offs, data_size)
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $Lt(x, y) -> r {
                r := lt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $Neq(x, y) -> r {
                r := $LogicalNot(eq(x, y))
            }
            function $LogicalNot(x) -> r {
                r := iszero(x)
            }
        }
    }
}


!! Succeeded compiling Yul
