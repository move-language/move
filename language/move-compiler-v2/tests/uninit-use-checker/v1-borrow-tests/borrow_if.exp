============ initial bytecode ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: bool
     var $t4: &u64
     var $t5: bool
     var $t6: u64
     var $t7: &u64
     var $t8: u64
     var $t9: u64
  0: $t1 := 5
  1: $t0 := infer($t1)
  2: $t3 := true
  3: if ($t3) goto 4 else goto 8
  4: label L0
  5: $t4 := borrow_local($t0)
  6: $t2 := infer($t4)
  7: goto 9
  8: label L1
  9: label L2
 10: $t7 := move($t2)
 11: $t6 := read_ref($t7)
 12: $t8 := 5
 13: $t5 := ==($t6, $t8)
 14: if ($t5) goto 15 else goto 17
 15: label L3
 16: goto 20
 17: label L4
 18: $t9 := 42
 19: abort($t9)
 20: label L5
 21: return ()
}


Diagnostics:
error: use of possibly unassigned local `ref`
  ┌─ tests/uninit-use-checker/v1-borrow-tests/borrow_if.move:8:14
  │
8 │     assert!(*move ref == 5, 42);
  │              ^^^^^^^^

============ after uninitialized_use_checker: ================

[variant baseline]
fun <SELF>_0::main() {
     var $t0: u64
     var $t1: u64
     var $t2: &u64
     var $t3: bool
     var $t4: &u64
     var $t5: bool
     var $t6: u64
     var $t7: &u64
     var $t8: u64
     var $t9: u64
     # before: { no: $t0, $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t0, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9 }
  0: $t1 := 5
     # before: { no: $t0, $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9 }
  1: $t0 := infer($t1)
     # before: { no: $t2, $t3, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }
  2: $t3 := true
     # before: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }
  3: if ($t3) goto 4 else goto 8
     # before: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }
  4: label L0
     # before: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t5, $t6, $t7, $t8, $t9 }
  5: $t4 := borrow_local($t0)
     # before: { no: $t2, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t5, $t6, $t7, $t8, $t9 }
  6: $t2 := infer($t4)
     # before: { no: $t5, $t6, $t7, $t8, $t9 }, after: { no: $t5, $t6, $t7, $t8, $t9 }
  7: goto 9
     # before: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }, after: { no: $t2, $t4, $t5, $t6, $t7, $t8, $t9 }
  8: label L1
     # before: { no: $t5, $t6, $t7, $t8, $t9 }{ maybe: $t2, $t4 }, after: { no: $t5, $t6, $t7, $t8, $t9 }{ maybe: $t2, $t4 }
  9: label L2
     # before: { no: $t5, $t6, $t7, $t8, $t9 }{ maybe: $t2, $t4 }, after: { no: $t5, $t6, $t8, $t9 }{ maybe: $t2, $t4 }
 10: $t7 := move($t2)
     # before: { no: $t5, $t6, $t8, $t9 }{ maybe: $t2, $t4 }, after: { no: $t5, $t8, $t9 }{ maybe: $t2, $t4 }
 11: $t6 := read_ref($t7)
     # before: { no: $t5, $t8, $t9 }{ maybe: $t2, $t4 }, after: { no: $t5, $t9 }{ maybe: $t2, $t4 }
 12: $t8 := 5
     # before: { no: $t5, $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 13: $t5 := ==($t6, $t8)
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 14: if ($t5) goto 15 else goto 17
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 15: label L3
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 16: goto 20
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 17: label L4
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { maybe: $t2, $t4 }
 18: $t9 := 42
     # before: { maybe: $t2, $t4 }, after: { maybe: $t2, $t4 }
 19: abort($t9)
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 20: label L5
     # before: { no: $t9 }{ maybe: $t2, $t4 }, after: { no: $t9 }{ maybe: $t2, $t4 }
 21: return ()
}
