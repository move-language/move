============ initial bytecode ================

[variant baseline]
fun m::test($t0: m::S): u64 {
     var $t1: u64
     var $t2: m::S
     var $t3: m::S
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: &mut m::S
     var $t7: u64
     var $t8: &m::S
     var $t9: &u64
  0: $t2 := infer($t0)
  1: $t3 := infer($t2)
  2: $t6 := borrow_local($t2)
  3: $t5 := borrow_field<m::S>.a($t6)
  4: $t4 := infer($t5)
  5: $t7 := 0
  6: write_ref($t4, $t7)
  7: $t8 := borrow_local($t3)
  8: $t9 := borrow_field<m::S>.a($t8)
  9: $t1 := read_ref($t9)
 10: return $t1
}


Diagnostics:
error: local `p` of type `m::S` does not have the `copy` ability
   ┌─ tests/copy-propagation/mut_refs_2.move:10:13
   │
10 │         let q = p;
   │             ^ copy needed here because value is still in use
11 │         let ref = &mut p.a;
   │                        - used here

error: local `p` of type `m::S` does not have the `drop` ability
   ┌─ tests/copy-propagation/mut_refs_2.move:11:24
   │
11 │         let ref = &mut p.a;
   │                        ^ still borrowed but will be implicitly dropped later since it is no longer used

error: local `q` of type `m::S` does not have the `drop` ability
   ┌─ tests/copy-propagation/mut_refs_2.move:13:9
   │
13 │         q.a
   │         ^ still borrowed but will be implicitly dropped later since it is no longer used

============ after DeadStoreElimination: ================

[variant baseline]
fun m::test($t0: m::S): u64 {
     var $t1: u64
     var $t2: m::S
     var $t3: m::S
     var $t4: &mut u64
     var $t5: &mut u64
     var $t6: &mut m::S
     var $t7: u64
     var $t8: &m::S
     var $t9: &u64
  0: $t2 := move($t0)
  1: $t3 := copy($t2)
  2: $t6 := borrow_local($t2)
  3: $t5 := borrow_field<m::S>.a($t6)
  4: $t4 := move($t5)
  5: $t7 := 0
  6: write_ref($t4, $t7)
  7: $t8 := borrow_local($t3)
  8: $t9 := borrow_field<m::S>.a($t8)
  9: $t1 := read_ref($t9)
 10: return $t1
}
