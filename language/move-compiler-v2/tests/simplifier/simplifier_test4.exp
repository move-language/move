// -- Model dump before bytecode pipeline
module 0x8675309::M {
    struct S {
        f: u64,
    }
    private fun bar(_s: &mut u64,_u: u64) {
        Tuple()
    }
    private fun foo(_s: &M::S,_u: u64) {
        Tuple()
    }
    private fun t0(s: &mut M::S) {
        {
          let x: u64 = 0;
          {
            let f: &mut u64 = x: u64 = Add<u64>(x, 1);
            Borrow(Mutable)(select M::S.f<&mut M::S>(x: u64 = Add<u64>(x, 1);
            1;
            s));
            if true {
              x: u64 = Add<u64>(x, 1);
              M::foo(Freeze(true)<M::S>(s), x: u64 = Add<u64>(x, 1);
              f = 0;
              1)
            } else {
              x: u64 = Add<u64>(x, 1)
            };
            if Eq<u64>(x, 4) {
              Tuple()
            } else {
              Abort(0)
            };
            Tuple()
          }
        }
    }
    private fun t1(s: &mut M::S) {
        M::bar(Borrow(Mutable)(select M::S.f<&mut M::S>(s)), select M::S.f<&mut M::S>(s) = 0;
        1)
    }
} // end 0x8675309::M


Diagnostics:
error: cannot immutably borrow since mutable references exist
   ┌─ tests/simplifier/simplifier_test4.move:11:17
   │
 8 │         let f = { x = x + 1; &mut ({x = x + 1; z; s}).f };
   │                              -------------------------- previous mutable field borrow
   ·
11 │             foo(freeze(s), { *({x = x + 1; f}) = 0; 1 })
   │                 ^^^^^^^^^                  - requirement enforced here
   │                 │
   │                 immutable borrow attempted here

error: cannot immutably borrow since mutable references exist
   ┌─ tests/simplifier/simplifier_test4.move:11:17
   │
 8 │         let f = { x = x + 1; &mut ({x = x + 1; z; s}).f };
   │                              -------------------------- previous mutable field borrow
   ·
11 │             foo(freeze(s), { *({x = x + 1; f}) = 0; 1 })
   │                 ^^^^^^^^^    --------------------- requirement enforced here
   │                 │
   │                 immutable borrow attempted here
