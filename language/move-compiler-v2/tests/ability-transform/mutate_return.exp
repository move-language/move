============ initial bytecode ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
  0: $t2 := vector($t0)
  1: $t3 := borrow_local($t2)
  2: m::g<#0>($t3)
  3: $t1 := infer($t2)
  4: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
  0: return ()
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     # live vars: $t0
  0: $t2 := vector($t0)
     # live vars: $t2
  1: $t3 := borrow_local($t2)
     # live vars: $t2, $t3
  2: m::g<#0>($t3)
     # live vars: $t2
  3: $t1 := infer($t2)
     # live vars: $t1
  4: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # live vars: $t0
  0: return ()
}

============ after ReferenceSafetyProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t2 := vector($t0)
     # live vars: $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t3 := borrow_local($t2)
     # live vars: $t2, $t3
     # graph: {@100=local($t2)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t2=@100,$t3=@101}
     # globals: {}
     #
  2: m::g<#0>($t3)
     # live vars: $t2
     # graph: {@100=local($t2)[]}
     # locals: {$t2=@100}
     # globals: {}
     #
  3: $t1 := infer($t2)
     # live vars: $t1
     # graph: {@100=local($t2)[]}
     # locals: {$t2=@100}
     # globals: {}
     #
  4: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # live vars: $t0
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: return ()
}

============ after AbortAnalysisProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
     # abort state: {returns,aborts}
     # live vars: $t0
     # graph: {}
     # locals: {}
     # globals: {}
     #
  0: $t2 := vector($t0)
     # abort state: {returns,aborts}
     # live vars: $t2
     # graph: {}
     # locals: {}
     # globals: {}
     #
  1: $t3 := borrow_local($t2)
     # abort state: {returns,aborts}
     # live vars: $t2, $t3
     # graph: {@100=local($t2)[borrow(true) -> @101],@101=derived[]}
     # locals: {$t2=@100,$t3=@101}
     # globals: {}
     #
  2: m::g<#0>($t3)
     # abort state: {returns}
     # live vars: $t2
     # graph: {@100=local($t2)[]}
     # locals: {$t2=@100}
     # globals: {}
     #
  3: $t1 := infer($t2)
     # abort state: {returns}
     # live vars: $t1
     # graph: {@100=local($t2)[]}
     # locals: {$t2=@100}
     # globals: {}
     #
  4: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
     # abort state: {returns}
     # live vars: $t0
     # graph: {@1000000=external[borrow(true) -> @2000000],@2000000=derived[]}
     # locals: {$t0=@2000000}
     # globals: {}
     #
  0: return ()
}

============ after AbilityProcessor: ================

[variant baseline]
public fun m::singleton<#0>($t0: #0): vector<#0> {
     var $t1: vector<#0>
     var $t2: vector<#0>
     var $t3: &mut vector<#0>
  0: $t2 := vector($t0)
  1: $t3 := borrow_local($t2)
  2: m::g<#0>($t3)
  3: $t1 := move($t2)
  4: return $t1
}


[variant baseline]
fun m::g<#0>($t0: &mut vector<#0>) {
  0: drop($t0)
  1: return ()
}
