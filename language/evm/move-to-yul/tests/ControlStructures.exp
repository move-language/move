/* =======================================
 * Generated by Move-To-Yul compiler v0.0
 * ======================================= */


object "A2_M" {
    code {
        codecopy(0, dataoffset("A2_M_deployed"), datasize("A2_M_deployed"))
        return(0, datasize("A2_M_deployed"))
    }
    object "A2_M_deployed" {
        code {
            mstore(0, memoryguard(160))
            if iszero(lt(calldatasize(), 4))
            {
                let selector := $Shr(calldataload(0), 224)
                switch selector
                case 0x70e8dbcb
                {
                    // f(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    A2_M_f(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xb3e8e519
                {
                    // g(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    A2_M_g(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0xf5f96a87
                {
                    // h1(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    let ret_0 := A2_M_h1(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple_$uint64$_$u64$(memPos, ret_0)
                    return(memPos, sub(memEnd, memPos))
                }
                case 0x410dac7e
                {
                    // h2(uint64)
                    if callvalue()
                    {
                        $Abort(99)
                    }
                    let param_0 := abi_decode_tuple_$uint64$_$u64$(4, calldatasize())
                    A2_M_h2(param_0)
                    let memPos := mload(0)
                    let memEnd := abi_encode_tuple__(memPos)
                    return(memPos, sub(memEnd, memPos))
                }
                default {}
            }
            $Abort(97)
            function A2_M_f(x) {
                let $t1, $t2, $t3, $t4, $t5, $t6, $t7, $t8
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // return ()
                        leave
                    }
                    case 4 {
                        // label L6
                        // $t1 := 0
                        $t1 := 0
                        // $t2 := >($t0, $t1)
                        $t2 := $Gt(x, $t1)
                        // if ($t2) goto L1 else goto L0
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t3 := 2
                        $t3 := 2
                        // $t4 := %($t0, $t3)
                        $t4 := $Mod(x, $t3)
                        // $t5 := 0
                        $t5 := 0
                        // $t6 := ==($t4, $t5)
                        $t6 := $Eq($t4, $t5)
                        // if ($t6) goto L4 else goto L3
                        switch $t6
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 6 {
                        // label L4
                        // $t7 := 1
                        $t7 := 1
                        // $t0 := +($t0, $t7)
                        x := $AddU64(x, $t7)
                        // goto L5
                        $block := 8
                    }
                    case 7 {
                        // label L3
                        // $t8 := 2
                        $t8 := 2
                        // $t0 := -($t0, $t8)
                        x := $Sub(x, $t8)
                        // goto L5
                        $block := 8
                    }
                    case 8 {
                        // label L5
                        // goto L6
                        $block := 4
                    }
                }
            }

            function A2_M_g(x) {
                let $t1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t4 := 0
                        $t4 := 0
                        // $t5 := ==($t0, $t4)
                        $t5 := $Eq(x, $t4)
                        // if ($t5) goto L5 else goto L4
                        switch $t5
                        case 0  { $block := 7 }
                        default { $block := 6 }
                    }
                    case 4 {
                        // label L3
                        // $t1 := 1
                        $t1 := 1
                        // $t2 := >=($t0, $t1)
                        $t2 := $GtEq(x, $t1)
                        // if ($t2) goto L1 else goto L0
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // $t3 := 1
                        $t3 := 1
                        // $t0 := -($t0, $t3)
                        x := $Sub(x, $t3)
                        // goto L3
                        $block := 4
                    }
                    case 6 {
                        // label L5
                        // goto L6
                        $block := 8
                    }
                    case 7 {
                        // label L4
                        // goto L3
                        $block := 4
                    }
                    case 8 {
                        // label L6
                        // return ()
                        leave
                    }
                }
            }

            function A2_M_h1(x) -> $result {
                let tmp_$1, $t2, $t3, $t4, $t5
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // $t4 := 1
                        $t4 := 1
                        // $t1 := $t4
                        tmp_$1 := $t4
                        // goto L2
                        $block := 5
                    }
                    case 3 {
                        // label L0
                        // $t5 := 2
                        $t5 := 2
                        // $t1 := $t5
                        tmp_$1 := $t5
                        // goto L2
                        $block := 5
                    }
                    case 4 {
                        // $t2 := 0
                        $t2 := 0
                        // $t3 := >($t0, $t2)
                        $t3 := $Gt(x, $t2)
                        // if ($t3) goto L1 else goto L0
                        switch $t3
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                    case 5 {
                        // label L2
                        // return $t1
                        $result := tmp_$1
                        leave
                    }
                }
            }

            function A2_M_h2(x) {
                let $t1, $t2, $t3
                let $block := 4
                for {} true {} {
                    switch $block
                    case 2 {
                        // label L1
                        // $t3 := 1
                        $t3 := 1
                        // abort($t3)
                        $Abort($t3)
                    }
                    case 3 {
                        // label L0
                        // return ()
                        leave
                    }
                    case 4 {
                        // $t1 := 0
                        $t1 := 0
                        // $t2 := >($t0, $t1)
                        $t2 := $Gt(x, $t1)
                        // if ($t2) goto L1 else goto L0
                        switch $t2
                        case 0  { $block := 3 }
                        default { $block := 2 }
                    }
                }
            }

            function abi_encode_tuple__(headStart ) -> tail {
                tail := add(headStart, 0)
            }
            function abi_decode_tuple_$uint64$_$u64$(headStart, dataEnd) -> value_0 {
                if slt(sub(dataEnd, headStart), 32) { $Abort(96) }
                {
                    let offset := 0
                    value_0 := abi_decode_uint64(add(headStart, offset), dataEnd)
                }
            }
            function abi_decode_uint64(offset, end) -> value {
                value := calldataload(offset)
                validator_uint64(value)
            }
            function validator_uint64(value) {
                if iszero(eq(value, cleanup_uint64(value))) { $Abort(95) }
            }
            function cleanup_uint64(value) -> cleaned {
                cleaned := and(value, 0xffffffffffffffff)
            }
            function abi_encode_tuple_$uint64$_$u64$(headStart ,value_0) -> tail {
                tail := add(headStart, 32)
                abi_encode_uint64(value_0, add(headStart, 0))
            }
            function abi_encode_uint64(value, pos) {
                mstore(pos, cleanup_uint64(value))
            }
            function $Abort(code) {
                mstore(0, code)
                revert(24, 8) // TODO: store code as a string?
            }
            function $AbortBuiltin() {
                $Abort(sub(0, 1))
            }
            function $AddU64(x, y) -> r {
                if lt(sub(0xffffffffffffffff, x), y) { $AbortBuiltin() }
                r := add(x, y)
            }
            function $Sub(x, y) -> r {
                if lt(x, y) { $AbortBuiltin() }
                r := sub(x, y)
            }
            function $Mod(x, y) -> r {
                if eq(y, 0) { $AbortBuiltin() }
                r := mod(x, y)
            }
            function $Shr(x, y) -> r {
                r := shr(y, x)
            }
            function $Gt(x, y) -> r {
                r := gt(x, y)
            }
            function $GtEq(x, y) -> r {
                r := or(gt(x, y), eq(x, y))
            }
            function $Eq(x, y) -> r {
                r := eq(x, y)
            }
        }
    }
}


!! Succeeded compiling Yul
