
Diagnostics:
error: cannot mutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/imm_borrow_global_invalid.move:30:18
   │
29 │         let p1 = borrow_global_mut<Pair>(addr1);
   │                  ------------------------------ previous mutable global borrow
30 │         let p2 = borrow_global_mut<Pair>(addr2);
   │                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow attempted here
31 │         p1 == p2
   │         --------
   │         │
   │         requirement enforced here
   │         used by freeze

error: cannot implicitly freeze local `p1`  since multiple mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/imm_borrow_global_invalid.move:31:9
   │
29 │         let p1 = borrow_global_mut<Pair>(addr1);
   │                  ------------------------------ originating mutable global borrow
30 │         let p2 = borrow_global_mut<Pair>(addr2);
   │                  ------------------------------ conflicting mutable global borrow
31 │         p1 == p2
   │         ^^ implicitly frozen here

error: cannot mutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/imm_borrow_global_invalid.move:36:25
   │
35 │         let p1 = freeze(borrow_global_mut<Pair>(addr1));
   │                  --------------------------------------
   │                  │      │
   │                  │      previous mutable global borrow
   │                  used by freeze
36 │         let p2 = freeze(borrow_global_mut<Pair>(addr2));
   │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow attempted here
37 │         p1 == p2
   │         -------- requirement enforced here

error: cannot mutably borrow since mutable references exist
   ┌─ tests/reference-safety/v1-borrow-tests/imm_borrow_global_invalid.move:42:19
   │
41 │         let c1 = &borrow_global_mut<Pair>(addr1).x;
   │                  ---------------------------------
   │                  ││
   │                  │previous mutable global borrow
   │                  used by field borrow
42 │         let c2 = &borrow_global_mut<Pair>(addr2).x;
   │                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable borrow attempted here
43 │         c1 == c2
   │         -------- requirement enforced here
